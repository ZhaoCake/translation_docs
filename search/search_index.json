{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u6587\u6863\u7ffb\u8bd1\u96c6\u5408","text":"<p>\u6b22\u8fce\u8bbf\u95ee\u6211\u7684\u6587\u6863\u7ffb\u8bd1\u96c6\u5408\uff01\u8fd9\u4e2a\u7f51\u7ad9\u6536\u96c6\u4e86\u6211\u5728\u5b66\u4e60\u548c\u5de5\u4f5c\u8fc7\u7a0b\u4e2d\u7ffb\u8bd1\u7684\u5404\u79cd\u6280\u672f\u6587\u6863\uff0c\u4e3b\u8981\u7528\u4e8e\u4e2a\u4eba\u5b66\u4e60\u548c\u53c2\u8003\u3002</p>"},{"location":"#_2","title":"\u5173\u4e8e\u672c\u7ad9","text":"<p>\u8fd9\u4e2a\u7f51\u7ad9\u662f\u6211\u4e2a\u4eba\u7ef4\u62a4\u7684\u6280\u672f\u6587\u6863\u7ffb\u8bd1\u96c6\u5408\u3002\u6211\u5c06\u6301\u7eed\u66f4\u65b0\u548c\u6dfb\u52a0\u65b0\u7684\u6587\u6863\u7ffb\u8bd1\uff0c\u4ee5\u4fbf\u5728\u5b66\u4e60\u548c\u4f7f\u7528\u5404\u79cd\u6280\u672f\u65f6\u6709\u4e2d\u6587\u53c2\u8003\u8d44\u6599\u3002</p> <p>\u7ffb\u8bd1\u7684\u5185\u5bb9\u5c3d\u91cf\u4fdd\u6301\u4e0e\u539f\u6587\u4e00\u81f4\uff0c\u540c\u65f6\u7ed3\u5408\u4e2d\u6587\u8bed\u5883\u8fdb\u884c\u9002\u5f53\u8c03\u6574\uff0c\u4f7f\u6587\u6863\u66f4\u6613\u4e8e\u7406\u89e3\u3002</p>"},{"location":"#_3","title":"\u5f53\u524d\u6587\u6863","text":"<p>\u5f53\u524d\u672c\u7ad9\u5305\u542b\u4ee5\u4e0b\u6587\u6863\u7684\u4e2d\u6587\u7ffb\u8bd1</p>"},{"location":"#chisel-cookbook","title":"Chisel Cookbook","text":"<p>\u6e90\u6587\u6863\uff1ahttps://www.chisel-lang.org/docs/cookbooks</p> <p>Chisel\u662f\u4e00\u79cd\u7528Scala\u7f16\u5199\u7684\u5f00\u6e90\u786c\u4ef6\u63cf\u8ff0\u8bed\u8a00(HDL)\uff0c\u901a\u8fc7\u63d0\u4f9b\u66f4\u9ad8\u7ea7\u7684\u62bd\u8c61\u548c\u7c7b\u578b\u5b89\u5168\u529f\u80fd\uff0c\u4f7f\u786c\u4ef6\u8bbe\u8ba1\u66f4\u52a0\u9ad8\u6548\u548c\u53ef\u9760\u3002</p> <p>Chisel Cookbook\u5305\u542b\u4e86\u5404\u79cd\u5e38\u89c1\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u548c\u6700\u4f73\u5b9e\u8df5\uff0c\u6db5\u76d6\u4e86\u4ee5\u4e0b\u4e3b\u9898\uff1a</p> <ul> <li>\u901a\u7528\u6280\u5de7 - \u57fa\u672c\u64cd\u4f5c\u548c\u5e38\u89c1\u6a21\u5f0f</li> <li>\u547d\u540d - \u5982\u4f55\u5904\u7406\u4fe1\u53f7\u547d\u540d\u95ee\u9898</li> <li>\u5c42\u6b21\u7ed3\u6784 - \u6a21\u5757\u5b9e\u4f8b\u5316\u548c\u5c42\u6b21\u5316\u8bbe\u8ba1</li> <li>DataView - \u6570\u636e\u89c6\u56fe\u548c\u7c7b\u578b\u8f6c\u6362</li> <li>\u5e8f\u5217\u5316 - \u6a21\u5757\u5e8f\u5217\u5316\u6280\u672f</li> <li>\u5bf9\u8c61\u6a21\u578b - Chisel\u5bf9\u8c61\u6a21\u578b\u7684\u4f7f\u7528</li> <li>\u6d4b\u8bd5 - \u786c\u4ef6\u6d4b\u8bd5\u65b9\u6cd5</li> <li>\u6545\u969c\u6392\u9664 - \u5e38\u89c1\u95ee\u9898\u89e3\u51b3\u65b9\u6848</li> </ul>"},{"location":"#chisel","title":"Chisel \u89e3\u91ca\u6587\u6863","text":"<p>\u6e90\u6587\u6863\uff1ahttps://www.chisel-lang.org/docs/explanations</p> <p>\u8fd9\u662fChisel\u7684\u8be6\u7ec6\u89e3\u91ca\u6587\u6863\uff0c\u6df1\u5165\u4ecb\u7ecd\u4e86Chisel\u7684\u5404\u4e2a\u65b9\u9762\u3002\u6587\u6863\u5206\u4e3a\u4e09\u4e2a\u4e3b\u8981\u90e8\u5206\uff1a</p>"},{"location":"#_4","title":"\u57fa\u7840\u6982\u5ff5","text":"<ul> <li>\u52a8\u673a - \u4e3a\u4ec0\u4e48\u9009\u62e9Chisel</li> <li>\u6570\u636e\u7c7b\u578b - Chisel\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b</li> <li>\u7aef\u53e3 - \u6a21\u5757\u63a5\u53e3\u5b9a\u4e49</li> <li>\u8fd0\u7b97\u7b26 - \u652f\u6301\u7684\u8fd0\u7b97\u64cd\u4f5c</li> <li>Bundle\u548cVec - \u590d\u5408\u6570\u636e\u7c7b\u578b</li> </ul>"},{"location":"#_5","title":"\u7535\u8def\u6784\u5efa","text":"<ul> <li>\u6a21\u5757 - \u6a21\u5757\u7684\u5b9a\u4e49\u548c\u4f7f\u7528</li> <li>\u7ec4\u5408\u7535\u8def - \u7ec4\u5408\u903b\u8f91\u8bbe\u8ba1</li> <li>\u65f6\u5e8f\u7535\u8def - \u65f6\u5e8f\u903b\u8f91\u8bbe\u8ba1</li> <li>\u5b58\u50a8\u5668 - \u5185\u5b58\u548c\u5bc4\u5b58\u5668</li> <li>\u5bbd\u5ea6\u63a8\u65ad - \u81ea\u52a8\u4f4d\u5bbd\u63a8\u65ad</li> </ul>"},{"location":"#_6","title":"\u9ad8\u7ea7\u7279\u6027","text":"<ul> <li>\u591a\u6001\u4e0e\u53c2\u6570\u5316 - \u53ef\u91cd\u7528\u786c\u4ef6\u8bbe\u8ba1</li> <li>\u591a\u65f6\u949f\u57df - \u591a\u65f6\u949f\u8bbe\u8ba1</li> <li>\u9ed1\u76d2 - \u5916\u90e8\u6a21\u5757\u96c6\u6210</li> <li>\u6ce8\u89e3 - \u5143\u6570\u636e\u548c\u8f6c\u6362</li> <li>\u6d4b\u8bd5 - \u786c\u4ef6\u9a8c\u8bc1\u65b9\u6cd5</li> </ul>"},{"location":"#_7","title":"\u5373\u5c06\u6dfb\u52a0","text":"<p>\u6211\u8ba1\u5212\u5728\u672a\u6765\u6dfb\u52a0\u66f4\u591a\u6280\u672f\u6587\u6863\u7684\u7ffb\u8bd1\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a</p> <ul> <li>\u5176\u4ed6\u786c\u4ef6\u8bbe\u8ba1\u76f8\u5173\u6587\u6863</li> <li>\u7f16\u7a0b\u8bed\u8a00\u53c2\u8003\u624b\u518c</li> <li>\u6846\u67b6\u548c\u5e93\u7684\u4f7f\u7528\u6307\u5357</li> <li>\u5f00\u53d1\u5de5\u5177\u7684\u4f7f\u7528\u6559\u7a0b</li> </ul>"},{"location":"#_8","title":"\u8d21\u732e\u4e0e\u53cd\u9988","text":"<p>\u5982\u679c\u4f60\u53d1\u73b0\u4efb\u4f55\u7ffb\u8bd1\u9519\u8bef\u6216\u6709\u6539\u8fdb\u5efa\u8bae\uff0c\u6b22\u8fce\u901a\u8fc7GitHub\u4ed3\u5e93\u63d0\u4ea4issue\u6216pull request\u3002</p>"},{"location":"chisel_cookbooks/","title":"\u7ffb\u8bd1\u6587\u732e - Chisel Cookbooks","text":"<p>Chisel\u786c\u4ef6\u8bbe\u8ba1\u8bed\u8a00\u7684Cookbooks\u4e2d\u6587\u6587\u6863\u3002</p>"},{"location":"chisel_cookbooks/#chisel","title":"\u4ec0\u4e48\u662fChisel\uff1f","text":"<p>Chisel\uff08Constructing Hardware In a Scala Embedded Language\uff09\u662f\u4e00\u79cd\u5f00\u6e90\u7684\u786c\u4ef6\u8bbe\u8ba1\u8bed\u8a00\uff0c\u5b83\u5d4c\u5165\u5728Scala\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u7528\u4e8e\u63cf\u8ff0\u6570\u5b57\u7535\u8def\u3002Chisel\u63d0\u4f9b\u4e86\u62bd\u8c61\u7684\u3001\u9ad8\u7ea7\u7684\u786c\u4ef6\u6784\u9020\uff0c\u4f7f\u786c\u4ef6\u8bbe\u8ba1\u66f4\u52a0\u6a21\u5757\u5316\u3001\u53ef\u91cd\u7528\u548c\u53ef\u6d4b\u8bd5\u3002</p>"},{"location":"chisel_cookbooks/#_1","title":"\u624b\u518c","text":"<p>Chisel\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217cookbooks\uff0c\u5e2e\u52a9\u60a8\u7406\u89e3\u548c\u4f7f\u7528\u5404\u79cd\u529f\u80fd\uff1a</p> <ul> <li>\u901a\u7528\u6280\u5de7\u624b\u518c - \u63d0\u4f9b\u5e38\u7528\u7c7b\u578b\u8f6c\u6362\u548c\u5176\u4ed6\u5b9e\u7528\u6280\u5de7</li> <li>\u547d\u540d\u624b\u518c - \u89e3\u91ca\u5982\u4f55\u4e3a\u6a21\u5757\u548c\u4fe1\u53f7\u547d\u540d</li> <li>\u5c42\u6b21\u7ed3\u6784\u624b\u518c - \u63cf\u8ff0\u6a21\u5757\u5c42\u6b21\u7ed3\u6784\u548c\u5b9e\u4f8b\u5316</li> <li>DataView\u624b\u518c - \u4ecb\u7ecdDataView\u529f\u80fd\u7684\u4f7f\u7528</li> <li>\u5e8f\u5217\u5316\u624b\u518c - \u8bb2\u89e3\u6a21\u5757\u5e8f\u5217\u5316\u65b9\u6cd5</li> <li>\u5bf9\u8c61\u6a21\u578b\u624b\u518c - \u89e3\u91ca\u5bf9\u8c61\u6a21\u578b\u7684\u4f7f\u7528</li> <li>\u6d4b\u8bd5\u624b\u518c - \u4ecb\u7ecdChisel\u6d4b\u8bd5\u65b9\u6cd5</li> <li>\u6545\u969c\u6392\u9664 - \u5e38\u89c1\u95ee\u9898\u89e3\u51b3\u65b9\u6848</li> </ul>"},{"location":"chisel_cookbooks/#_2","title":"\u83b7\u53d6\u5e2e\u52a9","text":"<p>\u5982\u679c\u60a8\u6709\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u8bbf\u95eeChisel GitHub\u4ed3\u5e93\u83b7\u53d6\u66f4\u591a\u4fe1\u606f\u6216\u63d0\u4ea4\u95ee\u9898\u3002</p>"},{"location":"chisel_cookbooks/cookbook/","title":"\u901a\u7528\u6280\u5de7\u624b\u518c","text":"<p>\u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e9b\u793a\u4f8b\u4f7f\u7528\u4e86Chisel\u7684scala\u98ce\u683c\u6253\u5370\u3002</p> <ul> <li>\u901a\u7528\u6280\u5de7\u624b\u518c<ul> <li>\u7c7b\u578b\u8f6c\u6362<ul> <li>\u5982\u4f55\u4eceBundle\u5b9e\u4f8b\u521b\u5efaUInt\uff1f</li> <li>\u5982\u4f55\u4eceUInt\u521b\u5efaBundle\uff1f</li> <li>\u5982\u4f55\u5c06Bundle/Vec\u8fde\u63a5\u52300\uff1f</li> <li>\u5982\u4f55\u4eceUInt\u521b\u5efa\u4e00\u4e2a\u5e03\u5c14\u503c\u7684Vec\uff1f</li> <li>\u5982\u4f55\u4ece\u5e03\u5c14\u503c\u7684Vec\u521b\u5efaUInt\uff1f</li> <li>\u5982\u4f55\u8fde\u63a5Bundle\u5b57\u6bb5\u7684\u5b50\u96c6\uff1f</li> </ul> </li> <li>\u5411\u91cf\u548c\u5bc4\u5b58\u5668<ul> <li>\u6211\u53ef\u4ee5\u521b\u5efa2D\u62163D\u5411\u91cf\u5417\uff1f</li> <li>\u5982\u4f55\u521b\u5efa\u5bc4\u5b58\u5668\u7684\u5411\u91cf\uff1f</li> <li>\u5982\u4f55\u521b\u5efaVec\u7c7b\u578b\u7684Reg\uff1f</li> <li>\u5982\u4f55\u90e8\u5206\u91cd\u7f6e\u805a\u5408\u5bc4\u5b58\u5668\uff1f</li> </ul> </li> <li>Bundles<ul> <li>\u5982\u4f55\u5904\u7406\u522b\u540dBundle\u5b57\u6bb5\uff1f<ul> <li>1. 0-arity\u51fd\u6570\u53c2\u6570<ul> <li>\u522b\u540d\u8b66\u544a</li> </ul> </li> <li>2. By-name\u51fd\u6570\u53c2\u6570</li> <li>3. \u5e26\u65b9\u5411\u7684Bundle\u5b57\u6bb5</li> <li>4. \u76f4\u63a5\u8c03\u7528.cloneType</li> </ul> </li> <li>\u5982\u4f55\u5904\u7406\"\u65e0\u6cd5\u514b\u9686\"\u9519\u8bef\uff1f</li> </ul> </li> <li>\u5982\u4f55\u521b\u5efa\u6709\u9650\u72b6\u6001\u673a(FSM)\uff1f</li> <li>\u5982\u4f55\u50cf\u5728Verilog\u4e2d\u90a3\u6837\u89e3\u5305\u503c\uff08\"\u53cd\u5411\u8fde\u63a5\"\uff09\uff1f</li> <li>\u5982\u4f55\u8fdb\u884c\u5b50\u5b57\u8d4b\u503c\uff08\u4e3aUInt\u4e2d\u7684\u67d0\u4e9b\u4f4d\u8d4b\u503c\uff09\uff1f</li> <li>\u5982\u4f55\u521b\u5efa\u53ef\u9009\u7684I/O\uff1f</li> <li>\u5982\u4f55\u521b\u5efa\u6ca1\u6709\u524d\u7f00\u7684I/O\uff1f</li> <li>\u5982\u4f55\u5728Module\u5185\u8986\u76d6\u9690\u5f0f\u65f6\u949f\u6216\u590d\u4f4d\u4fe1\u53f7\uff1f</li> <li>\u5982\u4f55\u6700\u5c0f\u5316\u8f93\u51fa\u5411\u91cf\u4e2d\u4f7f\u7528\u7684\u4f4d\u6570\uff1f</li> <li>\u5982\u4f55\u89e3\u51b3\"\u52a8\u6001\u7d22\u5f15...\u5bf9\u4e8e\u88ab\u63d0\u53d6\u8005\u6765\u8bf4\u592a\u5bbd/\u592a\u7a84...\"\uff1f<ul> <li>\u5f53\u7d22\u5f15\u592a\u5bbd\u65f6\u4f7f\u7528\u4f4d\u63d0\u53d6</li> </ul> </li> <li>\u5982\u4f55\u5728Chisel\u4e2d\u4f7f\u7528Verilog\u7684\"case\u76f8\u7b49\"\u8fd0\u7b97\u7b26\uff1f</li> <li>\u53ef\u9884\u6d4b\u7684\u547d\u540d<ul> <li>\u5982\u4f55\u4f7fChisel\u5728when/withClockAndReset\u7b49\u5757\u4e2d\u6b63\u786e\u547d\u540d\u4fe1\u53f7\uff1f</li> <li>\u5982\u4f55\u4f7fChisel\u6b63\u786e\u547d\u540d\u5411\u91cf\u8bfb\u53d6\u7684\u7ed3\u679c\uff1f</li> <li>\u5982\u4f55\u52a8\u6001\u8bbe\u7f6e/\u53c2\u6570\u5316\u6a21\u5757\u7684\u540d\u79f0\uff1f</li> </ul> </li> <li>\u65b9\u5411\u6027<ul> <li>\u5982\u4f55\u4ece\u53cc\u5411Bundle\uff08\u6216\u5176\u4ed6Data\uff09\u4e2d\u53bb\u9664\u65b9\u5411\uff1f</li> </ul> </li> </ul> </li> </ul>"},{"location":"chisel_cookbooks/cookbook/#_2","title":"\u7c7b\u578b\u8f6c\u6362","text":""},{"location":"chisel_cookbooks/cookbook/#bundleuint","title":"\u5982\u4f55\u4eceBundle\u5b9e\u4f8b\u521b\u5efaUInt\uff1f","text":"<p>\u5728<code>Bundle</code>\u5b9e\u4f8b\u4e0a\u8c03\u7528<code>asUInt</code>\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\n\nclass MyBundle extends Bundle {\n  val foo = UInt(4.W)\n  val bar = UInt(4.W)\n}\n\nclass Foo extends Module {\n  val bundle = Wire(new MyBundle)\n  bundle.foo := 0xc.U\n  bundle.bar := 0x3.U\n  val uint = bundle.asUInt\n  printf(cf\"$uint\") // 195\n\n  // Test\n  assert(uint === 0xc3.U)\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\n// Hidden but will make sure this actually compiles\nchisel3.docs.emitSystemVerilog(new Foo)\n</code></pre>"},{"location":"chisel_cookbooks/cookbook/#uintbundle","title":"\u5982\u4f55\u4eceUInt\u521b\u5efaBundle\uff1f","text":"<p>\u4f7f\u7528<code>asTypeOf</code>\u65b9\u6cd5\u5c06<code>UInt</code>\u91cd\u65b0\u89e3\u91ca\u4e3a<code>Bundle</code>\u7684\u7c7b\u578b\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\n\nclass MyBundle extends Bundle {\n  val foo = UInt(4.W)\n  val bar = UInt(4.W)\n}\n\nclass Foo extends Module {\n  val uint = 0xb4.U\n  val bundle = uint.asTypeOf(new MyBundle)\n\n  printf(cf\"$bundle\") // Bundle(foo -&gt; 11, bar -&gt; 4)\n\n  // Test\n  assert(bundle.foo === 0xb.U)\n  assert(bundle.bar === 0x4.U)\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\n// Hidden but will make sure this actually compiles\nchisel3.docs.emitSystemVerilog(new Foo)\n</code></pre>"},{"location":"chisel_cookbooks/cookbook/#bundlevec0","title":"\u5982\u4f55\u5c06Bundle/Vec\u8fde\u63a5\u52300\uff1f","text":"<p>\u4f60\u53ef\u4ee5\u50cf\u4e0a\u9762\u90a3\u6837\u4f7f\u7528<code>asTypeOf</code>\u3002\u5982\u679c\u4f60\u4e0d\u60f3\u5173\u5fc3\u4f60\u8981\u8fde\u63a5\u7684\u5bf9\u8c61\u7684\u7c7b\u578b\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528<code>chiselTypeOf</code>\uff1a</p> <p><pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\n\nclass MyBundle extends Bundle {\n  val foo = UInt(4.W)\n  val bar = Vec(4, UInt(1.W))\n}\n\nclass Foo(typ: MyBundle) extends Module {\n  val bundleA = IO(Output(typ))\n  val bundleB = IO(Output(typ))\n\n  // typ\u5df2\u7ecf\u662f\u4e00\u4e2aChisel\u6570\u636e\u7c7b\u578b\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u5728\u8fd9\u91cc\u4f7f\u7528\u5b83\uff0c\u4f46\u4f60\n  // \u9700\u8981\u77e5\u9053bundleA\u7684\u7c7b\u578b\u662ftyp\n  bundleA := 0.U.asTypeOf(typ)\n\n  // bundleB\u662f\u4e00\u4e2a\u786c\u4ef6\u6570\u636eIO(Output(...))\uff0c\u6240\u4ee5\u9700\u8981\u8c03\u7528chiselTypeOf\uff0c\n  // \u4f46\u8fd9\u5c06\u9002\u7528\u4e8e\u4efb\u4f55\u7c7b\u578b\u7684bundleB\uff1a\n  bundleB := 0.U.asTypeOf(chiselTypeOf(bundleB))\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\n// Hidden but will make sure this actually compiles\nchisel3.docs.emitSystemVerilog(new Foo(new MyBundle))\n</code></pre></p>"},{"location":"chisel_cookbooks/cookbook/#uintvec","title":"\u5982\u4f55\u4eceUInt\u521b\u5efa\u4e00\u4e2a\u5e03\u5c14\u503c\u7684Vec\uff1f","text":"<p>\u4f7f\u7528<code>VecInit</code>\uff0c\u4f20\u5165\u901a\u8fc7<code>asBools</code>\u65b9\u6cd5\u751f\u6210\u7684<code>Seq[Bool]</code>\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\n\nclass Foo extends Module {\n  val uint = 0xc.U\n  val vec = VecInit(uint.asBools)\n\n  printf(cf\"$vec\") // Vec(0, 0, 1, 1)\n\n  // Test\n  assert(vec(0) === false.B)\n  assert(vec(1) === false.B)\n  assert(vec(2) === true.B)\n  assert(vec(3) === true.B)\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\n// Hidden but will make sure this actually compiles\nchisel3.docs.emitSystemVerilog(new Foo)\n</code></pre>"},{"location":"chisel_cookbooks/cookbook/#vecuint","title":"\u5982\u4f55\u4ece\u5e03\u5c14\u503c\u7684Vec\u521b\u5efaUInt\uff1f","text":"<p>\u4f7f\u7528\u5185\u7f6e\u51fd\u6570<code>asUInt</code></p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\n\nclass Foo extends Module {\n  val vec = VecInit(true.B, false.B, true.B, true.B)\n  val uint = vec.asUInt\n\n  printf(cf\"$uint\") // 13\n\n  // Test\n  // (\u8bb0\u4f4fVec\u4e2d\u6700\u5de6\u4fa7\u7684Bool\u662f\u4f4e\u4f4d)\n  assert(0xd.U === uint)\n\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\n// Hidden but will make sure this actually compiles\nchisel3.docs.emitSystemVerilog(new Foo)\n</code></pre>"},{"location":"chisel_cookbooks/cookbook/#bundle","title":"\u5982\u4f55\u8fde\u63a5Bundle\u5b57\u6bb5\u7684\u5b50\u96c6\uff1f","text":"<p>\u53c2\u89c1DataView cookbook\u3002</p>"},{"location":"chisel_cookbooks/cookbook/#_3","title":"\u5411\u91cf\u548c\u5bc4\u5b58\u5668","text":""},{"location":"chisel_cookbooks/cookbook/#2d3d","title":"\u6211\u53ef\u4ee5\u521b\u5efa2D\u62163D\u5411\u91cf\u5417\uff1f","text":"<p>\u662f\u7684\u3002\u4f7f\u7528<code>VecInit</code>\uff0c\u4f60\u53ef\u4ee5\u521b\u5efa\u5305\u542bChisel\u7c7b\u578b\u5411\u91cf\u7684\u5411\u91cf\u3002\u65b9\u6cd5<code>fill</code>\u548c<code>tabulate</code>\u53ef\u4ee5\u521b\u5efa\u8fd9\u4e9b\u591a\u7ef4\u5411\u91cf\u3002</p> <p><pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\n\nclass MyBundle extends Bundle {\n  val foo = UInt(4.W)\n  val bar = UInt(4.W)\n}\n\nclass Foo extends Module {\n  //2D Fill\n  val twoDVec = VecInit.fill(2, 3)(5.U)\n  //3D Fill\n  val myBundle = Wire(new MyBundle)\n  myBundle.foo := 0xc.U\n  myBundle.bar := 0x3.U\n  val threeDVec = VecInit.fill(1, 2, 3)(myBundle)\n  assert(threeDVec(0)(0)(0).foo === 0xc.U &amp;&amp; threeDVec(0)(0)(0).bar === 0x3.U)\n\n  //2D Tabulate\n  val indexTiedVec = VecInit.tabulate(2, 2){ (x, y) =&gt; (x + y).U }\n  assert(indexTiedVec(0)(0) === 0.U)\n  assert(indexTiedVec(0)(1) === 1.U)\n  assert(indexTiedVec(1)(0) === 1.U)\n  assert(indexTiedVec(1)(1) === 2.U)\n  //3D Tabulate\n  val indexTiedVec3D = VecInit.tabulate(2, 3, 4){ (x, y, z) =&gt; (x + y * z).U }\n  assert(indexTiedVec3D(0)(0)(0) === 0.U)\n  assert(indexTiedVec3D(1)(1)(1) === 2.U)\n  assert(indexTiedVec3D(1)(1)(2) === 3.U)\n  assert(indexTiedVec3D(1)(1)(3) === 4.U)\n  assert(indexTiedVec3D(1)(2)(3) === 7.U)\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\n// Hidden but will make sure this actually compiles\nchisel3.docs.emitSystemVerilog(new Foo)\n</code></pre></p>"},{"location":"chisel_cookbooks/cookbook/#_4","title":"\u5982\u4f55\u521b\u5efa\u5bc4\u5b58\u5668\u7684\u5411\u91cf\uff1f","text":"<p>\u89c4\u5219\uff01\u4f7f\u7528Reg\u7684Vec\u800c\u4e0d\u662fVec\u7684Reg\uff01</p> <p>\u4f60\u521b\u5efa\u4e00\u4e2aVec\u7c7b\u578b\u7684Reg\u3002\u56e0\u4e3aVec\u662f\u4e00\u4e2a\u7c7b\u578b\uff08\u5982<code>UInt</code>\u3001<code>Bool</code>\uff09\u800c\u4e0d\u662f\u4e00\u4e2a\u503c\uff0c\u6211\u4eec\u5fc5\u987b\u5c06Vec\u7ed1\u5b9a\u5230\u67d0\u4e2a\u5177\u4f53\u7684\u503c\u3002</p>"},{"location":"chisel_cookbooks/cookbook/#vecreg","title":"\u5982\u4f55\u521b\u5efaVec\u7c7b\u578b\u7684Reg\uff1f","text":"<p>\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c<code>Vec</code>\u7684API\u6587\u6863\u63d0\u4f9b\u4e86\u66f4\u591a\u4fe1\u606f\u3002</p> <p><pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\n\nclass Foo extends Module {\n  val regOfVec = Reg(Vec(4, UInt(32.W))) // 32\u4f4dUInts\u7684\u5bc4\u5b58\u5668\n  regOfVec(0) := 123.U                   // \u5bf9Vec\u5143\u7d20\u7684\u8d4b\u503c\n  regOfVec(1) := 456.U\n  regOfVec(2) := 789.U\n  regOfVec(3) := regOfVec(0)\n\n  // \u521d\u59cb\u5316\u4e3a\u96f6\u768432\u4f4dUInts\u7684Vec\u7c7b\u578b\u7684Reg\n  //   \u6ce8\u610fSeq.fill\u6784\u9020\u4e864\u4e2a\u503c\u4e3a0\u768432\u4f4dUInt\u5b57\u9762\u91cf\n  //   VecInit(...)\u7136\u540e\u6784\u9020\u4e86\u8fd9\u4e9b\u5b57\u9762\u91cf\u7684Wire\n  //   \u7136\u540eReg\u88ab\u521d\u59cb\u5316\u4e3aWire\u7684\u503c\uff08\u8fd9\u7ed9\u5b83\u76f8\u540c\u7684\u7c7b\u578b\uff09\n  val initRegOfVec = RegInit(VecInit(Seq.fill(4)(0.U(32.W))))\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\n// Hidden but will make sure this actually compiles\nchisel3.docs.emitSystemVerilog(new Foo)\n</code></pre></p>"},{"location":"chisel_cookbooks/cookbook/#_5","title":"\u5982\u4f55\u90e8\u5206\u91cd\u7f6e\u805a\u5408\u5bc4\u5b58\u5668\uff1f","text":"<p>\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u4f7f\u7528\u90e8\u5206\u6307\u5b9a\u7684Bundle\u5b57\u9762\u91cf \u6216Vec\u5b57\u9762\u91cf\u6765\u5339\u914dReg\u7684\u7c7b\u578b\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\nimport chisel3.experimental.BundleLiterals._\n\nclass MyBundle extends Bundle {\n  val foo = UInt(8.W)\n  val bar = UInt(8.W)\n}\n\nclass MyModule extends Module {\n  // \u53ea\u6709.foo\u4f1a\u88ab\u91cd\u7f6e\uff0c.bar\u5c06\u6ca1\u6709\u91cd\u7f6e\u503c\n  val reg = RegInit((new MyBundle).Lit(_.foo -&gt; 123.U))\n}\n</code></pre> <p>\u5982\u679c\u4f60\u7684\u521d\u59cb\u503c\u4e0d\u662f\u5b57\u9762\u91cf\uff0c\u6216\u8005\u4f60\u53ea\u662f\u559c\u6b22\u8fd9\u79cd\u65b9\u5f0f\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a Wire\u4f5c\u4e3aReg\u7684\u521d\u59cb\u503c\u3002\u53ea\u9700\u5c06\u4f60\u4e0d\u5e0c\u671b\u91cd\u7f6e\u7684\u5b57\u6bb5\u8fde\u63a5\u5230<code>DontCare</code>\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass MyModule2 extends Module {\n  val reg = RegInit({\n    // Wire\u53ef\u4ee5\u5728reg\u4e4b\u524d\u6784\u9020\uff0c\u800c\u4e0d\u662f\u5728RegInit\u8303\u56f4\u5185\uff0c\n    // \u4f46\u8fd9\u79cd\u98ce\u683c\u6709\u5f88\u597d\u7684\u8bcd\u6cd5\u4f5c\u7528\u57df\u884c\u4e3a\uff0c\u4fdd\u6301Wire\u7684\u79c1\u6709\u6027\n    val init = Wire(new MyBundle)\n    init := DontCare // \u6ca1\u6709\u5b57\u6bb5\u4f1a\u88ab\u91cd\u7f6e\n    init.foo := 123.U // \u6700\u540e\u8fde\u63a5\u8986\u76d6\uff0c.foo\u88ab\u91cd\u7f6e\n    init\n  })\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\n// Hidden but will make sure this actually compiles\nchisel3.docs.emitSystemVerilog(new MyModule)\nchisel3.docs.emitSystemVerilog(new MyModule2)\n</code></pre>"},{"location":"chisel_cookbooks/cookbook/#bundles","title":"Bundles","text":""},{"location":"chisel_cookbooks/cookbook/#bundle_1","title":"\u5982\u4f55\u5904\u7406\u522b\u540dBundle\u5b57\u6bb5\uff1f","text":"<pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible:reset\nimport chisel3._\n\nclass Top[T &lt;: Data](gen: T) extends Module {\n  val in = IO(Input(gen))\n  val out = IO(Output(gen))\n  out := in\n}\n</code></pre> <p>\u5728\u521b\u5efaBundle\u65f6\u9075\u5faa<code>gen</code>\u6a21\u5f0f\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e00\u4e9b\u96be\u4ee5\u7406\u89e3\u7684\u9519\u8bef\u6d88\u606f\uff1a</p> <pre><code>// mdoc\nclass AliasedBundle[T &lt;: Data](gen: T) extends Bundle {\n  val foo = gen\n  val bar = gen\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:crash\ngetVerilogString(new Top(new AliasedBundle(UInt(8.W))))\n</code></pre> <p>\u8fd9\u4e2a\u9519\u8bef\u8868\u660e<code>AliasedBundle</code>\u7684\u5b57\u6bb5<code>foo</code>\u548c<code>bar</code>\u5728\u5185\u5b58\u4e2d\u662f\u5b8c\u5168\u76f8\u540c\u7684\u5bf9\u8c61\u3002 \u8fd9\u5bf9Chisel\u6765\u8bf4\u662f\u4e2a\u95ee\u9898\uff0c\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u80fd\u591f\u533a\u5206<code>foo</code>\u548c<code>bar</code>\u7684\u4f7f\u7528\uff0c\u4f46\u5f53\u5b83\u4eec\u5f15\u7528\u76f8\u540c\u65f6\u65e0\u6cd5\u533a\u5206\u3002</p> <p>\u6ce8\u610f\uff0c\u4ee5\u4e0b\u793a\u4f8b\u770b\u8d77\u6765\u4e0d\u540c\uff0c\u4f46\u4f1a\u7ed9\u4f60\u5e26\u6765\u5b8c\u5168\u76f8\u540c\u7684\u95ee\u9898\uff1a</p> <pre><code>// mdoc\nclass AlsoAliasedBundle[T &lt;: Data](val gen: T) extends Bundle {\n                                // ^ \u8fd9\u4e2aval\u4f7f`gen`\u6210\u4e3a\u4e00\u4e2a\u5b57\u6bb5\uff0c\u5c31\u50cf`foo`\n  val foo = gen\n}\n</code></pre> <p>\u901a\u8fc7\u4f7f<code>gen</code>\u6210\u4e3a\u4e00\u4e2a<code>val</code>\uff0c\u5b83\u6210\u4e3a<code>class</code>\u7684\u516c\u5171\u5b57\u6bb5\uff0c\u5c31\u50cf<code>foo</code>\u4e00\u6837\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:crash\ngetVerilogString(new Top(new AlsoAliasedBundle(UInt(8.W))))\n</code></pre> <p>\u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6bcf\u79cd\u65b9\u6cd5\u90fd\u6709\u81ea\u5df1\u7684\u4f18\u7f3a\u70b9\u3002</p>"},{"location":"chisel_cookbooks/cookbook/#1-0-arity","title":"1. 0-arity\u51fd\u6570\u53c2\u6570","text":"<p>\u4e0e\u5176\u5c06\u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\uff0c\u4f60\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a0-arity\u51fd\u6570\uff08\u65e0\u53c2\u6570\u7684\u51fd\u6570\uff09\uff1a</p> <pre><code>// mdoc\nclass UsingAFunctionBundle[T &lt;: Data](gen: () =&gt; T) extends Bundle {\n  val foo = gen()\n  val bar = gen()\n}\n</code></pre> <p>\u6ce8\u610f<code>gen</code>\u7684\u7c7b\u578b\u73b0\u5728\u662f<code>() =&gt; T</code>\u3002 \u56e0\u4e3a\u5b83\u73b0\u5728\u662f\u4e00\u4e2a\u51fd\u6570\u800c\u4e0d\u662f<code>Data</code>\u7684\u5b50\u7c7b\u578b\uff0c\u4f60\u53ef\u4ee5\u5b89\u5168\u5730\u5c06<code>gen</code>\u8bbe\u4e3a<code>val</code>\uff0c\u800c\u4e0d\u4f1a \u4f7f\u5b83\u6210\u4e3a<code>Bundle</code>\u7684\u786c\u4ef6\u5b57\u6bb5\u3002</p> <p>\u6ce8\u610f\u8fd9\u4e5f\u610f\u5473\u7740\u4f60\u5fc5\u987b\u5c06<code>gen</code>\u4f5c\u4e3a\u51fd\u6570\u4f20\u9012\uff0c\u4f8b\u5982\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nchisel3.docs.emitSystemVerilog(new Top(new UsingAFunctionBundle(() =&gt; UInt(8.W))))\n</code></pre>"},{"location":"chisel_cookbooks/cookbook/#_6","title":"\u522b\u540d\u8b66\u544a","text":"<p>\u8b66\u544a\uff1a\u4f60\u5fc5\u987b\u786e\u4fdd<code>gen</code>\u521b\u5efa\u65b0\u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u6355\u83b7\u5df2\u6784\u9020\u7684\u503c\uff1a</p> <p><pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:crash\nclass MisusedFunctionArguments extends Module {\n  // \u8fd9\u79cd\u7528\u6cd5\u662f\u6b63\u786e\u7684\n  val in = IO(Input(new UsingAFunctionBundle(() =&gt; UInt(8.W))))\n\n  // \u8fd9\u79cd\u7528\u6cd5\u662f\u4e0d\u6b63\u786e\u7684\n  val fizz = UInt(8.W)\n  val out = IO(Output(new UsingAFunctionBundle(() =&gt; fizz)))\n}\ngetVerilogString(new MisusedFunctionArguments)\n</code></pre> \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u503c<code>fizz</code>\u548c<code>out</code>\u7684\u5b57\u6bb5<code>foo</code>\u548c<code>bar</code>\u5728\u5185\u5b58\u4e2d\u90fd\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\u3002</p>"},{"location":"chisel_cookbooks/cookbook/#2-by-name","title":"2. By-name\u51fd\u6570\u53c2\u6570","text":"<p>\u529f\u80fd\u4e0a\u4e0e(1)\u76f8\u540c\uff0c\u4f46\u8bed\u6cd5\u66f4\u52a0\u5fae\u5999\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528Scala\u6309\u540d\u79f0\u51fd\u6570\u53c2\u6570\uff1a</p> <pre><code>// mdoc\nclass UsingByNameParameters[T &lt;: Data](gen: =&gt; T) extends Bundle {\n  val foo = gen\n  val bar = gen\n}\n</code></pre> <p>\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\uff0c\u4f20\u9012\u53c2\u6570\u65f6\u4e0d\u5305\u62ec<code>() =&gt;</code>\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nchisel3.docs.emitSystemVerilog(new Top(new UsingByNameParameters(UInt(8.W))))\n</code></pre> <p>\u6ce8\u610f\uff0c\u7531\u4e8e\u8fd9\u53ea\u662f(1)\u7684\u8bed\u6cd5\u7cd6\uff0c\u540c\u6837\u7684\u8b66\u544a\u9002\u7528\u3002</p>"},{"location":"chisel_cookbooks/cookbook/#3-bundle","title":"3. \u5e26\u65b9\u5411\u7684Bundle\u5b57\u6bb5","text":"<p>\u4f60\u4e5f\u53ef\u4ee5\u7528<code>Output(...)</code>\u5305\u88c5\u5b57\u6bb5\uff0c\u8fd9\u4f1a\u521b\u5efa\u4f20\u9012\u53c2\u6570\u7684\u65b0\u5b9e\u4f8b\u3002 Chisel\u5c06<code>Output</code>\u89c6\u4e3a\"\u9ed8\u8ba4\u65b9\u5411\"\uff0c\u6240\u4ee5\u5982\u679c\u6240\u6709\u5b57\u6bb5\u90fd\u662f\u8f93\u51fa\uff0c\u8be5<code>Bundle</code>\u5728\u529f\u80fd\u4e0a\u7b49\u540c\u4e8e\u6ca1\u6709\u65b9\u5411\u5b57\u6bb5\u7684<code>Bundle</code>\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nclass DirectionedBundle[T &lt;: Data](gen: T) extends Bundle {\n  val foo = Output(gen)\n  val bar = Output(gen)\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\nchisel3.docs.emitSystemVerilog(new Top(new DirectionedBundle(UInt(8.W))))\n</code></pre> <p>\u8fd9\u79cd\u65b9\u6cd5\u8bda\u7136\u6709\u70b9\u4e11\u964b\uff0c\u5e76\u4e14\u53ef\u80fd\u8bef\u5bfc\u5176\u4ed6\u9605\u8bfb\u4ee3\u7801\u7684\u4eba\uff0c\u56e0\u4e3a\u5b83\u6697\u793a\u8fd9\u4e2aBundle\u65e8\u5728\u7528\u4f5c<code>Output</code>\u3002</p>"},{"location":"chisel_cookbooks/cookbook/#4-clonetype","title":"4. \u76f4\u63a5\u8c03\u7528<code>.cloneType</code>","text":"<p>\u4f60\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5728\u4f60\u7684<code>gen</code>\u53c2\u6570\u4e0a\u8c03\u7528<code>.cloneType</code>\u3002 \u867d\u7136\u6211\u4eec\u8bd5\u56fe\u5bf9\u7528\u6237\u9690\u85cf\u8fd9\u4e2a\u5b9e\u73b0\u7ec6\u8282\uff0c\u4f46<code>.cloneType</code>\u662fChisel\u521b\u5efa<code>Data</code>\u5bf9\u8c61\u65b0\u5b9e\u4f8b\u7684\u673a\u5236\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nclass UsingCloneTypeBundle[T &lt;: Data](gen: T) extends Bundle {\n  val foo = gen.cloneType\n  val bar = gen.cloneType\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\nchisel3.docs.emitSystemVerilog(new Top(new UsingCloneTypeBundle(UInt(8.W))))\n</code></pre>"},{"location":"chisel_cookbooks/cookbook/#_7","title":"\u5982\u4f55\u5904\u7406\"\u65e0\u6cd5\u514b\u9686\"\u9519\u8bef\uff1f","text":"<p>\u5927\u591a\u6570Chisel\u5bf9\u8c61\u9700\u8981\u88ab\u514b\u9686\uff0c\u4ee5\u533a\u5206bundle\u5b57\u6bb5\u7684\u8f6f\u4ef6\u8868\u793a\u548c\u5176\"\u7ed1\u5b9a\"\u7684\u786c\u4ef6 \u8868\u793a\uff0c\u5176\u4e2d\"\u7ed1\u5b9a\"\u662f\u751f\u6210\u786c\u4ef6\u7ec4\u4ef6\u7684\u8fc7\u7a0b\u3002\u5bf9\u4e8eBundle\u5b57\u6bb5\uff0c\u8fd9\u79cd\u514b\u9686\u5e94\u8be5\u901a\u8fc7 \u7f16\u8bd1\u5668\u63d2\u4ef6\u81ea\u52a8\u53d1\u751f\u3002</p> <p>\u4f46\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u63d2\u4ef6\u53ef\u80fd\u65e0\u6cd5\u514b\u9686Bundle\u5b57\u6bb5\u3002\u5f53\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u65f6\uff0c \u6700\u5e38\u89c1\u7684\u60c5\u51b5\u662f\u5f53Bundle\u5b57\u6bb5\u7684<code>chisel3.Data</code>\u90e8\u5206\u5d4c\u5957\u5728\u5176\u4ed6\u6570\u636e\u7ed3\u6784\u4e2d\uff0c \u7f16\u8bd1\u5668\u63d2\u4ef6\u65e0\u6cd5\u5f04\u6e05\u695a\u5982\u4f55\u514b\u9686\u6574\u4e2a\u7ed3\u6784\u3002\u6700\u597d\u907f\u514d\u8fd9\u79cd\u5d4c\u5957\u7ed3\u6784\u3002</p> <p>\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u6709\u51e0\u79cd\u65b9\u6cd5 - \u5982\u679c\u9002\u5f53\uff0c\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u7528Input(...)\u3001Output(...)\u6216Flipped(...)\u5305\u88c5 \u6709\u95ee\u9898\u7684\u5b57\u6bb5\u3002\u4f60\u4e5f\u53ef\u4ee5\u5c1d\u8bd5\u4f7f\u7528<code>chisel3.reflect.DataMirror</code>\u4e2d\u7684<code>chiselTypeClone</code>\u65b9\u6cd5 \u624b\u52a8\u514b\u9686Bundle\u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bb5\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2aBundle\u7684\u4f8b\u5b50\uff0c\u5176\u5b57\u6bb5\u4e0d\u4f1a\u88ab\u514b\u9686\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\nimport chisel3._\nimport scala.collection.immutable.ListMap\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:crash\nclass CustomBundleBroken(elts: (String, Data)*) extends Record {\n  val elements = ListMap(elts: _*)\n\n  def apply(elt: String): Data = elements(elt)\n}\n\nclass NewModule extends Module {\n  val out = Output(UInt(8.W))\n  val recordType = new CustomBundleBroken(\"fizz\" -&gt; UInt(16.W), \"buzz\" -&gt; UInt(16.W))\n  val record = Wire(recordType)\n  val uint = record.asUInt\n  val record2 = uint.asTypeOf(recordType)\n  out := record\n}\ngetVerilogString(new NewModule)\n</code></pre> <p>\u4f60\u53ef\u4ee5\u4f7f\u7528<code>chiselTypeClone</code>\u6765\u514b\u9686\u5143\u7d20\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nimport chisel3.reflect.DataMirror\nimport chisel3.experimental.requireIsChiselType\n\nclass CustomBundleFixed(elts: (String, Data)*) extends Record {\n  val elements = ListMap(elts.map {\n    case (field, elt) =&gt;\n      requireIsChiselType(elt)\n      field -&gt; DataMirror.internal.chiselTypeClone(elt)\n  }: _*)\n\n  def apply(elt: String): Data = elements(elt)\n}\n</code></pre>"},{"location":"chisel_cookbooks/cookbook/#fsm","title":"\u5982\u4f55\u521b\u5efa\u6709\u9650\u72b6\u6001\u673a(FSM)\uff1f","text":"<p>\u5efa\u8bae\u7684\u65b9\u6cd5\u662f\u4f7f\u7528<code>ChiselEnum</code>\u6784\u9020\u8868\u793aFSM\u72b6\u6001\u7684\u679a\u4e3e\u7c7b\u578b\u3002 \u7136\u540e\u7528<code>switch</code>/<code>is</code>\u548c<code>when</code>/<code>.elsewhen</code>/<code>.otherwise</code>\u5904\u7406\u72b6\u6001\u8f6c\u6362\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\nimport chisel3.util.{switch, is}\n\nobject DetectTwoOnes {\n  object State extends ChiselEnum {\n    val sNone, sOne1, sTwo1s = Value\n  }\n}\n\n/* \u8fd9\u4e2aFSM\u68c0\u6d4b\u4e24\u4e2a\u8fde\u7eed\u76841 */\nclass DetectTwoOnes extends Module {\n  import DetectTwoOnes.State\n  import DetectTwoOnes.State._\n\n  val io = IO(new Bundle {\n    val in = Input(Bool())\n    val out = Output(Bool())\n    val state = Output(State())\n  })\n\n  val state = RegInit(sNone)\n\n  io.out := (state === sTwo1s)\n  io.state := state\n\n  switch (state) {\n    is (sNone) {\n      when (io.in) {\n        state := sOne1\n      }\n    }\n    is (sOne1) {\n      when (io.in) {\n        state := sTwo1s\n      } .otherwise {\n        state := sNone\n      }\n    }\n    is (sTwo1s) {\n      when (!io.in) {\n        state := sNone\n      }\n    }\n  }\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\n// Hidden but will make sure this actually compiles\nchisel3.docs.emitSystemVerilog(new DetectTwoOnes)\n</code></pre> <p>\u6ce8\u610f\uff1a<code>is</code>\u8bed\u53e5\u53ef\u4ee5\u63a5\u53d7\u591a\u4e2a\u6761\u4ef6\uff0c\u4f8b\u5982<code>is (sTwo1s, sOne1) { ... }</code>\u3002</p>"},{"location":"chisel_cookbooks/cookbook/#verilog","title":"\u5982\u4f55\u50cf\u5728Verilog\u4e2d\u90a3\u6837\u89e3\u5305\u503c\uff08\"\u53cd\u5411\u8fde\u63a5\"\uff09\uff1f","text":"<p>\u5728Verilog\u4e2d\uff0c\u4f60\u53ef\u4ee5\u505a\u7c7b\u4f3c\u4e0b\u9762\u7684\u64cd\u4f5c\u6765\u89e3\u5305\u503c<code>z</code>\uff1a</p> <pre><code>wire [1:0] a;\nwire [3:0] b;\nwire [2:0] c;\nwire [8:0] z = [...];\nassign {a,b,c} = z;\n</code></pre> <p>\u89e3\u5305\u901a\u5e38\u5bf9\u5e94\u4e8e\u5c06\u975e\u7ed3\u6784\u5316\u6570\u636e\u7c7b\u578b\u91cd\u65b0\u89e3\u91ca\u4e3a\u7ed3\u6784\u5316\u6570\u636e\u7c7b\u578b\u3002 \u901a\u5e38\uff0c\u8fd9\u79cd\u7ed3\u6784\u5316\u7c7b\u578b\u5728\u8bbe\u8ba1\u4e2d\u5e7f\u6cdb\u4f7f\u7528\uff0c\u5e76\u5df2\u7ecf\u5982\u4e0b\u4f8b\u4e2d\u6240\u793a\u8fdb\u884c\u4e86\u58f0\u660e\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\n\nclass MyBundle extends Bundle {\n  val a = UInt(2.W)\n  val b = UInt(4.W)\n  val c = UInt(3.W)\n}\n</code></pre> <p>\u5728Chisel\u4e2d\u5b9e\u73b0\u8fd9\u4e00\u70b9\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u662f\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass Foo extends Module {\n  val z = Wire(UInt(9.W))\n  z := DontCare // \u8fd9\u662f\u4e00\u4e2a\u865a\u62df\u8fde\u63a5\n  val unpacked = z.asTypeOf(new MyBundle)\n  printf(\"%d\", unpacked.a)\n  printf(\"%d\", unpacked.b)\n  printf(\"%d\", unpacked.c)\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\n// Hidden but will make sure this actually compiles\nchisel3.docs.emitSystemVerilog(new Foo)\n</code></pre> <p>\u5982\u679c\u4f60\u771f\u7684\u9700\u8981\u4e3a\u4e00\u6b21\u6027\u60c5\u51b5\u505a\u8fd9\u4e2a\uff08\u4e09\u601d\u800c\u540e\u884c\uff01\u4f60\u5f88\u53ef\u80fd\u53ef\u4ee5\u4f7f\u7528bundle\u66f4\u597d\u5730\u6784\u9020\u4ee3\u7801\uff09\uff0c\u90a3\u4e48rocket-chip\u6709\u4e00\u4e2aSplit\u5de5\u5177\u53ef\u4ee5\u5b8c\u6210\u8fd9\u4e2a\u3002</p>"},{"location":"chisel_cookbooks/cookbook/#uint","title":"\u5982\u4f55\u8fdb\u884c\u5b50\u5b57\u8d4b\u503c\uff08\u4e3aUInt\u4e2d\u7684\u67d0\u4e9b\u4f4d\u8d4b\u503c\uff09\uff1f","text":"<p>\u4f60\u53ef\u80fd\u5c1d\u8bd5\u505a\u7c7b\u4f3c\u4ee5\u4e0b\u7684\u4e8b\u60c5\uff0c\u4f60\u60f3\u53ea\u4e3aChisel\u7c7b\u578b\u7684\u67d0\u4e9b\u4f4d\u8d4b\u503c\u3002 \u4e0b\u9762\uff0c\u5bf9<code>io.out(0)</code>\u7684\u5de6\u4fa7\u8fde\u63a5\u662f\u4e0d\u5141\u8bb8\u7684\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\n\nclass Foo extends Module {\n  val io = IO(new Bundle {\n    val bit = Input(Bool())\n    val out = Output(UInt(10.W))\n  })\n  io.out(0) := io.bit\n}\n</code></pre> <p>\u5982\u679c\u4f60\u5c1d\u8bd5\u7f16\u8bd1\u8fd9\u4e2a\uff0c\u4f60\u4f1a\u5f97\u5230\u4e00\u4e2a\u9519\u8bef\u3002 <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:crash\ngetVerilogString(new Foo)\n</code></pre></p> <p>Chisel3 \u4e0d\u652f\u6301\u5b50\u5b57\u8d4b\u503c\u3002 \u8fd9\u662f\u56e0\u4e3a\u5b50\u5b57\u8d4b\u503c\u901a\u5e38\u6697\u793a\u53ef\u4ee5\u4f7f\u7528\u805a\u5408/\u7ed3\u6784\u5316\u7c7b\u578b\u8fdb\u884c\u66f4\u597d\u7684\u62bd\u8c61\uff0c\u5373\uff0c<code>Bundle</code>\u6216<code>Vec</code>\u3002</p> <p>\u5982\u679c\u4f60\u5fc5\u987b\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u8868\u8fbe\uff0c\u4e00\u79cd\u65b9\u6cd5\u662f\u5c06\u4f60\u7684<code>UInt</code>\u5206\u89e3\u4e3a<code>Bool</code>\u7684<code>Vec</code>\uff0c\u7136\u540e\u518d\u8f6c\u56de\u6765\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\n\nclass Foo extends Module {\n  val io = IO(new Bundle {\n    val in = Input(UInt(10.W))\n    val bit = Input(Bool())\n    val out = Output(UInt(10.W))\n  })\n  val bools = VecInit(io.in.asBools)\n  bools(0) := io.bit\n  io.out := bools.asUInt\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\n// Hidden but will make sure this actually compiles\nchisel3.docs.emitSystemVerilog(new Foo)\n</code></pre>"},{"location":"chisel_cookbooks/cookbook/#io","title":"\u5982\u4f55\u521b\u5efa\u53ef\u9009\u7684I/O\uff1f","text":"<p>\u4ee5\u4e0b\u793a\u4f8b\u662f\u4e00\u4e2a\u6a21\u5757\uff0c\u53ea\u6709\u5f53\u7ed9\u5b9a\u53c2\u6570\u4e3a<code>true</code>\u65f6\u624d\u5305\u542b\u53ef\u9009\u7aef\u53e3<code>out2</code>\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\n\nclass ModuleWithOptionalIOs(flag: Boolean) extends Module {\n  val io = IO(new Bundle {\n    val in = Input(UInt(12.W))\n    val out = Output(UInt(12.W))\n    val out2 = if (flag) Some(Output(UInt(12.W))) else None\n  })\n\n  io.out := io.in\n  if (flag) {\n    io.out2.get := io.in\n  }\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\n// Hidden but will make sure this actually compiles\nchisel3.docs.emitSystemVerilog(new ModuleWithOptionalIOs(true))\n</code></pre> <p>\u4ee5\u4e0b\u662f\u4e00\u4e2a\u6574\u4e2a<code>IO</code>\u662f\u53ef\u9009\u7684\u793a\u4f8b\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\n\nclass ModuleWithOptionalIO(flag: Boolean) extends Module {\n  val in = if (flag) Some(IO(Input(Bool()))) else None\n  val out = IO(Output(Bool()))\n\n  out := in.getOrElse(false.B)\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\n// Hidden but will make sure this actually compiles\nchisel3.docs.emitSystemVerilog(new ModuleWithOptionalIO(true))\n</code></pre>"},{"location":"chisel_cookbooks/cookbook/#io_1","title":"\u5982\u4f55\u521b\u5efa\u6ca1\u6709\u524d\u7f00\u7684I/O\uff1f","text":"<p>\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u7b80\u5355\u5730\u591a\u6b21\u8c03\u7528<code>IO</code>\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\n\nclass MyModule extends Module {\n  val in = IO(Input(UInt(8.W)))\n  val out = IO(Output(UInt(8.W)))\n\n  out := in +% 1.U\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new MyModule)\n</code></pre> <p>\u5982\u679c\u4f60\u6709\u4e00\u4e2a<code>Bundle</code>\uff0c\u4f60\u60f3\u4ece\u4e2d\u521b\u5efa\u6ca1\u6709\u6b63\u5e38<code>val</code>\u524d\u7f00\u7684\u7aef\u53e3\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528<code>FlatIO</code>\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\n\nclass MyBundle extends Bundle {\n  val foo = Input(UInt(8.W))\n  val bar = Output(UInt(8.W))\n}\n\nclass MyModule extends Module {\n  val io = FlatIO(new MyBundle)\n\n  io.bar := io.foo +% 1.U\n}\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u6ca1\u6709\u770b\u5230<code>io_</code>\uff01</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new MyModule)\n</code></pre>"},{"location":"chisel_cookbooks/cookbook/#module","title":"\u5982\u4f55\u5728Module\u5185\u8986\u76d6\u9690\u5f0f\u65f6\u949f\u6216\u590d\u4f4d\u4fe1\u53f7\uff1f","text":"<p>\u8981\u66f4\u6539\u4ee3\u7801\u533a\u57df\u7684\u65f6\u949f\u6216\u590d\u4f4d\u4fe1\u53f7\uff0c\u8bf7\u4f7f\u7528<code>withClock</code>\u3001<code>withReset</code>\u6216<code>withClockAndReset</code>\u3002 \u6709\u5173\u793a\u4f8b\u548c\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u591a\u65f6\u949f\u57df\u3002</p> <p>\u8981\u8986\u76d6<code>Module</code>\u6574\u4e2a\u4f5c\u7528\u57df\u7684\u65f6\u949f\u6216\u590d\u4f4d\u4fe1\u53f7\uff0c\u4f60\u53ef\u4ee5\u6df7\u5165<code>ImplicitClock</code>\u548c<code>ImplicitReset</code>\u7279\u8d28\u3002</p> <p>\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u5982\u4e0b\"\u95e8\u63a7\"\u9ed8\u8ba4\u9690\u5f0f\u65f6\u949f\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\nclass MyModule extends Module with ImplicitClock {\n  val gate = IO(Input(Bool()))\n  val in = IO(Input(UInt(8.W)))\n  val out = IO(Output(UInt(8.W)))\n  // \u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5c06\u5176\u5206\u914d\u7ed9val implicitClock\uff0c\u4f46\u8fd9\u6837\u53ef\u4ee5\u8ba9\u6211\u4eec\u7ed9\u5b83\u4e00\u4e2a\u81ea\u5b9a\u4e49\u540d\u79f0\n  val gatedClock = (clock.asBool || gate).asClock\n  // \u8be5\u7279\u8d28\u8981\u6c42\u6211\u4eec\u5b9e\u73b0\u8fd9\u4e2a\u5f15\u7528\u65f6\u949f\u7684\u65b9\u6cd5\n  // \u6ce8\u610f\u8fd9\u662f\u4e00\u4e2adef\uff0c\u4f46\u5b9e\u9645\u7684\u65f6\u949f\u503c\u5fc5\u987b\u5206\u914d\u7ed9\u4e00\u4e2aval\n  override protected def implicitClock = gatedClock\n\n  val r = Reg(UInt(8.W))\n  out := r\n  r := in\n}\n</code></pre> <p>\u8fd9\u4f1a\u751f\u6210\u4ee5\u4e0bVerilog\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new MyModule)\n</code></pre> <p>\u5982\u679c\u4f60\u4e0d\u5173\u5fc3\u8986\u76d6\u65f6\u949f\u7684\u540d\u79f0\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u5c06\u5176\u5206\u914d\u7ed9<code>val implicitClock</code>\uff1a <pre><code>override protected val implicitClock = (clock.asBool || gate).asClock\n</code></pre></p> <p><code>ImplicitReset</code>\u7684\u5de5\u4f5c\u65b9\u5f0f\u7c7b\u4f3c\u4e8e<code>ImplicitClock</code>\u3002</p>"},{"location":"chisel_cookbooks/cookbook/#_8","title":"\u5982\u4f55\u6700\u5c0f\u5316\u8f93\u51fa\u5411\u91cf\u4e2d\u4f7f\u7528\u7684\u4f4d\u6570\uff1f","text":"<p>\u4f7f\u7528\u63a8\u65ad\u5bbd\u5ea6\u548c<code>Seq</code>\u800c\u4e0d\u662f<code>Vec</code>\uff1a</p> <p>\u8003\u8651\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\n\n// \u8ba1\u7b97\u6bcf\u4e2a\u4f4d\u4f4d\u7f6e\u53ca\u4e4b\u524d\u7684\u7f6e\u4f4d\u6570\nclass CountBits(width: Int) extends Module {\n  val bits = IO(Input(UInt(width.W)))\n  val countVector = IO(Output(Vec(width, UInt())))\n\n  private val countSequence = Seq.tabulate(width)(i =&gt; Wire(UInt()))\n  countSequence.zipWithIndex.foreach { case (port, i) =&gt;\n    port := util.PopCount(bits(i, 0))\n  }\n  countVector := countSequence\n}\n\nclass Top(width: Int) extends Module {\n  val countBits = Module(new CountBits(width))\n  countBits.bits :&lt;&gt;= DontCare\n  dontTouch(countBits.bits)\n  dontTouch(countBits.countVector)\n}\n</code></pre> <p>\u6ce8\u610f\uff0c\u9876\u5c42\u6a21\u5757\u6216\u516c\u5171\u6a21\u5757\u4e0d\u80fd\u6709\u672a\u77e5\u5bbd\u5ea6\u3002</p> <p>\u4e0e<code>Vecs</code>\u8868\u793a\u5355\u4e00\u7684Chisel\u7c7b\u578b\u4e14\u6bcf\u4e2a\u5143\u7d20\u5fc5\u987b\u5177\u6709\u76f8\u540c\u5bbd\u5ea6\u4e0d\u540c\uff0c \u4e0e<code>Vecs</code>\u8868\u793a\u5355\u4e00\u7684Chisel\u7c7b\u578b\u4e14\u6bcf\u4e2a\u5143\u7d20\u5fc5\u987b\u5177\u6709\u76f8\u540c\u5bbd\u5ea6\u4e0d\u540c\uff0c <code>Seq</code>\u662f\u7eafScala\u6784\u9020\uff0c\u56e0\u6b64\u4eceChisel\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u5b83\u4eec\u7684\u5143\u7d20\u662f\u72ec\u7acb\u7684\uff0c\u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u5bbd\u5ea6\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new Top(4))\n  // \u901a\u8fc7\u5220\u9664');'\u4e4b\u540e\u7684\u6240\u6709\u5185\u5bb9\u6765\u5220\u9664\u6a21\u5757\u7684\u4e3b\u4f53\n  .split(\"\\\\);\")\n  .head + \");\\n\"\n</code></pre>"},{"location":"chisel_cookbooks/cookbook/#_9","title":"\u5982\u4f55\u89e3\u51b3\"\u52a8\u6001\u7d22\u5f15...\u5bf9\u4e8e\u88ab\u63d0\u53d6\u8005\u6765\u8bf4\u592a\u5bbd/\u592a\u7a84...\"\uff1f","text":"<p>\u5f53\u52a8\u6001\u7d22\u5f15\u7684\u5bbd\u5ea6\u4e0d\u662f\u7d22\u5f15Vec\u6216UInt\u7684\u6b63\u786e\u5927\u5c0f\u65f6\uff0cChisel\u4f1a\u53d1\u51fa\u8b66\u544a\u3002 \"\u6b63\u786e\u5927\u5c0f\"\u610f\u5473\u7740\u7d22\u5f15\u7684\u5bbd\u5ea6\u5e94\u8be5\u662f\u88ab\u7d22\u5f15\u8005\u5927\u5c0f\u7684log2\u3002 \u5982\u679c\u88ab\u7d22\u5f15\u8005\u7684\u5927\u5c0f\u4e0d\u662f2\u7684\u5e42\uff0c\u5219\u4f7f\u7528log2\u7ed3\u679c\u7684\u4e0a\u9650\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible:reset\nimport chisel3._\n// \u8f85\u52a9\u51fd\u6570\uff0c\u4e22\u5f03\u8fd4\u56de\u503c\uff0c\u4f7f\u5176\u4e0d\u663e\u793a\u5728mdoc\u4e2d\ndef compile(gen: =&gt; chisel3.RawModule): Unit = {\n  circt.stage.ChiselStage.emitCHIRRTL(gen)\n}\n</code></pre> <p>\u5f53\u7d22\u5f15\u6ca1\u6709\u8db3\u591f\u7684\u4f4d\u6765\u5bfb\u5740\u88ab\u63d0\u53d6\u8005\u4e2d\u7684\u6240\u6709\u6761\u76ee\u6216\u4f4d\u65f6\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528<code>.pad</code>\u589e\u52a0\u7d22\u5f15\u7684\u5bbd\u5ea6\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nclass TooNarrow extends RawModule {\n  val extractee = Wire(UInt(7.W))\n  val index = Wire(UInt(2.W))\n  extractee(index)\n}\ncompile(new TooNarrow)\n</code></pre> <p>\u8fd9\u53ef\u4ee5\u7528<code>pad</code>\u4fee\u590d\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nclass TooNarrowFixed extends RawModule {\n  val extractee = Wire(UInt(7.W))\n  val index = Wire(UInt(2.W))\n  extractee(index.pad(3))\n}\ncompile(new TooNarrowFixed)\n</code></pre>"},{"location":"chisel_cookbooks/cookbook/#_10","title":"\u5f53\u7d22\u5f15\u592a\u5bbd\u65f6\u4f7f\u7528\u4f4d\u63d0\u53d6","text":"<pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nclass TooWide extends RawModule {\n  val extractee = Wire(Vec(8, UInt(32.W)))\n  val index = Wire(UInt(4.W))\n  extractee(index)\n}\ncompile(new TooWide)\n</code></pre> <p>\u8fd9\u53ef\u4ee5\u901a\u8fc7\u4f4d\u63d0\u53d6\u4fee\u590d\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nclass TooWideFixed extends RawModule {\n  val extractee = Wire(Vec(8, UInt(32.W)))\n  val index = Wire(UInt(4.W))\n  extractee(index(2, 0))\n}\ncompile(new TooWideFixed)\n</code></pre> <p>\u6ce8\u610f\uff0c\u5927\u5c0f\u4e3a1\u7684<code>Vecs</code>\u548c<code>UInts</code>\u5e94\u8be5\u7531\u96f6\u5bbd\u5ea6\u7684<code>UInt</code>\u7d22\u5f15\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nclass SizeOneVec extends RawModule {\n  val extractee = Wire(Vec(1, UInt(32.W)))\n  val index = Wire(UInt(0.W))\n  extractee(index)\n}\ncompile(new SizeOneVec)\n</code></pre> <p>\u56e0\u4e3a<code>pad</code>\u53ea\u5728\u6240\u9700\u5bbd\u5ea6\u5c0f\u4e8e\u53c2\u6570\u5f53\u524d\u5bbd\u5ea6\u65f6\u624d\u8fdb\u884c\u586b\u5145\uff0c \u4f60\u53ef\u4ee5\u5728\u5bbd\u5ea6\u53ef\u80fd\u5728\u4e0d\u540c\u60c5\u51b5\u4e0b\u592a\u5bbd\u6216\u592a\u7a84\u65f6\u5c06<code>pad</code>\u4e0e\u4f4d\u63d0\u53d6\u7ed3\u5408\u4f7f\u7528</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nimport chisel3.util.log2Ceil\nclass TooWideOrNarrow(extracteeSize: Int, indexWidth: Int) extends Module {\n  val extractee = Wire(Vec(extracteeSize, UInt(8.W)))\n  val index = Wire(UInt(indexWidth.W))\n  val correctWidth = log2Ceil(extracteeSize)\n  extractee(index.pad(correctWidth)(correctWidth - 1, 0))\n}\ncompile(new TooWideOrNarrow(8, 2))\ncompile(new TooWideOrNarrow(8, 4))\n</code></pre> <p>\u5bf9\u4e8e<code>UInts</code>\u7684\u52a8\u6001\u4f4d\u9009\u62e9\uff08\u4f46\u4e0d\u662f<code>Vec</code>\u7684\u52a8\u6001\u7d22\u5f15\uff09\uff0c\u53e6\u4e00\u79cd\u9009\u62e9\u662f\u5bf9\u88ab\u63d0\u53d6\u8005\u8fdb\u884c\u52a8\u6001 \u53f3\u79fb\uff0c\u7136\u540e\u53ea\u9009\u62e9\u5355\u4e2a\u4f4d\uff1a <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nclass TooWideOrNarrowUInt(extracteeSize: Int, indexWidth: Int) extends Module {\n  val extractee = Wire(UInt(extracteeSize.W))\n  val index = Wire(UInt(indexWidth.W))\n  (extractee &gt;&gt; index)(0)\n}\ncompile(new TooWideOrNarrowUInt(8, 2))\ncompile(new TooWideOrNarrowUInt(8, 4))\n</code></pre></p>"},{"location":"chisel_cookbooks/cookbook/#chiselverilogcase","title":"\u5982\u4f55\u5728Chisel\u4e2d\u4f7f\u7528Verilog\u7684\"case\u76f8\u7b49\"\u8fd0\u7b97\u7b26\uff1f","text":"<p>Verilog\u6709\"case\u76f8\u7b49\"\uff08<code>===</code>\uff09\u548c\"\u4e0d\u7b49\"\uff08<code>!==</code>\uff09\u8fd0\u7b97\u7b26\u3002 \u5b83\u4eec\u901a\u5e38\u7528\u4e8e\u5728\u65ad\u8a00\u4e2d\u5ffd\u7565\u672a\u77e5\uff08<code>X</code>\uff09\u503c\u3002</p> <p>Chisel\u4e0d\u76f4\u63a5\u652f\u6301Verilog\u7684<code>X</code>\uff0c\u4f46\u53ef\u4ee5\u4f7f\u7528<code>chisel3.util.circt.isX</code>\u68c0\u67e5\u503c\u662f\u5426\u4e3a<code>X</code>\u3002 <code>isX</code>\u901a\u5e38\u7528\u4e8e\u4fdd\u62a4\u65ad\u8a00\u514d\u53d7<code>X</code>\u7684\u5f71\u54cd\uff0c\u8fd9\u4e0eVerilog\u7684case\u76f8\u7b49\u884c\u4e3a\u7c7b\u4f3c\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\nimport chisel3.util.circt.IsX\n\nclass AssertButAllowX extends Module {\n  val in = IO(Input(UInt(8.W)))\n\n  // \u65ad\u8a00in\u6c38\u8fdc\u4e0d\u4e3a\u96f6\uff1b\u4e5f\u4e0d\u5728X\u51fa\u73b0\u65f6\u89e6\u53d1\u65ad\u8a00\u3002\n  assert(IsX(in) || in =/= 0.U, \"in should never equal 0\")\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\n// Hidden but will make sure this actually compiles\nchisel3.docs.emitSystemVerilog(new AssertButAllowX)\n</code></pre>"},{"location":"chisel_cookbooks/cookbook/#_11","title":"\u53ef\u9884\u6d4b\u7684\u547d\u540d","text":""},{"location":"chisel_cookbooks/cookbook/#chiselwhenwithclockandreset","title":"\u5982\u4f55\u4f7fChisel\u5728when/withClockAndReset\u7b49\u5757\u4e2d\u6b63\u786e\u547d\u540d\u4fe1\u53f7\uff1f","text":"<p>\u4f7f\u7528\u7f16\u8bd1\u5668\u63d2\u4ef6\uff0c\u5982\u679c\u4ecd\u7136\u4e0d\u80fd\u8fbe\u5230\u4f60\u60f3\u8981\u7684\u6548\u679c\uff0c\u8bf7\u67e5\u770b\u547d\u540d\u624b\u518c\u3002</p>"},{"location":"chisel_cookbooks/cookbook/#chisel","title":"\u5982\u4f55\u4f7fChisel\u6b63\u786e\u547d\u540d\u5411\u91cf\u8bfb\u53d6\u7684\u7ed3\u679c\uff1f","text":"<p>\u76ee\u524d\uff0c\u4f7f\u7528\u52a8\u6001\u7d22\u5f15\u65f6\u4f1a\u4e22\u5931\u540d\u79f0\u4fe1\u606f\u3002\u4f8b\u5982\uff1a <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\n\nclass Foo extends Module {\n  val io = IO(new Bundle {\n    val in = Input(Vec(4, Bool()))\n    val idx = Input(UInt(2.W))\n    val en = Input(Bool())\n    val out = Output(Bool())\n  })\n\n  val x = io.in(io.idx)\n  val y = x &amp;&amp; io.en\n  io.out := y\n}\n</code></pre></p> <p>\u4e0a\u9762\u7684\u4ee3\u7801\u4e22\u5931\u4e86<code>x</code>\u540d\u79f0\uff0c\u800c\u662f\u4f7f\u7528<code>_GEN_3</code>\uff08\u5176\u4ed6<code>_GEN_*</code>\u4fe1\u53f7\u662f\u9884\u671f\u7684\uff09\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new Foo)\n</code></pre> <p>\u8fd9\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u4e00\u4e2a\u7ebf\u7f51\u5e76\u5c06\u52a8\u6001\u7d22\u5f15\u8fde\u63a5\u5230\u8be5\u7ebf\u7f51\u6765\u89e3\u51b3\uff1a <pre><code>val x = WireInit(io.in(io.idx))\n</code></pre></p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\nclass Foo2 extends Module {\n  val io = IO(new Bundle {\n    val in = Input(Vec(4, Bool()))\n    val idx = Input(UInt(2.W))\n    val en = Input(Bool())\n    val out = Output(Bool())\n  })\n\n  val x = WireInit(io.in(io.idx))\n  val y = x &amp;&amp; io.en\n  io.out := y\n}\n</code></pre> <p>\u8fd9\u4f1a\u4ea7\u751f\uff1a <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new Foo2)\n</code></pre></p>"},{"location":"chisel_cookbooks/cookbook/#_12","title":"\u5982\u4f55\u52a8\u6001\u8bbe\u7f6e/\u53c2\u6570\u5316\u6a21\u5757\u7684\u540d\u79f0\uff1f","text":"<p>\u4f60\u53ef\u4ee5\u8986\u76d6<code>desiredName</code>\u51fd\u6570\u3002\u8fd9\u9002\u7528\u4e8e\u666e\u901a\u7684Chisel\u6a21\u5757\u548c<code>BlackBox</code>\u3002\u4f8b\u5982\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\n\nclass Coffee extends BlackBox {\n    val io = IO(new Bundle {\n        val I = Input(UInt(32.W))\n        val O = Output(UInt(32.W))\n    })\n    override def desiredName = \"Tea\"\n}\n\nclass Salt extends Module {\n    val io = IO(new Bundle {})\n    val drink = Module(new Coffee)\n    override def desiredName = \"SodiumMonochloride\"\n\n    drink.io.I := 42.U\n}\n</code></pre> <p>\u5bf9Chisel\u6a21\u5757<code>Salt</code>\u8fdb\u884c\u8be6\u7ec6\u5316\u4f1a\u5728\u8f93\u51fa\u7684Verilog\u4e2d\u4ea7\u751f\u6211\u4eec\u4e3a<code>Salt</code>\u548c<code>Coffee</code>\u6240\"\u671f\u671b\u7684\u540d\u79f0\"\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new Salt)\n</code></pre>"},{"location":"chisel_cookbooks/cookbook/#_13","title":"\u65b9\u5411\u6027","text":""},{"location":"chisel_cookbooks/cookbook/#bundledata","title":"\u5982\u4f55\u4ece\u53cc\u5411Bundle\uff08\u6216\u5176\u4ed6Data\uff09\u4e2d\u53bb\u9664\u65b9\u5411\uff1f","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u53cc\u5411\u7aef\u53e3\uff0c\u5982<code>Decoupled</code>\uff0c\u5982\u679c\u4f60\u5c1d\u8bd5\u5c06\u5176\u76f4\u63a5\u8fde\u63a5\u5230\u5bc4\u5b58\u5668\uff0c\u5c06\u4f1a\u5f97\u5230\u9519\u8bef\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\nimport chisel3.util.Decoupled\nclass BadRegConnect extends Module {\n  val io = IO(new Bundle {\n    val enq = Decoupled(UInt(8.W))\n  })\n\n  val monitor = Reg(chiselTypeOf(io.enq))\n  monitor := io.enq\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:crash\ngetVerilogString(new BadRegConnect)\n</code></pre> <p>While there is no construct to \"strip direction\" in Chisel3, wrapping a type in <code>Output(...)</code> (the default direction in Chisel3) will set all of the individual elements to output direction. This will have the desired result when used to construct a Register:</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\nimport chisel3.util.Decoupled\nclass CoercedRegConnect extends Module {\n  val io = IO(new Bundle {\n    val enq = Flipped(Decoupled(UInt(8.W)))\n  })\n\n  // Make a Reg which contains all of the bundle's signals, regardless of their directionality\n  val monitor = Reg(Output(chiselTypeOf(io.enq)))\n  // Even though io.enq is bidirectional, := will drive all fields of monitor with the fields of io.enq\n  monitor := io.enq\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\nchisel3.docs.emitSystemVerilog(new CoercedRegConnect {\n  // Provide default connections that would just muddy the example\n  io.enq.ready := true.B\n  // dontTouch so that it shows up in the Verilog\n  dontTouch(monitor)\n})\n</code></pre>"},{"location":"chisel_cookbooks/dataview/","title":"DataView\u6280\u5de7\u624b\u518c","text":"<ul> <li>DataView\u6280\u5de7\u624b\u518c<ul> <li>\u5982\u4f55\u5c06Data\u89c6\u4e3aUInt\u6216\u53cd\u4e4b\uff1f</li> <li>\u5982\u4f55\u4e3a\u5177\u6709\u7c7b\u578b\u53c2\u6570\u7684Bundle\u521b\u5efaDataView\uff1f</li> <li>\u5982\u4f55\u4e3a\u5177\u6709\u53ef\u9009\u5b57\u6bb5\u7684Bundle\u521b\u5efaDataView\uff1f</li> <li>\u5982\u4f55\u8fde\u63a5Bundle\u5b57\u6bb5\u7684\u5b50\u96c6\uff1f<ul> <li>\u5982\u4f55\u5c06Bundle\u89c6\u4e3a\u7236\u7c7b\u578b\uff08\u8d85\u7c7b\uff09\uff1f</li> <li>\u5f53\u7236\u7c7b\u578b\u662f\u62bd\u8c61\u7684\uff08\u5982trait\uff09\u65f6\uff0c\u5982\u4f55\u5c06Bundle\u89c6\u4e3a\u7236\u7c7b\u578b\uff1f</li> <li>\u5982\u4f55\u4f7f\u7528.viewAs\u800c\u4e0d\u662f.viewAsSupertype(type)\uff1f</li> </ul> </li> </ul> </li> </ul>"},{"location":"chisel_cookbooks/dataview/#datauint","title":"\u5982\u4f55\u5c06Data\u89c6\u4e3aUInt\u6216\u53cd\u4e4b\uff1f","text":"<p>\u5b50\u5b57\u67e5\u770b\uff08\u5728<code>DataViews</code>\u4e2d\u4f7f\u7528\u8fde\u63a5\u6216\u4f4d\u63d0\u53d6\uff09\u76ee\u524d\u5c1a\u4e0d\u652f\u6301\u3002 \u6211\u4eec\u6253\u7b97\u5728\u672a\u6765\u5b9e\u73b0\u8fd9\u4e00\u529f\u80fd\uff0c\u4f46\u76ee\u524d\uff0c\u8bf7\u4f7f\u7528\u5e38\u89c4\u8f6c\u6362 \uff08<code>.asUInt</code>\u548c<code>.asTypeOf</code>\uff09\u3002</p>"},{"location":"chisel_cookbooks/dataview/#bundledataview","title":"\u5982\u4f55\u4e3a\u5177\u6709\u7c7b\u578b\u53c2\u6570\u7684Bundle\u521b\u5efaDataView\uff1f","text":"<p>\u4e0d\u8981\u4f7f\u7528<code>val</code>\uff0c\u800c\u662f\u4f7f\u7528\u53ef\u4ee5\u6709\u7c7b\u578b\u53c2\u6570\u7684<code>def</code>\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\nimport chisel3.experimental.dataview._\n\nclass Foo[T &lt;: Data](val foo: T) extends Bundle\nclass Bar[T &lt;: Data](val bar: T) extends Bundle\n\nobject Foo {\n  implicit def view[T &lt;: Data]: DataView[Foo[T], Bar[T]] = {\n    DataView(f =&gt; new Bar(f.foo.cloneType), _.foo -&gt; _.bar)\n    // .cloneType\u662f\u5fc5\u8981\u7684\uff0c\u56e0\u4e3a\u4f20\u9012\u7ed9\u6b64\u51fd\u6570\u7684f\u5c06\u662f\u7ed1\u5b9a\u7684\u786c\u4ef6\n  }\n}\n</code></pre> <p><pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\n// \u786e\u4fdd\u8fd9\u5728\u8be6\u7ec6\u5316\u8fc7\u7a0b\u4e2d\u5de5\u4f5c\uff0c\u975e\u6587\u6863\u90e8\u5206\nclass MyModule extends RawModule {\n  val in = IO(Input(new Foo(UInt(8.W))))\n  val out = IO(Output(new Bar(UInt(8.W))))\n  out := in.viewAs[Bar[UInt]]\n}\nchisel3.docs.emitSystemVerilog(new MyModule)\n</code></pre> \u5982\u679c\u4f60\u5c06\u7c7b\u578b\u53c2\u6570\u5316\u7c7b\u89c6\u4e3a\u4e00\u7cfb\u5217\u4e0d\u540c\u7684\u7c7b\uff08\u6bcf\u4e2a\u7c7b\u578b\u53c2\u6570\u5bf9\u5e94\u4e00\u4e2a\u7c7b\uff09\uff0c \u4f60\u53ef\u4ee5\u5c06<code>implicit def</code>\u89c6\u4e3a\u6bcf\u4e2a\u7c7b\u578b\u53c2\u6570\u7684<code>DataViews</code>\u751f\u6210\u5668\u3002</p>"},{"location":"chisel_cookbooks/dataview/#bundledataview_1","title":"\u5982\u4f55\u4e3a\u5177\u6709\u53ef\u9009\u5b57\u6bb5\u7684Bundle\u521b\u5efaDataView\uff1f","text":"<p>\u4e0d\u8981\u4f7f\u7528\u9ed8\u8ba4\u7684<code>DataView</code> apply\u65b9\u6cd5\uff0c\u800c\u662f\u4f7f\u7528<code>DataView.mapping</code>\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\nimport chisel3.experimental.dataview._\n\nclass Foo(val w: Option[Int]) extends Bundle {\n  val foo = UInt(8.W)\n  val opt = w.map(x =&gt; UInt(x.W))\n}\nclass Bar(val w: Option[Int]) extends Bundle {\n  val bar = UInt(8.W)\n  val opt = w.map(x =&gt; UInt(x.W))\n}\n\nobject Foo {\n  implicit val view: DataView[Foo, Bar] =\n    DataView.mapping(\n      // \u7b2c\u4e00\u4e2a\u53c2\u6570\u59cb\u7ec8\u662f\u4ece\u76ee\u6807\u521b\u5efa\u89c6\u56fe\u7684\u51fd\u6570\n      f =&gt; new Bar(f.w),\n      // \u73b0\u5728\uff0c\u4e0d\u662f\u53ef\u53d8\u53c2\u6570\u5217\u8868\u4e2d\u7684\u5355\u72ec\u6620\u5c04\u5143\u7ec4\uff0c\u800c\u662f\u4e00\u4e2a\u51fd\u6570\n      // \u8be5\u51fd\u6570\u63a5\u53d7\u76ee\u6807\u548c\u89c6\u56fe\u5e76\u8fd4\u56de\u5143\u7ec4\u7684Iterable\n      (f, b) =&gt;  List(f.foo -&gt; b.bar) ++ f.opt.map(_ -&gt; b.opt.get)\n                                   // ^ \u6ce8\u610f\uff0c\u6211\u4eec\u53ef\u4ee5\u9644\u52a0\u9009\u9879\uff0c\u56e0\u4e3a\u5b83\u4eec\u662fIterable\uff01\n\n    )\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\n// \u786e\u4fdd\u8fd9\u5728\u8be6\u7ec6\u5316\u8fc7\u7a0b\u4e2d\u5de5\u4f5c\uff0c\u975e\u6587\u6863\u90e8\u5206\nclass MyModule extends RawModule {\n  val in = IO(Input(new Foo(Some(8))))\n  val out = IO(Output(new Bar(Some(8))))\n  out := in.viewAs[Bar]\n}\nchisel3.docs.emitSystemVerilog(new MyModule)\n</code></pre>"},{"location":"chisel_cookbooks/dataview/#bundle","title":"\u5982\u4f55\u8fde\u63a5Bundle\u5b57\u6bb5\u7684\u5b50\u96c6\uff1f","text":"<p>Chisel 3\u8981\u6c42\u8fde\u63a5\u7684\u7c7b\u578b\u5b8c\u5168\u5339\u914d\u3002 DataView\u63d0\u4f9b\u4e86\u4e00\u79cd\u673a\u5236\uff0c\u53ef\u4ee5\u5c06\u4e00\u4e2a<code>Bundle</code>\u5bf9\u8c61\"\u89c6\u4e3a\"\u53e6\u4e00\u4e2a\u7c7b\u578b\uff0c \u8fd9\u5141\u8bb8\u5b83\u4eec\u88ab\u8fde\u63a5\u3002</p>"},{"location":"chisel_cookbooks/dataview/#bundle_1","title":"\u5982\u4f55\u5c06Bundle\u89c6\u4e3a\u7236\u7c7b\u578b\uff08\u8d85\u7c7b\uff09\uff1f","text":"<p>\u8981\u5c06<code>Bundles</code>\u89c6\u4e3a\u7236\u7c7b\u578b\uff0c\u53ea\u9700\u4f7f\u7528<code>viewAsSupertype</code>\u5e76\u63d0\u4f9b\u7236\u7c7b\u578b\u7684\u6a21\u677f\u5bf9\u8c61\uff1a</p> <p><pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\nimport chisel3.experimental.dataview._\n\nclass Foo extends Bundle {\n  val foo = UInt(8.W)\n}\nclass Bar extends Foo {\n  val bar = UInt(8.W)\n}\nclass MyModule extends Module {\n  val foo = IO(Input(new Foo))\n  val bar = IO(Output(new Bar))\n  bar.viewAsSupertype(new Foo) := foo // bar.foo := foo.foo\n  bar.bar := 123.U           // \u6240\u6709\u5b57\u6bb5\u90fd\u9700\u8981\u8fde\u63a5\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new MyModule)\n</code></pre></p>"},{"location":"chisel_cookbooks/dataview/#traitbundle","title":"\u5f53\u7236\u7c7b\u578b\u662f\u62bd\u8c61\u7684\uff08\u5982trait\uff09\u65f6\uff0c\u5982\u4f55\u5c06Bundle\u89c6\u4e3a\u7236\u7c7b\u578b\uff1f","text":"<p>\u7ed9\u5b9a\u4ee5\u4e0b\u5171\u4eab\u516c\u5171<code>trait</code>\u7684<code>Bundles</code>\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\nimport chisel3.experimental.dataview._\n\ntrait Super extends Bundle {\n  def bitwidth: Int\n  val a = UInt(bitwidth.W)\n}\nclass Foo(val bitwidth: Int) extends Super {\n  val foo = UInt(8.W)\n}\nclass Bar(val bitwidth: Int) extends Super {\n  val bar = UInt(8.W)\n}\n</code></pre> <p><code>Foo</code>\u548c<code>Bar</code>\u4e0d\u80fd\u76f4\u63a5\u8fde\u63a5\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7\u5c06\u5b83\u4eec\u90fd\u89c6\u4e3a\u5176\u5171\u540c\u8d85\u7c7b\u578b<code>Super</code>\u7684\u5b9e\u4f8b\u6765\u8fde\u63a5\u3002 \u76f4\u63a5\u7684\u65b9\u6cd5\u53ef\u80fd\u4f1a\u9047\u5230\u4ee5\u4e0b\u95ee\u9898\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:fail\nclass MyModule extends Module {\n  val foo = IO(Input(new Foo(8)))\n  val bar = IO(Output(new Bar(8)))\n  bar.viewAsSupertype(new Super) := foo.viewAsSupertype(new Super)\n}\n</code></pre> <p>\u95ee\u9898\u662f<code>viewAs</code>\u9700\u8981\u4e00\u4e2a\u5bf9\u8c61\u4f5c\u4e3a\u7c7b\u578b\u6a21\u677f\uff08\u4ee5\u4fbf\u53ef\u4ee5\u514b\u9686\u5b83\uff09\uff0c \u4f46\u662f<code>traits</code>\u662f\u62bd\u8c61\u7684\uff0c\u4e0d\u80fd\u88ab\u5b9e\u4f8b\u5316\u3002 \u89e3\u51b3\u65b9\u6848\u662f\u521b\u5efa\u4e00\u4e2a_\u533f\u540d\u7c7b_\u7684\u5b9e\u4f8b\uff0c\u5e76\u5c06\u8be5\u5bf9\u8c61\u7528\u4f5c<code>viewAs</code>\u7684\u53c2\u6570\u3002 \u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a</p> <p><pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass MyModule extends Module {\n  val foo = IO(Input(new Foo(8)))\n  val bar = IO(Output(new Bar(8)))\n  val tpe = new Super { // \u6dfb\u52a0\u82b1\u62ec\u53f7\u521b\u5efa\u4e00\u4e2a\u533f\u540d\u7c7b\n    def bitwidth = 8 // We must implement any abstract methods\n  }\n  bar.viewAsSupertype(tpe) := foo.viewAsSupertype(tpe)\n}\n</code></pre> \u901a\u8fc7\u5728trait\u540d\u79f0\u540e\u6dfb\u52a0\u82b1\u62ec\u53f7\uff0c\u6211\u4eec\u544a\u8bc9Scala\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5177\u4f53 trait\u5b50\u7c7b\uff0c\u5e76\u521b\u5efa\u5b83\u7684\u5b9e\u4f8b\u3002 \u6b63\u5982\u6ce8\u91ca\u4e2d\u6240\u6307\u51fa\u7684\uff0c\u62bd\u8c61\u65b9\u6cd5\u4ecd\u7136\u5fc5\u987b\u88ab\u5b9e\u73b0\u3002 \u8fd9\u4e0e\u7f16\u5199<code>new Bundle {}</code>\u65f6\u53d1\u751f\u7684\u60c5\u51b5\u76f8\u540c\uff0c \u82b1\u62ec\u53f7\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u5177\u4f53\u5b50\u7c7b\uff1b\u7136\u800c\uff0c\u7531\u4e8e<code>Bundle</code>\u6ca1\u6709\u62bd\u8c61\u65b9\u6cd5\uff0c \u4e3b\u4f53\u5185\u5bb9\u53ef\u4ee5\u4e3a\u7a7a\u3002</p>"},{"location":"chisel_cookbooks/dataview/#viewasviewassupertypetype","title":"\u5982\u4f55\u4f7f\u7528<code>.viewAs</code>\u800c\u4e0d\u662f<code>.viewAsSupertype(type)</code>\uff1f","text":"<p>\u867d\u7136<code>viewAsSupertype</code>\u5bf9\u4e00\u6b21\u6027\u8f6c\u6362\u5f88\u6709\u5e2e\u52a9\uff0c\u4f46\u6bcf\u6b21\u90fd\u9700\u8981\u63d0\u4f9b\u7c7b\u578b\u6a21\u677f\u5bf9\u8c61 \u53ef\u80fd\u4f1a\u5f88\u9ebb\u70e6\u3002 \u7531\u4e8e\u5b50\u7c7b\u578b\u5173\u7cfb\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528<code>PartialDataView.supertype</code>\u6765\u521b\u5efa\u4e00\u4e2a \u4eceBundle\u7c7b\u578b\u5230\u7236\u7c7b\u578b\u7684<code>DataView</code>\uff0c\u53ea\u9700\u63d0\u4f9b\u4ece\u5b50\u7c7b\u578b\u5b9e\u4f8b\u6784\u9020 \u7236\u7c7b\u578b\u5b9e\u4f8b\u7684\u51fd\u6570\u3002 \u76f8\u5e94\u5b57\u6bb5\u7684\u6620\u5c04\u7531Chisel\u81ea\u52a8\u786e\u5b9a\u4e3a\u5728\u7236\u7c7b\u578b\u4e2d\u5b9a\u4e49\u7684\u5b57\u6bb5\u3002</p> <p><pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\nimport chisel3.experimental.dataview._\n\nclass Foo(x: Int) extends Bundle {\n  val foo = UInt(x.W)\n}\nclass Bar(val x: Int) extends Foo(x) {\n  val bar = UInt(x.W)\n}\n// \u5b9a\u4e49\u4e00\u4e2aDataView\uff0c\u65e0\u9700\u6307\u5b9a\u6620\u5c04\uff01\nimplicit val view: DataView[Bar, Foo] = PartialDataView.supertype[Bar, Foo](b =&gt; new Foo(b.x))\n\nclass MyModule extends Module {\n  val foo = IO(Input(new Foo(8)))\n  val bar = IO(Output(new Bar(8)))\n  bar.viewAs[Foo] := foo // bar.foo := foo.foo\n  bar.bar := 123.U       // \u6240\u6709\u5b57\u6bb5\u90fd\u9700\u8981\u8fde\u63a5\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new MyModule)\n</code></pre></p>"},{"location":"chisel_cookbooks/hierarchy/","title":"\u5c42\u6b21\u7ed3\u6784\u624b\u518c","text":"<ul> <li>\u5c42\u6b21\u7ed3\u6784\u624b\u518c<ul> <li>\u5982\u4f55\u5b9e\u4f8b\u5316\u5177\u6709\u76f8\u540c\u6a21\u5757\u53c2\u6570\u5316\u7684\u591a\u4e2a\u5b9e\u4f8b\uff1f<ul> <li>\u4f7f\u7528Definition\u548cInstance</li> <li>\u4f7f\u7528Instantiate</li> </ul> </li> <li>\u5982\u4f55\u8bbf\u95ee\u5b9e\u4f8b\u7684\u5185\u90e8\u5b57\u6bb5\uff1f</li> <li>\u5982\u4f55\u4f7f\u6211\u7684\u5b57\u6bb5\u53ef\u4ece\u5b9e\u4f8b\u8bbf\u95ee\uff1f</li> <li>\u5982\u4f55\u4f7f\u5305\u542bData\u6216\u6a21\u5757\u7684case\u7c7b\u53ef\u4ece\u5b9e\u4f8b\u8bbf\u95ee\uff1f</li> <li>\u5982\u4f55\u4f7f\u7c7b\u578b\u53c2\u6570\u5316\u7684case\u7c7b\u53ef\u4ece\u5b9e\u4f8b\u8bbf\u95ee\uff1f</li> <li>\u5982\u4f55\u4f7f\u5177\u6709\u5927\u91cf\u5b57\u6bb5\u7684case\u7c7b\u53ef\u4ece\u5b9e\u4f8b\u8bbf\u95ee\uff1f</li> <li>\u5982\u4f55\u4eceDefinition\u67e5\u627e\u5b57\u6bb5\uff0c\u5982\u679c\u6211\u4e0d\u60f3\u5b9e\u4f8b\u5316\u5b83\uff1f</li> <li>\u5982\u4f55\u901a\u8fc7\u5176\u5b50\u5b9e\u4f8b\u53c2\u6570\u5316\u6a21\u5757\uff1f</li> <li>\u5982\u4f55\u4f7f\u7528\u65b0\u7684\u5c42\u6b21\u7ed3\u6784\u7279\u5b9a\u7684Select\u51fd\u6570\uff1f</li> </ul> </li> </ul>"},{"location":"chisel_cookbooks/hierarchy/#_2","title":"\u5982\u4f55\u5b9e\u4f8b\u5316\u5177\u6709\u76f8\u540c\u6a21\u5757\u53c2\u6570\u5316\u7684\u591a\u4e2a\u5b9e\u4f8b\uff1f","text":"<p>\u5728\u6b64\u5305\u53d1\u5e03\u4e4b\u524d\uff0cChisel\u7528\u6237\u4f9d\u8d56FIRRTL\u7f16\u8bd1\u5668\u4e2d\u7684\u53bb\u91cd\u529f\u80fd\u6765\u5c06\u7ed3\u6784\u76f8\u540c\u7684\u6a21\u5757\u5408\u5e76\u4e3a\u4e00\u4e2a\u6a21\u5757\uff08\u5373\"\u53bb\u91cd\"\uff09\u3002 \u8fd9\u4e2a\u5305\u5f15\u5165\u4e86\u4ee5\u4e0b\u65b0\u7684API\uff0c\u4ee5\u4fbf\u76f4\u63a5\u5728Chisel\u4e2d\u542f\u7528\u591a\u91cd\u5b9e\u4f8b\u5316\u6a21\u5757\u3002</p> <p><code>Definition(...)</code>\u5141\u8bb8\u8be6\u7ec6\u8bf4\u660e\u4e00\u4e2a\u6a21\u5757\uff0c\u4f46\u5b9e\u9645\u4e0a\u5e76\u4e0d\u5b9e\u4f8b\u5316\u8be5\u6a21\u5757\u3002 \u76f8\u53cd\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a\u4ee3\u8868\u8be5\u6a21\u5757\u5b9a\u4e49\u7684<code>Definition</code>\u7c7b\u3002</p> <p><code>Instance(...)</code>\u63a5\u53d7\u4e00\u4e2a<code>Definition</code>\u5e76\u5c06\u5176\u5b9e\u4f8b\u5316\uff0c\u8fd4\u56de\u4e00\u4e2a<code>Instance</code>\u5bf9\u8c61\u3002</p> <p><code>Instantiate(...)</code>\u63d0\u4f9b\u4e86\u4e0e<code>Module(...)</code>\u7c7b\u4f3c\u7684API\uff0c\u4f46\u5b83\u4f7f\u7528 <code>Definition</code>\u548c<code>Instance</code>\u6765\u4e3a\u7ed9\u5b9a\u7684\u53c2\u6570\u96c6\u53ea\u8be6\u7ec6\u8bf4\u660e\u4e00\u6b21\u6a21\u5757\u3002 \u5b83\u8fd4\u56de\u4e00\u4e2a<code>Instance</code>\u5bf9\u8c61\u3002</p> <p>\u5c06\u4e0e<code>Definition</code>/<code>Instance</code> API\u4e00\u8d77\u4f7f\u7528\u7684\u6a21\u5757\uff08\u7c7b\u6216\u7279\u8d28\uff09\u5e94\u5728\u7c7b/\u7279\u8d28\u5b9a\u4e49\u5904\u6807\u8bb0 \u4e3a<code>@instantiable</code>\u6ce8\u89e3\u3002</p> <p>\u8981\u4f7f\u6a21\u5757\u7684\u6210\u5458\u53d8\u91cf\u53ef\u4ece<code>Instance</code>\u5bf9\u8c61\u8bbf\u95ee\uff0c\u5b83\u4eec\u5fc5\u987b\u7528<code>@public</code>\u6ce8\u89e3\u6807\u8bb0\u3002 \u8bf7\u6ce8\u610f\uff0c\u8fd9\u53ea\u80fd\u4eceScala\u7684\u89d2\u5ea6\u8bbf\u95ee - \u5b83\u672c\u8eab\u4e0d\u662f\u8de8\u6a21\u5757\u5f15\u7528\u7684\u673a\u5236\u3002</p>"},{"location":"chisel_cookbooks/hierarchy/#definitioninstance","title":"\u4f7f\u7528Definition\u548cInstance","text":"<p>\u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c\u4f7f\u7528<code>Definition</code>\u3001<code>Instance</code>\u3001<code>@instantiable</code>\u548c<code>@public</code>\u6765\u521b\u5efa \u4e00\u4e2a\u6a21\u5757<code>AddOne</code>\u7684\u7279\u5b9a\u53c2\u6570\u5316\u7684\u591a\u4e2a\u5b9e\u4f8b\u3002</p> <p><pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3._\nimport chisel3.experimental.hierarchy.{Definition, Instance, instantiable, public}\n\n@instantiable\nclass AddOne(width: Int) extends Module {\n  @public val in  = IO(Input(UInt(width.W)))\n  @public val out = IO(Output(UInt(width.W)))\n  out := in + 1.U\n}\n\nclass AddTwo(width: Int) extends Module {\n  val in  = IO(Input(UInt(width.W)))\n  val out = IO(Output(UInt(width.W)))\n  val addOneDef = Definition(new AddOne(width))\n  val i0 = Instance(addOneDef)\n  val i1 = Instance(addOneDef)\n  i0.in := in\n  i1.in := i0.out\n  out   := i1.out\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new AddTwo(10))\n</code></pre></p>"},{"location":"chisel_cookbooks/hierarchy/#instantiate","title":"\u4f7f\u7528Instantiate","text":"<p>\u4e0e\u4e0a\u9762\u7c7b\u4f3c\uff0c\u4ee5\u4e0b\u793a\u4f8b\u4f7f\u7528<code>Instantiate</code>\u521b\u5efa <code>AddOne</code>\u7684\u591a\u4e2a\u5b9e\u4f8b\u3002</p> <p><pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3.experimental.hierarchy.Instantiate\n\nclass AddTwoInstantiate(width: Int) extends Module {\n  val in  = IO(Input(UInt(width.W)))\n  val out = IO(Output(UInt(width.W)))\n  val i0 = Instantiate(new AddOne(width))\n  val i1 = Instantiate(new AddOne(width))\n  i0.in := in\n  i1.in := i0.out\n  out   := i1.out\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new AddTwoInstantiate(16))\n</code></pre></p>"},{"location":"chisel_cookbooks/hierarchy/#_3","title":"\u5982\u4f55\u8bbf\u95ee\u5b9e\u4f8b\u7684\u5185\u90e8\u5b57\u6bb5\uff1f","text":"<p>\u60a8\u53ef\u4ee5\u4f7f\u7528<code>@public</code>\u6ce8\u89e3\u6807\u8bb0\u7528<code>@instantiable</code>\u6ce8\u89e3\u6807\u8bb0\u7684Module\u7c7b\u6216\u7279\u8d28\u7684\u5185\u90e8\u6210\u5458\u3002 \u8981\u6c42\u662f\u8be5\u5b57\u6bb5\u53ef\u516c\u5f00\u8bbf\u95ee\uff0c\u662f<code>val</code>\u6216<code>lazy val</code>\uff0c\u5e76\u4e14\u5fc5\u987b\u6709<code>Lookupable</code>\u7684\u5b9e\u73b0\u3002</p> <p>\u9ed8\u8ba4\u652f\u6301\u7684\u7c7b\u578b\u6709\uff1a</p> <ol> <li><code>Data</code></li> <li><code>BaseModule</code></li> <li><code>MemBase</code></li> <li><code>IsLookupable</code></li> <li>\u5305\u542b\u6ee1\u8db3\u8fd9\u4e9b\u8981\u6c42\u7684\u7c7b\u578b\u7684<code>Iterable</code>/<code>Option</code>/<code>Either</code></li> <li>\u57fa\u672c\u7c7b\u578b\u5982<code>String</code>\u3001<code>Int</code>\u3001<code>BigInt</code>\u3001<code>Unit</code>\u7b49\u3002</li> </ol> <p>\u8981\u5c06\u8d85\u7c7b\u7684\u6210\u5458\u6807\u8bb0\u4e3a<code>@public</code>\uff0c\u8bf7\u4f7f\u7528\u4ee5\u4e0b\u6a21\u5f0f\uff08\u4ee5<code>val clock</code>\u4e3a\u4f8b\uff09\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\nimport chisel3.experimental.hierarchy.{instantiable, public}\n\n@instantiable\nclass MyModule extends Module {\n  @public val clock = clock\n}\n</code></pre> <p>\u5bf9\u4e8e\u4e0d\u6b63\u786e\u6807\u8bb0\u4e3a<code>@public</code>\u7684\u5185\u5bb9\uff0c\u60a8\u4f1a\u6536\u5230\u4ee5\u4e0b\u9519\u8bef\u6d88\u606f\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:reset:fail\nimport chisel3._\nimport chisel3.experimental.hierarchy.{instantiable, public}\n\nobject NotValidType\n\n@instantiable\nclass MyModule extends Module {\n  @public val x = NotValidType\n}\n</code></pre>"},{"location":"chisel_cookbooks/hierarchy/#_4","title":"\u5982\u4f55\u4f7f\u6211\u7684\u5b57\u6bb5\u53ef\u4ece\u5b9e\u4f8b\u8bbf\u95ee\uff1f","text":"<p>\u5982\u679c\u5b9e\u4f8b\u7684\u5b57\u6bb5\u5f88\u7b80\u5355\uff08\u4f8b\u5982<code>Int</code>\u3001<code>String</code>\u7b49\uff09\uff0c\u5b83\u4eec\u53ef\u4ee5\u76f4\u63a5\u6807\u8bb0\u4e3a<code>@public</code>\u3002</p> <p>\u901a\u5e38\uff0c\u5b57\u6bb5\u66f4\u590d\u6742\uff08\u4f8b\u5982\u7528\u6237\u5b9a\u4e49\u7684case\u7c7b\uff09\u3002 \u5982\u679c\u4e00\u4e2acase\u7c7b\u4ec5\u7531\u7b80\u5355\u7c7b\u578b\u7ec4\u6210\uff08\u5373\u5b83\u4e0d\u5305\u542b\u4efb\u4f55<code>Data</code>\u3001<code>BaseModules</code>\u3001memories\u6216<code>Instances</code>\uff09\uff0c \u5b83\u53ef\u4ee5\u6269\u5c55<code>IsLookupable</code>\u7279\u8d28\u3002 \u8fd9\u5411Chisel\u8868\u660e<code>IsLookupable</code>\u7c7b\u7684\u5b9e\u4f8b\u53ef\u4ee5\u4ece\u5b9e\u4f8b\u5185\u90e8\u8bbf\u95ee\u3002 \uff08\u5982\u679c\u7c7b\u786e\u5b9e\u5305\u542b\u8bf8\u5982<code>Data</code>\u6216\u6a21\u5757\u4e4b\u7c7b\u7684\u5185\u5bb9\uff0c\u8bf7\u53c2\u89c1\u4e0b\u9762\u7684\u90e8\u5206\u3002\uff09</p> <p>\u4f46\u662f\uff0c\u786e\u4fdd\u8fd9\u4e9b\u53c2\u6570\u5bf9\u5b9a\u4e49\u7684\u6240\u6709\u5b9e\u4f8b\u90fd\u662f\u771f\u5b9e\u7684\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u7684\u53c2\u6570\u5305\u542b\u4e00\u4e2a\u7279\u5b9a\u4e8e\u5b9e\u4f8b\u7684id\u5b57\u6bb5\uff0c\u4f46\u9ed8\u8ba4\u4e3a\u96f6\uff0c \u90a3\u4e48\u5b9a\u4e49\u7684id\u5c06\u8fd4\u56de\u7ed9\u6240\u6709\u5b9e\u4f8b\u3002 \u5982\u679c\u5176\u4ed6\u4ee3\u7801\u5047\u8bbeid\u5b57\u6bb5\u662f\u6b63\u786e\u7684\uff0c\u8fd9\u79cd\u884c\u4e3a\u53d8\u5316\u53ef\u80fd\u5bfc\u81f4\u9519\u8bef\u3002</p> <p>\u56e0\u6b64\uff0c\u5f53\u5c06\u666e\u901a\u6a21\u5757\u8f6c\u6362\u4e3a\u4f7f\u7528\u6b64\u5305\u65f6\uff0c \u60a8\u9700\u8981\u5c0f\u5fc3\u6807\u8bb0\u4e3a<code>IsLookupable</code>\u7684\u5185\u5bb9\u3002</p> <p>\u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6dfb\u52a0\u4e86\u7279\u8d28<code>IsLookupable</code>\u4ee5\u5141\u8bb8\u6210\u5458\u88ab\u6807\u8bb0\u4e3a<code>@public</code>\u3002</p> <p>In the following example, we added the trait <code>IsLookupable</code> to allow the member to be marked <code>@public</code>.</p> <p><pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:reset:silent\nimport chisel3._\nimport chisel3.experimental.hierarchy.{Definition, Instance, instantiable, IsLookupable, public}\n\ncase class MyCaseClass(width: Int) extends IsLookupable\n\n@instantiable\nclass MyModule extends Module {\n  @public val x = MyCaseClass(10)\n}\n\nclass Top extends Module {\n  val inst = Instance(Definition(new MyModule))\n  println(s\"Width is ${inst.x.width}\")\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:passthrough\nprintln(\"```\")\n// \u8fd0\u884c\u8be6\u7ec6\u8bf4\u660e\uff0c\u4ee5\u4fbf\u4e0a\u9762\u7684println\u663e\u793a\u51fa\u6765\ncirct.stage.ChiselStage.elaborate(new Top)\nprintln(\"```\")\n</code></pre></p>"},{"location":"chisel_cookbooks/hierarchy/#datacase","title":"\u5982\u4f55\u4f7f\u5305\u542bData\u6216\u6a21\u5757\u7684case\u7c7b\u53ef\u4ece\u5b9e\u4f8b\u8bbf\u95ee\uff1f","text":"<p>\u5bf9\u4e8e\u5305\u542b<code>Data</code>\u3001<code>BaseModule</code>\u3001<code>MemBase</code>\u6216<code>Instance</code>\u7c7b\u578b\u7684case\u7c7b\uff0c\u60a8\u53ef\u4ee5\u63d0\u4f9b<code>Lookupable</code>\u7c7b\u578b\u7c7b\u7684\u5b9e\u73b0\u3002</p> <p>\u6ce8\u610f\uff0c\u6a21\u5757\u7684Lookupable\u5df2\u88ab\u5f03\u7528\uff0c\u8bf7\u6539\u7528\u8f6c\u6362\u4e3aInstance\uff08\u4f7f\u7528<code>.toInstance</code>\uff09\u3002</p> <p>\u8003\u8651\u4ee5\u4e0bcase\u7c7b\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:reset\nimport chisel3._\nimport chisel3.experimental.hierarchy.{Definition, Instance, instantiable, public}\n\n@instantiable\nclass MyModule extends Module {\n  @public val wire = Wire(UInt(8.W))\n}\ncase class UserDefinedType(name: String, data: UInt, inst: Instance[MyModule])\n</code></pre> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c<code>UserDefinedType</code>\u7684\u5b9e\u4f8b\u5c06\u65e0\u6cd5\u4ece\u5b9e\u4f8b\u4e2d\u8bbf\u95ee\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:fail\n@instantiable\nclass HasUserDefinedType extends Module {\n  val inst = Module(new MyModule)\n  val wire = Wire(UInt(8.W))\n  @public val x = UserDefinedType(\"foo\", wire, inst.toInstance)\n}\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u4e3a<code>UserDefinedType</code>\u5b9e\u73b0<code>Lookupable</code>\u7c7b\u578b\u7c7b\uff0c\u4ee5\u4f7f\u5176\u53ef\u8bbf\u95ee\u3002 \u8fd9\u6d89\u53ca\u5728<code>UserDefinedType</code>\u7684\u4f34\u751f\u5bf9\u8c61\u4e2d\u5b9a\u4e49\u4e00\u4e2a\u9690\u5f0fval\u3002 \u56e0\u4e3a<code>UserDefinedType</code>\u6709\u4e09\u4e2a\u5b57\u6bb5\uff0c\u6211\u4eec\u4f7f\u7528<code>Lookupable.product3</code>\u5de5\u5382\u3002 \u5b83\u63a5\u53d74\u4e2a\u7c7b\u578b\u53c2\u6570\uff1acase\u7c7b\u7684\u7c7b\u578b\uff0c\u4ee5\u53ca\u5176\u6bcf\u4e2a\u5b57\u6bb5\u7684\u7c7b\u578b\u3002</p> <p>\u5982\u679c\u4efb\u4f55\u5b57\u6bb5\u662f<code>BaseModules</code>\uff0c\u60a8\u5fc5\u987b\u5c06\u5b83\u4eec\u66f4\u6539\u4e3a<code>Instance[_]</code>\u624d\u80fd\u5b9a\u4e49<code>Lookupable</code>\u7c7b\u578b\u7c7b\u3002</p> <p>\u6709\u5173\u7c7b\u578b\u7c7b\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605DataView\u90e8\u5206\u5173\u4e8e\u7c7b\u578b\u7c7b\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nimport chisel3.experimental.hierarchy.Lookupable\nobject UserDefinedType {\n  // \u4f7f\u7528Lookupable.Simple\u7c7b\u578b\u522b\u540d\u4f5c\u4e3a\u8fd4\u56de\u7c7b\u578b\u3002\n  implicit val lookupable: Lookupable.Simple[UserDefinedType] =\n    Lookupable.product3[UserDefinedType, String, UInt, Instance[MyModule]](\n      // \u63d0\u4f9b\u5c06UserDefinedType\u8f6c\u6362\u4e3a\u5143\u7ec4\u7684\u914d\u65b9\u3002\n      x =&gt; (x.name, x.data, x.inst),\n      // \u63d0\u4f9b\u5c06\u5143\u7ec4\u8f6c\u6362\u4e3a\u7528\u6237\u5b9a\u4e49\u7c7b\u578b\u7684\u914d\u65b9\u3002\n      // \u5bf9\u4e8ecase\u7c7b\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5185\u7f6e\u7684\u5de5\u5382\u65b9\u6cd5\u3002\n      UserDefinedType.apply\n    )\n}\n</code></pre> <p>\u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u5b9e\u4f8b\u4e2d\u8bbf\u95ee<code>UserDefinedType</code>\u7684\u5b9e\u4f8b\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\n@instantiable\nclass HasUserDefinedType extends Module {\n  val inst = Module(new MyModule)\n  val wire = Wire(UInt(8.W))\n  @public val x = UserDefinedType(\"foo\", wire, inst.toInstance)\n}\nclass Top extends Module {\n  val inst = Instance(Definition(new HasUserDefinedType))\n  println(s\"Name is: ${inst.x.name}\")\n}\n</code></pre>"},{"location":"chisel_cookbooks/hierarchy/#case","title":"\u5982\u4f55\u4f7f\u7c7b\u578b\u53c2\u6570\u5316\u7684case\u7c7b\u53ef\u4ece\u5b9e\u4f8b\u8bbf\u95ee\uff1f","text":"<p>\u8003\u8651\u4ee5\u4e0b\u7c7b\u578b\u53c2\u6570\u5316\u7684case\u7c7b\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:reset\nimport chisel3._\nimport chisel3.experimental.hierarchy.{Definition, Instance, instantiable, public}\n\ncase class ParameterizedUserDefinedType[A, T &lt;: Data](value: A, data: T)\n</code></pre> <p>\u4e0e<code>HasUserDefinedType</code>\u7c7b\u4f3c\uff0c\u6211\u4eec\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u9690\u5f0f\u63d0\u4f9b<code>Lookupable</code>\u7c7b\u578b\u7c7b\u3002 \u7136\u800c\uff0c\u4e0e\u4e0a\u9762\u7684\u7b80\u5355\u793a\u4f8b\u4e0d\u540c\uff0c\u6211\u4eec\u4f7f\u7528<code>implicit def</code>\u6765\u5904\u7406\u7c7b\u578b\u53c2\u6570\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nimport chisel3.experimental.hierarchy.Lookupable\nobject ParameterizedUserDefinedType {\n  // \u7c7b\u578b\u7c7b\u5b9e\u4f8b\u5316\u662f\u9012\u5f52\u7684\uff0c\u6240\u4ee5A\u548cT\u90fd\u5fc5\u987b\u6709Lookupable\u5b9e\u4f8b\u3002\n  // \u6211\u4eec\u901a\u8fc7\u4e0a\u4e0b\u6587\u7ed1\u5b9a`: Lookupable`\u4e3aA\u8981\u6c42\u8fd9\u4e00\u70b9\u3002\n  // Data\u662fChisel\u5185\u7f6e\u7684\uff0c\u6240\u4ee5\u5df2\u77e5\u5177\u6709Lookupable\u5b9e\u4f8b\u3002\n  implicit def lookupable[A : Lookupable, T &lt;: Data]: Lookupable.Simple[ParameterizedUserDefinedType[A, T]] =\n    Lookupable.product2[ParameterizedUserDefinedType[A, T], A, T](\n      x =&gt; (x.value, x.data),\n      ParameterizedUserDefinedType.apply\n    )\n}\n</code></pre> <p>\u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u5b9e\u4f8b\u4e2d\u8bbf\u95ee<code>ParameterizedUserDefinedType</code>\u7684\u5b9e\u4f8b\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nclass ChildModule extends Module {\n  @public val wire = Wire(UInt(8.W))\n}\n@instantiable\nclass HasUserDefinedType extends Module {\n  val wire = Wire(UInt(8.W))\n  @public val x = ParameterizedUserDefinedType(\"foo\", wire)\n  @public val y = ParameterizedUserDefinedType(List(1, 2, 3), wire)\n}\nclass Top extends Module {\n  val inst = Instance(Definition(new HasUserDefinedType))\n  println(s\"x.value is: ${inst.x.value}\")\n  println(s\"y.value.head is: ${inst.y.value.head}\")\n}\n</code></pre>"},{"location":"chisel_cookbooks/hierarchy/#case_1","title":"\u5982\u4f55\u4f7f\u5177\u6709\u5927\u91cf\u5b57\u6bb5\u7684case\u7c7b\u53ef\u4ece\u5b9e\u4f8b\u8bbf\u95ee\uff1f","text":"<p>Lookupable\u63d0\u4f9b\u4e86\u4ece<code>product1</code>\u5230<code>product5</code>\u7684\u5de5\u5382\u3002 \u5982\u679c\u60a8\u7684\u7c7b\u6709\u8d85\u8fc75\u4e2a\u5b57\u6bb5\uff0c\u60a8\u53ef\u4ee5\u5728\u6620\u5c04\u4e2d\u4f7f\u7528\u5d4c\u5957\u5143\u7ec4\u4f5c\u4e3a\"\u4f2a\u5b57\u6bb5\"\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\ncase class LotsOfFields(a: Data, b: Data, c: Data, d: Data, e: Data, f: Data)\nobject LotsOfFields {\n  implicit val lookupable: Lookupable.Simple[LotsOfFields] =\n    Lookupable.product5[LotsOfFields, Data, Data, Data, Data, (Data, Data)](\n      x =&gt; (x.a, x.b, x.c, x.d, (x.e, x.f)),\n      // \u8fd9\u6b21\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528\u5de5\u5382\u65b9\u6cd5\uff0c\u56e0\u4e3a\u6211\u4eec\u5fc5\u987b\u89e3\u5305\u5143\u7ec4\u3002\n      { case (a, b, c, d, (e, f)) =&gt; LotsOfFields(a, b, c, d, e, f) },\n    )\n}\n</code></pre>"},{"location":"chisel_cookbooks/hierarchy/#definition","title":"\u5982\u4f55\u4eceDefinition\u67e5\u627e\u5b57\u6bb5\uff0c\u5982\u679c\u6211\u4e0d\u60f3\u5b9e\u4f8b\u5316\u5b83\uff1f","text":"<p>\u5c31\u50cf<code>Instance</code>\u4e00\u6837\uff0c<code>Definition</code>\u4e5f\u5305\u542b<code>@public</code>\u6210\u5458\u7684\u8bbf\u95ee\u5668\u3002 \u56e0\u6b64\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u5b83\u4eec\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:reset:silent\nimport chisel3._\nimport chisel3.experimental.hierarchy.{Definition, instantiable, public}\n\n@instantiable\nclass AddOne(val width: Int) extends RawModule {\n  @public val width = width\n  @public val in  = IO(Input(UInt(width.W)))\n  @public val out = IO(Output(UInt(width.W)))\n  out := in + 1.U\n}\n\nclass Top extends Module {\n  val definition = Definition(new AddOne(10))\n  println(s\"Width is: ${definition.width}\")\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new Top())\n</code></pre>"},{"location":"chisel_cookbooks/hierarchy/#_5","title":"\u5982\u4f55\u901a\u8fc7\u5176\u5b50\u5b9e\u4f8b\u53c2\u6570\u5316\u6a21\u5757\uff1f","text":"<p>\u5728\u5f15\u5165\u8fd9\u4e2a\u5305\u4e4b\u524d\uff0c\u7236\u6a21\u5757\u5728\u5b9e\u4f8b\u5316\u5b50\u6a21\u5757\u65f6\u5fc5\u987b\u4f20\u9012\u6240\u6709\u5fc5\u8981\u7684\u53c2\u6570\u3002 \u8fd9\u5e26\u6765\u4e86\u4e00\u4e2a\u4e0d\u5e78\u7684\u540e\u679c\uff0c\u5373\u7236\u6a21\u5757\u7684\u53c2\u6570\u603b\u662f\u5fc5\u987b\u5305\u542b\u5b50\u6a21\u5757\u7684 \u53c2\u6570\uff0c\u8fd9\u662f\u4e00\u79cd\u4e0d\u5fc5\u8981\u7684\u8026\u5408\uff0c\u5bfc\u81f4\u4e86\u4e00\u4e9b\u53cd\u6a21\u5f0f\u3002</p> <p>\u73b0\u5728\uff0c\u7236\u6a21\u5757\u53ef\u4ee5\u5c06\u5b50\u6a21\u5757\u7684<code>Definition</code>\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u76f4\u63a5\u5b9e\u4f8b\u5316\u5b83\u3002 \u6b64\u5916\uff0c\u5b83\u53ef\u4ee5\u5206\u6790\u7528\u4e8e\u5b9a\u4e49\u4e2d\u7684\u53c2\u6570\u6765\u53c2\u6570\u5316\u81ea\u8eab\u3002 \u4ece\u67d0\u79cd\u610f\u4e49\u4e0a\u8bf4\uff0c\u73b0\u5728\u5b50\u6a21\u5757\u5b9e\u9645\u4e0a\u53ef\u4ee5\u53c2\u6570\u5316\u7236\u6a21\u5757\u3002</p> <p>\u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e86<code>AddOne</code>\u7684\u5b9a\u4e49\uff0c\u5e76\u5c06\u8be5\u5b9a\u4e49\u4f20\u9012\u7ed9<code>AddTwo</code>\u3002 <code>AddTwo</code>\u7aef\u53e3\u7684\u5bbd\u5ea6\u73b0\u5728\u4ece<code>AddOne</code>\u5b9e\u4f8b\u7684\u53c2\u6570\u5316\u4e2d\u6d3e\u751f\u3002</p> <p><pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:reset\nimport chisel3._\nimport chisel3.experimental.hierarchy.{Definition, Instance, instantiable, public}\n\n@instantiable\nclass AddOne(val width: Int) extends Module {\n  @public val width = width\n  @public val in  = IO(Input(UInt(width.W)))\n  @public val out = IO(Output(UInt(width.W)))\n  out := in + 1.U\n}\n\nclass AddTwo(addOneDef: Definition[AddOne]) extends Module {\n  val i0 = Instance(addOneDef)\n  val i1 = Instance(addOneDef)\n  val in  = IO(Input(UInt(addOneDef.width.W)))\n  val out = IO(Output(UInt(addOneDef.width.W)))\n  i0.in := in\n  i1.in := i0.out\n  out   := i1.out\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new AddTwo(Definition(new AddOne(10))))\n</code></pre></p>"},{"location":"chisel_cookbooks/hierarchy/#select","title":"\u5982\u4f55\u4f7f\u7528\u65b0\u7684\u5c42\u6b21\u7ed3\u6784\u7279\u5b9a\u7684Select\u51fd\u6570\uff1f","text":"<p>Select\u51fd\u6570\u53ef\u4ee5\u5728\u6a21\u5757\u88ab\u8be6\u7ec6\u8bf4\u660e\u540e\u5e94\u7528\uff0c\u53ef\u4ee5\u5728Chisel Aspect\u4e2d\u6216\u5728\u7236\u6a21\u5757\u4e2d\u5e94\u7528\u4e8e\u5b50\u6a21\u5757\u3002</p> <p>\u6709\u4e03\u4e2a\u5c42\u6b21\u7ed3\u6784\u7279\u5b9a\u7684\u51fd\u6570\uff0c\u9664\u4e86<code>ios</code>\u4ee5\u5916\uff0c\u5b83\u4eec\u8981\u4e48\u8fd4\u56de<code>Instance</code>\uff0c\u8981\u4e48\u8fd4\u56de<code>Definition</code>\uff1a  - <code>instancesIn(parent)</code>\uff1a\u8fd4\u56de\u76f4\u63a5\u5728<code>parent</code>\u4e2d\u672c\u5730\u5b9e\u4f8b\u5316\u7684\u6240\u6709\u5b9e\u4f8b  - <code>instancesOf[type](parent)</code>\uff1a\u8fd4\u56de\u76f4\u63a5\u5728<code>parent</code>\u4e2d\u672c\u5730\u5b9e\u4f8b\u5316\u7684\u6240\u6709\u63d0\u4f9b\u7684<code>type</code>\u7684\u5b9e\u4f8b  - <code>allInstancesOf[type](root)</code>\uff1a\u8fd4\u56de\u4ece<code>root</code>\u5f00\u59cb\uff0c\u76f4\u63a5\u548c\u95f4\u63a5\u5730\u5b9e\u4f8b\u5316\u7684\uff0c\u672c\u5730\u548c\u6df1\u5c42\u7684\u6240\u6709\u63d0\u4f9b\u7684<code>type</code>\u7684\u5b9e\u4f8b  - <code>definitionsIn</code>\uff1a\u8fd4\u56de\u76f4\u63a5\u5728<code>parent</code>\u4e2d\u672c\u5730\u5b9e\u4f8b\u5316\u7684\u6240\u6709\u5b9e\u4f8b\u7684\u5b9a\u4e49  - <code>definitionsOf[type]</code>\uff1a\u8fd4\u56de\u76f4\u63a5\u5728<code>parent</code>\u4e2d\u672c\u5730\u5b9e\u4f8b\u5316\u7684\u6240\u6709\u63d0\u4f9b\u7684<code>type</code>\u7684\u5b9e\u4f8b\u7684\u5b9a\u4e49  - <code>allDefinitionsOf[type]</code>\uff1a\u8fd4\u56de\u4ece<code>root</code>\u5f00\u59cb\uff0c\u76f4\u63a5\u548c\u95f4\u63a5\u5730\u5b9e\u4f8b\u5316\u7684\uff0c\u672c\u5730\u548c\u6df1\u5c42\u7684\u6240\u6709\u63d0\u4f9b\u7684<code>type</code>\u7684\u5b9e\u4f8b\u7684\u5b9a\u4e49  - <code>ios</code>\uff1a\u8fd4\u56de\u63d0\u4f9b\u7684\u5b9a\u4e49\u6216\u5b9e\u4f8b\u7684\u6240\u6709I/O\u3002</p> <p>\u4e3a\u4e86\u6f14\u793a\u8fd9\u4e00\u70b9\uff0c\u8003\u8651\u4ee5\u4e0b\u60c5\u51b5\u3002\u6211\u4eec\u6a21\u62df\u4e86\u4e00\u4e2a\u793a\u4f8b\uff0c\u5176\u4e2d\u6211\u4eec\u4f7f\u7528<code>Select.allInstancesOf</code>\u548c<code>Select.allDefinitionsOf</code>\u6765\u6ce8\u89e3<code>EmptyModule</code>\u7684\u5b9e\u4f8b\u548c\u5b9a\u4e49\u3002 \u5f53\u6ce8\u89e3\u903b\u8f91\u5728\u8be6\u7ec6\u8bf4\u660e\u540e\u6267\u884c\u65f6\uff0c\u6211\u4eec\u6253\u5370\u7ed3\u679c<code>Target</code>\u3002 \u5982\u6240\u793a\uff0c\u5c3d\u7ba1<code>EmptyModule</code>\u5b9e\u9645\u4e0a\u53ea\u88ab\u8be6\u7ec6\u8bf4\u660e\u4e86\u4e00\u6b21\uff0c\u4f46\u6839\u636e\u5982\u4f55\u9009\u62e9\u5b9e\u4f8b\u6216\u5b9a\u4e49\uff0c\u6211\u4eec\u4ecd\u7136\u63d0\u4f9b\u4e0d\u540c\u7684\u76ee\u6807\u3002</p> <p><pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:reset\nimport chisel3._\nimport chisel3.experimental.hierarchy.{Definition, Instance, Hierarchy, instantiable, public}\n\n@instantiable\nclass EmptyModule extends Module {\n  println(\"Elaborating EmptyModule!\")\n}\n\n@instantiable\nclass TwoEmptyModules extends Module {\n  val definition = Definition(new EmptyModule)\n  val i0         = Instance(definition)\n  val i1         = Instance(definition)\n}\n\nclass Top extends Module {\n  val definition = Definition(new TwoEmptyModules)\n  val instance   = Instance(definition)\n  aop.Select.allInstancesOf[EmptyModule](instance).foreach { i =&gt;\n    experimental.annotate(i) {\n      println(\"instance: \" + i.toTarget)\n      Nil\n    }\n  }\n  aop.Select.allDefinitionsOf[EmptyModule](instance).foreach { d =&gt;\n    experimental.annotate(d) {\n      println(\"definition: \" + d.toTarget)\n      Nil\n    }\n  }\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:passthrough\nprintln(\"```\")\nval x = circt.stage.ChiselStage.emitCHIRRTL(new Top)\nprintln(\"```\")\n</code></pre></p> <p>\u60a8\u8fd8\u53ef\u4ee5\u5728<code>Definition</code>\u6216<code>Instance</code>\u4e0a\u4f7f\u7528<code>Select.ios</code>\u6765\u9002\u5f53\u5730\u6ce8\u89e3I/O\uff1a</p> <p><pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\n@instantiable\nclass InOutModule extends Module {\n  @public val in = IO(Input(Bool()))\n  @public val out = IO(Output(Bool()))\n  out := in\n}\n\n@instantiable\nclass TwoInOutModules extends Module {\n  val in = IO(Input(Bool()))\n  val out = IO(Output(Bool()))\n  val definition = Definition(new InOutModule)\n  val i0         = Instance(definition)\n  val i1         = Instance(definition)\n  i0.in := in\n  i1.in := i0.out\n  out := i1.out\n}\n\nclass InOutTop extends Module {\n  val definition = Definition(new TwoInOutModules)\n  val instance   = Instance(definition)\n  aop.Select.allInstancesOf[InOutModule](instance).foreach { i =&gt;\n    aop.Select.ios(i).foreach { io =&gt;\n      experimental.annotate(io) {\n        println(\"instance io: \" + io.toTarget)\n        Nil\n      }\n    }\n  }\n  aop.Select.allDefinitionsOf[InOutModule](instance).foreach { d =&gt;\n    aop.Select.ios(d).foreach { io =&gt;\n      experimental.annotate(io) {\n        println(\"definition io: \" + io.toTarget)\n        Nil\n      }\n    }\n  }\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:passthrough\nprintln(\"```\")\nval y = circt.stage.ChiselStage.emitCHIRRTL(new InOutTop)\nprintln(\"```\")\n</code></pre></p>"},{"location":"chisel_cookbooks/naming/","title":"\u547d\u540d(naming)","text":"<pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\nimport chisel3._\nimport chisel3.docs.emitSystemVerilog\n</code></pre>"},{"location":"chisel_cookbooks/naming/#_1","title":"\u547d\u540d\u624b\u518c","text":"<ul> <li>\u547d\u540d\u624b\u518c<ul> <li>\u6211\u4ecd\u7136\u6709_T\u4fe1\u53f7\uff0c\u8fd9\u53ef\u4ee5\u4fee\u590d\u5417\uff1f</li> <li>\u6211\u6709\u8bb8\u591a\u5177\u6709\u76f8\u540c\u540d\u79f0\u7684\u7ebf\u8def\uff0c\u5982x\u3001x_1\u548cx_2\u3002\u5982\u4f55\u4f7f\u5b83\u4eec\u66f4\u5bb9\u6613\u7406\u89e3\uff1f</li> <li>\u5982\u4f55\u4e3awhen\u5b50\u53e5\u751f\u6210\u7684\u4ee3\u7801\u83b7\u5f97\u66f4\u597d\u7684\u540d\u79f0\uff1f</li> <li>\u6211\u4ecd\u7136\u770b\u5230_GEN\u4fe1\u53f7\uff0c\u8fd9\u53ef\u4ee5\u4fee\u590d\u5417\uff1f</li> <li>\u5982\u4f55\u4f7f\u6211\u7684\u6a21\u5757\u62e5\u6709\u66f4\u7a33\u5b9a\u7684\u540d\u79f0\uff0c\u800c\u4e0d\u662f'Module_1'\u548c'Module_42'\uff1f</li> <li>\u5982\u4f55\u4e3a\u6211\u7684\u6570\u636e\u7c7b\u578b\u7f16\u5199\u81ea\u5df1\u7684typeName\uff1f</li> <li>\u6211\u4e0d\u60f3\u4e00\u904d\u53c8\u4e00\u904d\u5730\u91cd\u5199typeName\uff01\u6709\u6ca1\u6709\u751f\u6210typeName\u7684\u7b80\u5355\u65b9\u6cd5\uff1f</li> <li>\u6211\u53ef\u4ee5\u5728FIRRTL\u4e2d\u547d\u540d\u6211\u7684bundle\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u751f\u6210\u6781\u957f\u7684bundle\u7c7b\u578b\u5417\uff1f</li> <li>\u4e3a\u4ec0\u4e48\u6211\u5728FIRRTL\u4e2d\u603b\u662f\u770b\u5230_stripped\u540e\u7f00\uff1f\u6211\u6ca1\u6709\u5728aliasName\u4e2d\u6307\u5b9a\u8fd9\u4e2a\u3002</li> <li>\u6211\u60f3\u6dfb\u52a0\u4e00\u4e9b\u786c\u4ef6\u6216\u65ad\u8a00\uff0c\u4f46\u6bcf\u6b21\u6211\u8fd9\u6837\u505a\u65f6\uff0c\u6240\u6709\u7684\u4fe1\u53f7\u540d\u79f0\u90fd\u4f1a\u53d8\u5316\uff01</li> <li>\u6211\u60f3\u5f3a\u5236\u4e00\u4e2a\u4fe1\u53f7\uff08\u6216\u5b9e\u4f8b\uff09\u540d\u79f0\u4e3a\u67d0\u4e2a\u7279\u5b9a\u503c\uff0c\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\uff1f</li> <li>\u5982\u4f55\u5728\u4ee3\u7801\u7684\u67d0\u4e9b\u90e8\u5206\u4e2d\u7701\u7565\u524d\u7f00\uff1f</li> <li>\u6211\u4ecd\u7136\u6ca1\u6709\u5f97\u5230\u6211\u60f3\u8981\u7684\u540d\u79f0\u3002\u4f8b\u5982\uff0c\u5185\u8054\u4e00\u4e2a\u5b9e\u4f8b\u4f1a\u6539\u53d8\u6211\u7684\u540d\u79f0\uff01</li> </ul> </li> </ul>"},{"location":"chisel_cookbooks/naming/#_t","title":"\u6211\u4ecd\u7136\u6709_T\u4fe1\u53f7\uff0c\u8fd9\u53ef\u4ee5\u4fee\u590d\u5417\uff1f","text":"<p>\u8bf7\u53c2\u89c1\u4e0b\u4e00\u4e2a\u56de\u7b54\uff01</p>"},{"location":"chisel_cookbooks/naming/#xx_1x_2","title":"\u6211\u6709\u8bb8\u591a\u5177\u6709\u76f8\u540c\u540d\u79f0\u7684\u7ebf\u8def\uff0c\u5982<code>x</code>\u3001<code>x_1</code>\u548c<code>x_2</code>\u3002\u5982\u4f55\u4f7f\u5b83\u4eec\u66f4\u5bb9\u6613\u7406\u89e3\uff1f","text":"<p>\u5e26\u6709<code>_T</code>\u540d\u79f0\u6216Chisel\u5fc5\u987b\u7edf\u4e00\u547d\u540d\u7684\u4fe1\u53f7 \u901a\u5e38\u662f\u5728\u5faa\u73af\u3001\u51fd\u6570\u8c03\u7528\u6216<code>when</code>\u8c13\u8bcd\u4e2d\u751f\u6210\u7684\u4e2d\u95f4\u503c\u3002 \u5b83\u4eec\u4e5f\u53ef\u80fd\u88ab<code>assert</code>\u6216<code>prints</code>\u7b49\u9a8c\u8bc1\u8bed\u53e5\u4f7f\u7528\u3002 \u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u7f16\u8bd1\u5668\u63d2\u4ef6\u901a\u5e38\u627e\u4e0d\u5230\u597d\u7684\u524d\u7f00\u6765\u4e3a\u751f\u6210\u7684 \u4e2d\u95f4\u4fe1\u53f7\u547d\u540d\uff0c\u56e0\u6b64\u65e0\u6cd5\u4e3a\u5b83\u4eec\u547d\u540d\u6216\u5fc5\u987b\u4e3a\u5b83\u4eec\u521b\u5efa\u552f\u4e00\u7684\u540d\u79f0\u3002</p> <p>\u6211\u4eec\u5efa\u8bae\u60a8\u624b\u52a8\u63d2\u5165\u5bf9<code>prefix</code>\u7684\u8c03\u7528\u4ee5\u6f84\u6e05\u8fd9\u4e9b\u60c5\u51b5\uff1a</p> <p><pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3.experimental.prefix\nclass ExamplePrefix extends Module {\n\n  Seq.tabulate(2) { i =&gt;\n    Seq.tabulate(2) { j =&gt;\n      prefix(s\"loop_${i}_${j}\"){\n        val x = WireInit((i*0x10+j).U(8.W))\n        dontTouch(x)\n      }\n    }\n  }\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nemitSystemVerilog(new ExamplePrefix)\n</code></pre></p>"},{"location":"chisel_cookbooks/naming/#when","title":"\u5982\u4f55\u4e3a<code>when</code>\u5b50\u53e5\u751f\u6210\u7684\u4ee3\u7801\u83b7\u5f97\u66f4\u597d\u7684\u540d\u79f0\uff1f","text":"<p><code>prefix</code> API\u53ef\u4ee5\u5e2e\u52a9\u5904\u7406<code>when</code>\u5b50\u53e5\u5185\u7684\u4ee3\u7801\uff1a</p> <p><pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass ExampleWhenPrefix extends Module {\n\n  val in = IO(Input(UInt(4.W)))\n  val out = IO(Output(UInt(4.W)))\n\n  out := DontCare\n\n  Seq.tabulate(2) { i =&gt;\n    val j = i + 1\n    prefix(s\"clause_${j}\") {\n      when (in === j.U) {\n        val foo = Reg(UInt(4.W))\n        foo := in + j.U(4.W)\n        out := foo\n      }\n    }\n  }\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nemitSystemVerilog(new ExampleWhenPrefix)\n</code></pre></p>"},{"location":"chisel_cookbooks/naming/#_gen","title":"\u6211\u4ecd\u7136\u770b\u5230_GEN\u4fe1\u53f7\uff0c\u8fd9\u53ef\u4ee5\u4fee\u590d\u5417\uff1f","text":"<p><code>_GEN</code>\u4fe1\u53f7\u901a\u5e38\u7531FIRRTL\u7f16\u8bd1\u5668\u751f\u6210\uff0c\u800c\u4e0d\u662fChisel\u5e93\u3002\u6211\u4eec\u6b63\u5728\u52aa\u529b \u7528\u66f4\u591a\u4e0a\u4e0b\u6587\u76f8\u5173\u7684\u540d\u79f0\u91cd\u547d\u540d\u8fd9\u4e9b\u4fe1\u53f7\uff0c\u4f46\u8fd9\u662f\u4e00\u9879\u6b63\u5728\u8fdb\u884c\u7684\u5de5\u4f5c\u3002\u611f\u8c22\u60a8\u7684\u5173\u6ce8\uff01</p>"},{"location":"chisel_cookbooks/naming/#module_1module_42","title":"\u5982\u4f55\u4f7f\u6211\u7684\u6a21\u5757\u62e5\u6709\u66f4\u7a33\u5b9a\u7684\u540d\u79f0\uff0c\u800c\u4e0d\u662f'Module_1'\u548c'Module_42'\uff1f","text":"<p>\u8fd9\u662f\u6a21\u5757\u4e0d\u7a33\u5b9a\u6027\u95ee\u9898\u7684\u4e00\u4e2a\u4f8b\u5b50\uff0c\u8fd9\u662f\u7531\u4e8e\u51e0\u4e2a\u6a21\u5757\u5171\u4eab\u5b8c\u5168\u76f8\u540c\u7684\u540d\u79f0\u9020\u6210\u7684\u3002\u8981\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u60a8\u5fc5\u987b\u4e3a\u60a8\u7684<code>Module</code>\u6dfb\u52a0\u66f4\u591a\u7684\u7279\u5f02\u6027\uff0c\u4ee5\u907f\u514d\u8fd9\u4e9b\u540d\u79f0\u51b2\u7a81\u3002</p> <p>\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5229\u7528<code>desiredName</code>\u548c<code>typeName</code> API\u6765\u5b9e\u73b0\u3002 <code>desiredName</code>\u7528\u4e8e\u6307\u793a<code>Modules</code>\u7684\u540d\u79f0\uff08\u4f8b\u5982\uff0c\u53d7\u4f20\u5165\u53c2\u6570\u7684\u5f71\u54cd\uff09\uff0c\u800c<code>typeName</code>\u5bf9\u4e8e\u7531<code>Data</code>\u7684\u5b50\u7c7b\u8fdb\u884c\u7c7b\u578b\u53c2\u6570\u5316\u7684\u6a21\u5757\u5f88\u6709\u7528\u3002\u91cd\u5199<code>desiredName</code>\u53ef\u4ee5\u51cf\u5c11\u751a\u81f3\u6d88\u9664\u540d\u79f0\u51b2\u7a81\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u60a8\u7684\u6a21\u5757\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass MyModule[T &lt;: Data](gen: T) extends Module {\n  // ...\n}\n</code></pre> <p>We can override <code>desiredName</code> of the module to include the type name of the <code>gen</code> parameter like so:</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible:reset\nimport chisel3._\nimport chisel3.util.Queue\nimport chisel3.docs.emitSystemVerilog\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nclass MyModule[T &lt;: Data](gen: T) extends Module {\n  override def desiredName = s\"MyModule_${gen.typeName}\"\n}\n</code></pre> <p>\u60a8\u7684<code>MyModule</code>\u7684\u4efb\u4f55\u5b9e\u4f8b\u73b0\u5728\u90fd\u5c06\u5177\u6709\u5305\u542b\u7c7b\u578b\u53c2\u6570\u7684Verilog\u6a21\u5757\u540d\u79f0\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:compile-only\nval foo = Module(new MyModule(UInt(4.W))) // MyModule_UInt4\nval bar = Module(new MyModule(Vec(3, UInt(4.W)))) // MyModule_Vec3_UInt4\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u6240\u6709\u57fa\u672c\u7684Chisel\u5de5\u5177\u6a21\u5757\uff0c\u5982<code>Queue</code>\uff0c\u90fd\u5df2\u7ecf\u50cf\u8fd9\u6837\u5b9e\u73b0\u4e86<code>desiredName</code>\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:compile-only\nval fooQueue = Module(new Queue(UInt(8.W), 4)) // Verilog\u6a21\u5757\u5c06\u88ab\u547d\u540d\u4e3a'Queue4_UInt8'\nval barQueue = Module(new Queue(SInt(12.W), 3)) // ...\u4ee5\u53ca'Queue3_SInt12'\nval bazQueue = Module(new Queue(Bool(), 16)) // ...\u4ee5\u53ca'Queue16_Bool'\n</code></pre>"},{"location":"chisel_cookbooks/naming/#typename","title":"\u5982\u4f55\u4e3a\u6211\u7684\u6570\u636e\u7c7b\u578b\u7f16\u5199\u81ea\u5df1\u7684<code>typeName</code>\uff1f","text":"<p>\u5982\u679c\u60a8\u4f7f\u7528\u81ea\u5df1\u7684\u7528\u6237\u5b9a\u4e49\u7684<code>Bundle</code>\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199\u5b83\u6765\u589e\u52a0\u5176\u81ea\u8eab<code>typeName</code>\u7684\u7279\u5f02\u6027\u3002\u6240\u6709<code>Data</code>\u7c7b\u578b\u90fd\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u9ed8\u8ba4<code>typeName</code>\u5b9e\u73b0\uff08\u4ec5\u4ec5\u662f\u5176\u7c7b\u540d\uff09\uff0c\u4f46\u60a8\u53ef\u4ee5\u81ea\u5df1\u91cd\u5199\u8fd9\u4e2a\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass MyBundle[T &lt;: Data](gen: T, intParam: Int) extends Bundle {\n  // \u4e3a\u6b64Bundle\u751f\u6210\u4e00\u4e2a\u7a33\u5b9a\u7684typeName\u3002\u8fd9\u4e2a\u5b9e\u73b0\u4e2d\u5b58\u5728\u4e24\u4e2a'\u8bcd'\uff1a\n  // bundle\u7684\u540d\u79f0\u52a0\u4e0a\u5176\u6574\u6570\u53c2\u6570\uff08\u7c7b\u4f3c\u4e8e'MyBundle9'\uff09\n  // \u4ee5\u53ca\u751f\u6210\u5668\u7684typeName\uff0c\u5b83\u672c\u8eab\u53ef\u4ee5\u7531'\u8bcd'\u7ec4\u6210\n  // \uff08\u7c7b\u4f3c\u4e8e'Vec3_UInt4'\uff09\n  override def typeName = s\"MyBundle${intParam}_${gen.typeName}\"\n\n  // ...\n}\n</code></pre> <p>\u73b0\u5728\uff0c\u5982\u679c\u60a8\u5728\u8bf8\u5982<code>Queue</code>\u8fd9\u6837\u7684\u6a21\u5757\u4e2d\u4f7f\u7528\u60a8\u7684<code>MyBundle</code>\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:compile-only\nval fooQueue = Module(new Queue(new MyBundle(UInt(4.W), 3), 16)) // Queue16_MyBundle3_UInt4\n</code></pre> <p>\u5bf9\u4e8e<code>typeName</code>\u548c\u968f\u540e\u7684<code>desiredName</code>\u7684\u5efa\u8bae\u6a21\u5f0f\u662f\u5c06\u5355\u4e2a\u6574\u6570\u7c7b\u53c2\u6570\u4e0e\u540d\u79f0\u672c\u8eab\u6298\u53e0\uff08\u4f8b\u5982\uff0c<code>Queue4</code>\uff0c<code>UInt3</code>\uff0c<code>MyBundle9</code>\uff09\u5f62\u6210\"\u8bcd\"\uff0c\u5e76\u7528\u4e0b\u5212\u7ebf\u5206\u9694\u8fd9\u4e9b\"\u8bcd\"\uff08<code>Queue4_UInt3</code>\uff0c<code>FooBundle_BarType4</code>\uff09\u3002</p> <p>\u76ee\u524d\uff0c\u5177\u6709\u591a\u4e2a\u6574\u6570\u53c2\u6570\u7684<code>Bundles</code>\u5c1a\u672a\u88ab\u4efb\u4f55\u5185\u7f6e\u6a21\u5757\u89e3\u51b3\uff0c\u56e0\u6b64\u4e3a\u8fd9\u4e9b<code>Bundles</code>\u5b9e\u73b0\u4e00\u4e2a\u63cf\u8ff0\u6027\u548c\u8db3\u591f\u53ef\u533a\u5206\u7684<code>typeName</code>\u7559\u7ed9\u8bfb\u8005\u4f5c\u4e3a\u7ec3\u4e60\u3002\u7136\u800c\uff0c\u6574\u6570\u4e0d\u5e94\u8be5\u5728<code>typeName</code>\u7684\u6700\u540e\u51fa\u73b0\u4e0b\u5212\u7ebf\uff08\u4f8b\u5982\uff0c<code>MyBundle_1</code>\uff09\uff0c\u56e0\u4e3a\u8fd9\u662f\u7528\u4e8e\u91cd\u590d\u7684_\u76f8\u540c_\u8bed\u6cd5\uff0c\u56e0\u6b64\u4f1a\u5f15\u8d77\u6df7\u6dc6\u3002\u5fc5\u987b\u533a\u5206\u6240\u6709\u540d\u4e3a<code>Queue32_MyBundle_4_1</code>\u3001<code>Queue32_MyBundle_4_2</code>\u3001<code>Queue32_MyBundle_4_3</code>\u7b49\u7684\u6a21\u5757\u786e\u5b9e\u662f\u4e0d\u7406\u60f3\u7684\uff01</p>"},{"location":"chisel_cookbooks/naming/#typenametypename","title":"\u6211\u4e0d\u60f3\u4e00\u904d\u53c8\u4e00\u904d\u5730\u91cd\u5199<code>typeName</code>\uff01\u6709\u6ca1\u6709\u751f\u6210<code>typeName</code>\u7684\u7b80\u5355\u65b9\u6cd5\uff1f","text":"<p>\u662f\u7684\uff0c\u901a\u8fc7\u5b9e\u9a8c\u6027\u7684<code>HasAutoTypename</code>\u7279\u8d28\u3002\u8fd9\u4e2a\u7279\u8d28\u53ef\u4ee5\u6df7\u5165\u5230\u60a8\u7684<code>Bundle</code>\u4e2d\uff0c\u6839\u636e\u8be5<code>Bundle</code>\u7684\u6784\u9020\u51fd\u6570\u53c2\u6570\u81ea\u52a8\u751f\u6210\u4e00\u4e2a\u7c7b\u4f3c\u5143\u7ec4\u7684<code>typeName</code>\u3002\u8ba9\u6211\u4eec\u770b\u770b\u524d\u9762\u7684\u4f8b\u5b50\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible:reset\nimport chisel3._\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass MyBundle[T &lt;: Data](gen: T, intParam: Int) extends Bundle {\n  override def typeName = s\"MyBundle_${gen.typeName}_${intParam}\"\n  // ...\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nnew MyBundle(UInt(8.W), 3).typeName\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible:reset\nimport chisel3._\nimport chisel3.docs.emitSystemVerilog\n</code></pre> <p>\u81ea\u52a8\u751f\u6210\u7684<code>typeName</code>\u91c7\u7528<code>{Bundle\u540d\u79f0}_{\u53c2\u6570\u503c1}_{\u53c2\u6570\u503c2}_{...}</code>\u7684\u5f62\u5f0f\uff0c\u56e0\u6b64\u6211\u4eec\u7684<code>MyBundle</code>\u53ef\u4ee5\u7b49\u6548\u5730\u8868\u793a\u4e3a\uff1a <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3.experimental.HasAutoTypename\nclass MyBundle[T &lt;: Data](gen: T, intParam: Int) extends Bundle with HasAutoTypename {\n  // ...\n  // \u6ce8\u610f\uff1a\u8fd9\u91cc\u6ca1\u6709`override def typeName`\u8bed\u53e5\n}\n</code></pre></p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nnew MyBundle(UInt(8.W), 3).typeName\n</code></pre>"},{"location":"chisel_cookbooks/naming/#firrtlbundlebundle","title":"\u6211\u53ef\u4ee5\u5728FIRRTL\u4e2d\u547d\u540d\u6211\u7684bundle\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u751f\u6210\u6781\u957f\u7684bundle\u7c7b\u578b\u5417\uff1f","text":"<p>\u662f\u7684\uff0c\u4f7f\u7528<code>HasTypeAlias</code>\u7279\u8d28\u3002FIRRTL\u6709\u4e00\u4e2a\u7ed3\u6784\uff0c\u53ef\u4ee5\u7528\u7c7b\u578b\u522b\u540d\u6765\u522b\u540d\u4e00\u4e2abundle\u7c7b\u578b\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>circuit Top :\n  type MyBundle = { foo : UInt&lt;8&gt;, bar : UInt&lt;1&gt;}\n\n  module Top :\n    //...\n</code></pre> <p>\u8fd9\u4e9b\u53ef\u4ee5\u901a\u8fc7\u5728\u7528\u6237\u5b9a\u4e49\u7684<code>Record</code>\u4e2d\u6df7\u5165<code>HasTypeAlias</code>\u5e76\u5b9e\u73b0\u4e00\u4e2a\u540d\u4e3a<code>aliasName</code>\u7684\u5b57\u6bb5\uff0c\u5176\u4e2d\u5305\u542b\u4e00\u4e2a<code>RecordAlias(...)</code>\u5b9e\u4f8b\uff0c\u4eceChisel\u81ea\u52a8\u53d1\u51fa\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3.experimental.{HasTypeAlias, RecordAlias}\n\nclass AliasedBundle extends Bundle with HasTypeAlias {\n  override def aliasName = RecordAlias(\"MyAliasedBundle\")\n  val foo = UInt(8.W)\n  val bar = Bool()\n}\n</code></pre> <p>\u8ba9\u6211\u4eec\u770b\u770b\u5f53\u6211\u4eec\u4f7f\u7528\u8fd9\u4e2a<code>Bundle</code>\u751f\u6210FIRRTL\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1a</p> <p><pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\nimport circt.stage.ChiselStage.{emitCHIRRTL =&gt; emitFIRRTL}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nemitFIRRTL(new Module {\n  val wire = Wire(new AliasedBundle)\n})\n</code></pre></p> <p><code>HasTypeAlias</code>\u8fd8\u652f\u6301\u5d4c\u5957\u7684bundle\uff1a <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass Child extends Bundle with HasTypeAlias {\n  override def aliasName = RecordAlias(\"ChildBundle\")\n  val x = UInt(8.W)\n}\n\nclass Parent extends Bundle with HasTypeAlias {\n  override def aliasName = RecordAlias(\"ParentBundle\")\n  val child = new Child\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nemitFIRRTL(new Module {\n  val wire = Wire(new Parent)\n})\n</code></pre></p>"},{"location":"chisel_cookbooks/naming/#firrtl_strippedaliasname","title":"\u4e3a\u4ec0\u4e48\u6211\u5728FIRRTL\u4e2d\u603b\u662f\u770b\u5230_stripped\u540e\u7f00\uff1f\u6211\u6ca1\u6709\u5728<code>aliasName</code>\u4e2d\u6307\u5b9a\u8fd9\u4e2a\u3002","text":"<p>\u60a8\u6b63\u5728\u7ed3\u5408\u4f7f\u7528<code>Input(...)</code>\u6216<code>Output(...)</code>\u4e0e\u5305\u542b<code>Flipped(...)</code>\u7684\u522b\u540d<code>Record</code>\u3002\u8fd9\u4e9b\u7ffb\u8f6c\u503c\u88ab<code>Input</code>\u548c<code>Output</code>\u5265\u79bb\uff0c\u8fd9\u4ece\u6839\u672c\u4e0a\u6539\u53d8\u4e86\u7236<code>Record</code>\u7684\u7c7b\u578b\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass StrippedBundle extends Bundle with HasTypeAlias {\n  override def aliasName = RecordAlias(\"StrippedBundle\")\n  val flipped = Flipped(UInt(8.W))\n  val normal = UInt(8.W)\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nemitFIRRTL(new Module {\n  val in = IO(Input(new StrippedBundle))\n})\n</code></pre> <p>\u6ce8\u610fbundle\u7c7b\u578b\u4e0d\u5305\u542b<code>flip flipped : UInt&lt;8&gt;</code>\u5b57\u6bb5\uff0c\u522b\u540d\u83b7\u5f97\u4e86<code>\"_stripped\"</code>\u540e\u7f00\uff01\u8fd9\u4e2a<code>Bundle</code>\u7c7b\u578b\u4e0d\u518d\u4e0e\u6211\u4eec\u5728Chisel\u4e2d\u7f16\u5199\u7684\u76f8\u540c\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u5c06\u5176\u533a\u5206\u4e3a\u8fd9\u6837\u3002</p> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u9644\u52a0\u5230<code>Record</code>\u540d\u79f0\u7684\u540e\u7f00\u662f<code>\"_stripped\"</code>\u3002\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u7ed9<code>RecordAlias(alias, strippedSuffix)</code>\u7684\u9644\u52a0\u5b57\u7b26\u4e32\u53c2\u6570\u6765\u5b9a\u4e49\u8fd9\u4e2a\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass CustomStrippedBundle extends Bundle with HasTypeAlias {\n  override def aliasName = RecordAlias(\"StrippedBundle\", \"Foo\")\n  val flipped = Flipped(UInt(8.W))\n  val normal = UInt(8.W)\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nemitFIRRTL(new Module {\n  val in = IO(Input(new CustomStrippedBundle))\n})\n</code></pre>"},{"location":"chisel_cookbooks/naming/#_2","title":"\u6211\u60f3\u6dfb\u52a0\u4e00\u4e9b\u786c\u4ef6\u6216\u65ad\u8a00\uff0c\u4f46\u6bcf\u6b21\u6211\u8fd9\u6837\u505a\u65f6\uff0c\u6240\u6709\u7684\u4fe1\u53f7\u540d\u79f0\u90fd\u4f1a\u53d8\u5316\uff01","text":"<p>\u8fd9\u662f\u7ecf\u5178\u7684\"ECO\"\u95ee\u9898\uff0c\u6211\u4eec\u5728\u89e3\u91ca\u4e2d\u63d0\u4f9b\u4e86\u63cf\u8ff0\u3002\u7b80\u800c\u8a00\u4e4b\uff0c \u6211\u4eec\u5efa\u8bae\u5c06\u6240\u6709\u989d\u5916\u7684\u903b\u8f91\u5305\u88c5\u5728\u4e00\u4e2a\u524d\u7f00\u4f5c\u7528\u57df\u4e2d\uff0c\u8fd9\u53ef\u4ee5\u542f\u7528\u4e00\u4e2a\u552f\u4e00\u7684\u547d\u540d\u7a7a\u95f4\u3002\u8fd9\u5e94\u8be5\u9632\u6b62 \u540d\u79f0\u51b2\u7a81\uff0c\u8fd9\u662f\u89e6\u53d1\u6240\u6709\u90a3\u4e9b\u70e6\u4eba\u7684\u4fe1\u53f7\u540d\u79f0\u53d8\u5316\u7684\u539f\u56e0\uff01</p>"},{"location":"chisel_cookbooks/naming/#_3","title":"\u6211\u60f3\u5f3a\u5236\u4e00\u4e2a\u4fe1\u53f7\uff08\u6216\u5b9e\u4f8b\uff09\u540d\u79f0\u4e3a\u67d0\u4e2a\u7279\u5b9a\u503c\uff0c\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\uff1f","text":"<p>\u4f7f\u7528<code>.suggestName</code>\u65b9\u6cd5\uff0c\u5b83\u5728\u6240\u6709\u7ee7\u627f<code>Data</code>\u7684\u7c7b\u4e0a\u90fd\u53ef\u7528\u3002</p>"},{"location":"chisel_cookbooks/naming/#_4","title":"\u5982\u4f55\u5728\u4ee3\u7801\u7684\u67d0\u4e9b\u90e8\u5206\u4e2d\u7701\u7565\u524d\u7f00\uff1f","text":"<p>\u60a8\u53ef\u4ee5\u4f7f\u7528<code>noPrefix { ... }</code>\u6765\u4ece\u8be5\u4f5c\u7528\u57df\u4e2d\u751f\u6210\u7684\u6240\u6709\u4fe1\u53f7\u4e2d\u5265\u79bb\u524d\u7f00\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nimport chisel3.experimental.noPrefix\n\nclass ExampleNoPrefix extends Module {\n  val in = IO(Input(UInt(2.W)))\n  val out = IO(Output(UInt(5.W)))\n\n  val add = noPrefix {\n    // foo\u4e0d\u4f1a\u5f97\u5230\u524d\u7f00\n    val foo = RegNext(in + 1.U)\n    foo + in\n  }\n\n  out := add\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nemitSystemVerilog(new ExampleNoPrefix)\n</code></pre>"},{"location":"chisel_cookbooks/naming/#_5","title":"\u6211\u4ecd\u7136\u6ca1\u6709\u5f97\u5230\u6211\u60f3\u8981\u7684\u540d\u79f0\u3002\u4f8b\u5982\uff0c\u5185\u8054\u4e00\u4e2a\u5b9e\u4f8b\u4f1a\u6539\u53d8\u6211\u7684\u540d\u79f0\uff01","text":"<p>\u5728FIRRTL\u8f6c\u6362\u91cd\u547d\u540d\u4fe1\u53f7/\u5b9e\u4f8b\u7684\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528<code>forcename</code> API\uff1a</p> <p><pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nimport chisel3.util.experimental.{forceName, InlineInstance}\n\nclass WrapperExample extends Module {\n  val in = IO(Input(UInt(3.W)))\n  val out = IO(Output(UInt(3.W)))\n  val inst = Module(new Wrapper)\n  inst.in := in\n  out := inst.out\n}\nclass Wrapper extends Module with InlineInstance {\n  val in = IO(Input(UInt(3.W)))\n  val out = IO(Output(UInt(3.W)))\n  val inst = Module(new MyLeaf)\n  forceName(inst, \"inst\")\n  inst.in := in\n  out := inst.out\n}\nclass MyLeaf extends Module {\n  val in = IO(Input(UInt(3.W)))\n  val out = IO(Output(UInt(3.W)))\n  out := in\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nemitSystemVerilog(new WrapperExample)\n</code></pre></p> <p>\u8fd9\u53ef\u4ee5\u7528\u6765\u91cd\u547d\u540d\u5b9e\u4f8b\u548c\u975e\u805a\u5408\u7c7b\u578b\u7684\u4fe1\u53f7\u3002</p>"},{"location":"chisel_cookbooks/objectmodel/","title":"\u5bf9\u8c61\u6a21\u578b\uff08ObjectModel\uff09\u624b\u518c","text":"<ul> <li>\u5bf9\u8c61\u6a21\u578b\uff08ObjectModel\uff09\u624b\u518c<ul> <li>\u4eceOM\u7c7b\u8bbf\u95ee\u6570\u636e\u7684\u793a\u4f8b</li> </ul> </li> </ul>"},{"location":"chisel_cookbooks/objectmodel/#om","title":"\u4eceOM\u7c7b\u8bbf\u95ee\u6570\u636e\u7684\u793a\u4f8b","text":"<pre><code>import chisel3._\nimport chisel3.properties._\nimport chisel3.panamaom._\n\nclass IntPropTest extends RawModule {\n  val intProp = IO(Output(Property[Int]()))\n  intProp := Property(123)\n}\n\nval converter = Seq(\n  new chisel3.stage.phases.Elaborate,\n  chisel3.panamaconverter.stage.Convert\n).foldLeft(\n  firrtl.AnnotationSeq(Seq(chisel3.stage.ChiselGeneratorAnnotation(() =&gt; new IntPropTest)))\n) { case (annos, phase) =&gt; phase.transform(annos) }\n  .collectFirst {\n    case chisel3.panamaconverter.stage.PanamaCIRCTConverterAnnotation(converter) =&gt; converter\n  }\n  .get\n\nval pm = converter.passManager()\nassert(pm.populatePreprocessTransforms())\nassert(pm.populateCHIRRTLToLowFIRRTL())\nassert(pm.populateLowFIRRTLToHW())\nassert(pm.populateFinalizeIR())\nassert(pm.run())\n\nval om = converter.om()\nval evaluator = om.evaluator()\nval obj = evaluator.instantiate(\"PropertyTest_Class\", Seq(om.newBasePathEmpty)).get\n\nval value = obj.field(\"intProp\").asInstanceOf[PanamaCIRCTOMEvaluatorValuePrimitiveInteger].integer\nassert(value === 123)\n</code></pre>"},{"location":"chisel_cookbooks/serialization/","title":"\u5e8f\u5217\u5316\u624b\u518c","text":"<ul> <li>\u5e8f\u5217\u5316\u624b\u518c<ul> <li>\u4e3a\u4ec0\u4e48\u9700\u8981\u5e8f\u5217\u5316\u6a21\u5757</li> <li>\u5982\u4f55\u4f7f\u7528SerializableModuleGenerator\u5e8f\u5217\u5316\u6a21\u5757</li> </ul> </li> </ul>"},{"location":"chisel_cookbooks/serialization/#_2","title":"\u4e3a\u4ec0\u4e48\u9700\u8981\u5e8f\u5217\u5316\u6a21\u5757","text":"<p>Chisel\u63d0\u4f9b\u4e86\u975e\u5e38\u7075\u6d3b\u7684\u786c\u4ef6\u8bbe\u8ba1\u4f53\u9a8c\u3002\u4f46\u662f\uff0c\u5728\u8bbe\u8ba1\u76f8\u5bf9\u5927\u578b\u7684\u8bbe\u8ba1\u65f6\uff0c\u6709\u65f6\u4f1a\u53d8\u5f97\u8fc7\u4e8e\u7075\u6d3b\uff0c\u56e0\u4e3a\u6a21\u5757\u7684\u53c2\u6570\u53ef\u80fd\u6765\u81ea\uff1a1. \u5168\u5c40\u53d8\u91cf\uff1b2. \u5916\u90e8\u7c7b\uff1b3. \u71b5\uff08\u65f6\u95f4\u3001\u968f\u673a\uff09\u3002\u8fd9\u4f7f\u5f97\u63cf\u8ff0\"\u5982\u4f55\u590d\u73b0\u8fd9\u4e2a\u5355\u4e00\u6a21\u5757\uff1f\"\u53d8\u5f97\u975e\u5e38\u56f0\u96be\u6216\u4e0d\u53ef\u80fd\u3002\u8fd9\u7981\u6b62\u5bf9\u6a21\u5757\u751f\u6210\u5668\u8fdb\u884c\u5355\u5143\u6d4b\u8bd5\uff0c\u5e76\u5728\u8fdb\u884cECO\u7684\u540e\u5408\u6210\u9636\u6bb5\u5f15\u5165\u95ee\u9898\uff1a\u5bf9\u6a21\u5757A\u7684\u66f4\u6539\u53ef\u80fd\u5bfc\u81f4\u6a21\u5757B\u7684\u66f4\u6539\u3002 \u56e0\u6b64\uff0c\u63d0\u4f9b\u4e86<code>SerializableModuleGenerator</code>\u3001<code>SerializableModule[T &lt;: SerializableModuleParameter]</code>\u548c<code>SerializableModuleParameter</code>\u6765\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u3002 \u5bf9\u4e8e\u4efb\u4f55<code>SerializableModuleGenerator</code>\uff0cChisel\u53ef\u4ee5\u901a\u8fc7\u6dfb\u52a0\u8fd9\u4e9b\u7ea6\u675f\u6765\u81ea\u52a8\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u5b83\uff1a 1. <code>SerializableModule</code>\u4e0d\u5e94\u8be5\u662f\u5185\u90e8\u7c7b\uff0c\u56e0\u4e3a\u5916\u90e8\u7c7b\u662f\u5b83\u7684\u4e00\u4e2a\u53c2\u6570\uff1b 2. <code>SerializableModule</code>\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u53c2\u6570\uff0c\u5176\u7c7b\u578b\u4e3a<code>SerializableModuleParameter</code>\u3002 3. \u6a21\u5757\u65e2\u4e0d\u4f9d\u8d56\u4e8e\u5168\u5c40\u53d8\u91cf\uff0c\u4e5f\u4e0d\u4f7f\u7528\u4e0d\u53ef\u91cd\u73b0\u7684\u51fd\u6570\uff08\u968f\u673a\u3001\u65f6\u95f4\u7b49\uff09\uff0c\u8fd9\u5e94\u8be5\u7531\u7528\u6237\u4fdd\u8bc1\uff0c\u56e0\u4e3aScala\u65e0\u6cd5\u68c0\u6d4b\u5b83\u3002</p> <p>\u5b83\u53ef\u4ee5\u63d0\u4f9b\u8fd9\u4e9b\u597d\u5904\uff1a 1. \u7528\u6237\u53ef\u4ee5\u4f7f\u7528<code>SerializableModuleGenerator(module: class[SerializableModule], parameter: SerializableModuleParameter)</code>\u6765\u81ea\u52a8\u5e8f\u5217\u5316\u6a21\u5757\u53ca\u5176\u53c2\u6570\u3002 2. \u7528\u6237\u53ef\u4ee5\u5728\u5176\u4ed6\u53ef\u5e8f\u5217\u5316\u53c2\u6570\u4e2d\u5d4c\u5957<code>SerializableModuleGenerator</code>\u4ee5\u8868\u793a\u76f8\u5bf9\u8f83\u5927\u7684\u53c2\u6570\u3002 3. \u7528\u6237\u53ef\u4ee5\u5c06\u4efb\u4f55<code>SerializableModuleGenerator</code>\u8be6\u7ec6\u8bf4\u660e\u4e3a\u5355\u4e2a\u6a21\u5757\u8fdb\u884c\u6d4b\u8bd5\u3002</p>"},{"location":"chisel_cookbooks/serialization/#serializablemodulegenerator","title":"\u5982\u4f55\u4f7f\u7528<code>SerializableModuleGenerator</code>\u5e8f\u5217\u5316\u6a21\u5757","text":"<p>\u8fd9\u975e\u5e38\u7b80\u5355\uff0c\u5982\u4e0b\u9762\u7684\u4f8b\u5b50\u6240\u793a\uff0c<code>GCD</code>\u6a21\u5757\u4ee5<code>width</code>\u4f5c\u4e3a\u5176\u53c2\u6570\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3._\nimport chisel3.experimental.{SerializableModule, SerializableModuleGenerator, SerializableModuleParameter}\nimport upickle.default._\n\n// \u4e3aGCDSerializableModuleParameter\u63d0\u4f9b\u5e8f\u5217\u5316\u51fd\u6570\nobject GCDSerializableModuleParameter {\n  implicit def rwP: ReadWriter[GCDSerializableModuleParameter] = macroRW\n}\n\n// \u53c2\u6570\ncase class GCDSerializableModuleParameter(width: Int) extends SerializableModuleParameter\n\n// \u6a21\u5757\nclass GCDSerializableModule(val parameter: GCDSerializableModuleParameter)\n    extends Module\n    with SerializableModule[GCDSerializableModuleParameter] {\n  val io = IO(new Bundle {\n    val a = Input(UInt(parameter.width.W))\n    val b = Input(UInt(parameter.width.W))\n    val e = Input(Bool())\n    val z = Output(UInt(parameter.width.W))\n  })\n  val x = Reg(UInt(parameter.width.W))\n  val y = Reg(UInt(parameter.width.W))\n  val z = Reg(UInt(parameter.width.W))\n  val e = Reg(Bool())\n  when(e) {\n    x := io.a\n    y := io.b\n    z := 0.U\n  }\n  when(x =/= y) {\n    when(x &gt; y) {\n      x := x - y\n    }.otherwise {\n      y := y - x\n    }\n  }.otherwise {\n    z := x\n  }\n  io.z := z\n}\n</code></pre> <p>\u4f7f\u7528<code>upickle</code>\u4e2d\u7684<code>write</code>\u51fd\u6570\uff0c\u5b83\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2ajson\u5b57\u7b26\u4e32\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nval j = upickle.default.write(\n  SerializableModuleGenerator(\n    classOf[GCDSerializableModule],\n    GCDSerializableModuleParameter(32)\n  )\n)\n</code></pre> <p>\u7136\u540e\uff0c\u60a8\u53ef\u4ee5\u4ecejson\u5b57\u7b26\u4e32\u8bfb\u53d6\u5e76\u8be6\u7ec6\u8bf4\u660e\u6a21\u5757\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:compile-only\ncirct.stage.ChiselStage.emitSystemVerilog(\n  upickle.default.read[SerializableModuleGenerator[GCDSerializableModule, GCDSerializableModuleParameter]](\n    ujson.read(j)\n  ).module()\n)\n</code></pre>"},{"location":"chisel_cookbooks/testing/","title":"\u6d4b\u8bd5\u624b\u518c","text":"<ul> <li>\u6d4b\u8bd5\u624b\u518c<ul> <li>\u5982\u4f55\u66f4\u6539\u9ed8\u8ba4\u6d4b\u8bd5\u76ee\u5f55\uff1f</li> <li>\u5982\u4f55\u4e3a\u4eff\u771f\u542f\u7528\u6ce2\u5f62\uff1f</li> <li>\u5982\u4f55\u67e5\u770bChiselSim Scalatest\u6d4b\u8bd5\u652f\u6301\u54ea\u4e9b\u9009\u9879\uff1f</li> </ul> </li> </ul>"},{"location":"chisel_cookbooks/testing/#_2","title":"\u5982\u4f55\u66f4\u6539\u9ed8\u8ba4\u6d4b\u8bd5\u76ee\u5f55\uff1f","text":"<p>\u91cd\u5199<code>buildDir</code>\u65b9\u6cd5\u3002</p> <p>\u4e0b\u9762\u7684\u4f8b\u5b50\u5c06\u6d4b\u8bd5\u76ee\u5f55\u66f4\u6539\u4e3a<code>test/</code>\uff1a</p> <pre><code>// mdoc:reset:silent\nimport chisel3._\nimport chisel3.simulator.scalatest.ChiselSim\nimport java.nio.file.Paths\nimport org.scalatest.funspec.AnyFunSpec\n\nclass FooSpec extends FunSpec with ChiselSim {\n\n  override def buildDir: Path = Paths.get(\"test\")\n\n}\n</code></pre>"},{"location":"chisel_cookbooks/testing/#_3","title":"\u5982\u4f55\u4e3a\u4eff\u771f\u542f\u7528\u6ce2\u5f62\uff1f","text":"<p>\u5982\u679c\u4f7f\u7528Scalatest\u548cChiselSim\uff0c\u5411Scalatest\u4f20\u9012<code>-DemitVcd=1</code>\u53c2\u6570\uff0c\u4f8b\u5982\uff1a</p> <pre><code>./mill 'chisel[2.13.16].test.testOnly' chiselTests.ShiftRegistersSpec -- -DemitVcd=1\n</code></pre>"},{"location":"chisel_cookbooks/testing/#chiselsim-scalatest","title":"\u5982\u4f55\u67e5\u770bChiselSim Scalatest\u6d4b\u8bd5\u652f\u6301\u54ea\u4e9b\u9009\u9879\uff1f","text":"<p>\u5411Scalatest\u4f20\u9012<code>-Dhelp=1</code>\uff0c\u4f8b\u5982\uff1a</p> <pre><code>./mill 'chisel[2.13.16].test.testOnly' chiselTests.ShiftRegistersSpec -- -Dhelp=1\n</code></pre>"},{"location":"chisel_cookbooks/troubleshooting/","title":"\u6545\u969c\u6392\u9664","text":"<p>\u672c\u9875\u9762\u662f\u8bb0\u5f55\u4f7f\u7528Chisel3\u5f00\u53d1\u65f6\u5e38\u89c1\u548c\u4e0d\u5e38\u89c1\u95ee\u9898\u7684\u8d77\u70b9\u3002\u7279\u522b\u662f\u90a3\u4e9b\u6709\u89e3\u51b3\u65b9\u6cd5\u53ef\u4ee5\u8ba9\u4f60\u7ee7\u7eed\u524d\u8fdb\u7684\u60c5\u51b5\u3002</p>"},{"location":"chisel_cookbooks/troubleshooting/#uintsinttype-mismatch","title":"\u6307\u5b9a<code>UInt</code>/<code>SInt</code>\u7684\u5bbd\u5ea6/\u503c\u65f6\u51fa\u73b0<code>type mismatch</code>","text":"<p>\u6211\u6709\u4e00\u4e9b\u65e7\u4ee3\u7801\uff0c\u5728chisel2\u4e2d\u66fe\u7ecf\u6b63\u5e38\u5de5\u4f5c\uff08\u5982\u679c\u6211\u4f7f\u7528<code>import Chisel._</code>\u517c\u5bb9\u5c42\uff0c\u73b0\u5728\u4ecd\u7136\u53ef\u4ee5\u5de5\u4f5c\uff09\uff0c \u4f46\u5728\u76f4\u63a5\u4f7f\u7528chisel3\u65f6\u4f1a\u5bfc\u81f4<code>type mismatch</code>\u9519\u8bef\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:fail\nclass TestBlock extends Module {\n    val io = IO(new Bundle {\n        val output = Output(UInt(width=3))\n    })\n}\n</code></pre> <p>\u4ea7\u751f</p> <pre><code>type mismatch;\n[error]  found   : Int(3)\n[error]  required: chisel3.internal.firrtl.Width\n[error]         val output = Output(UInt(width=3))\n</code></pre> <p>chisel2\u4e2d\u7684\u5355\u53c2\u6570\u591a\u529f\u80fd\u5bf9\u8c61/\u6784\u9020\u51fd\u6570\u5df2\u4ecechisel3\u4e2d\u79fb\u9664\u3002 \u4eba\u4eec\u8ba4\u4e3a\u8fd9\u4e9b\u592a\u5bb9\u6613\u51fa\u9519\uff0c\u4f7f\u5f97\u5728chisel3\u4ee3\u7801\u4e2d\u96be\u4ee5\u8bca\u65ad\u9519\u8bef\u6761\u4ef6\u3002</p> <p>\u5728chisel3\u4e2d\uff0c<code>UInt</code>/<code>SInt</code>\u5bf9\u8c61/\u6784\u9020\u51fd\u6570\u7684\u5355\u4e2a\u53c2\u6570\u6307\u5b9a\u5bbd\u5ea6\uff0c\u5fc5\u987b\u662f<code>Width</code>\u7c7b\u578b\u3002 \u867d\u7136\u6ca1\u6709\u4ece<code>Int</code>\u5230<code>Width</code>\u7684\u81ea\u52a8\u8f6c\u6362\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7\u5bf9<code>Int</code>\u5e94\u7528<code>W</code>\u65b9\u6cd5\u5c06<code>Int</code>\u8f6c\u6362\u4e3a<code>Width</code>\u3002 \u5728chisel3\u4e2d\uff0c\u4e0a\u8ff0\u4ee3\u7801\u53d8\u4e3a\uff1a <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3._\n\nclass TestBlock extends Module {\n    val io = IO(new Bundle {\n        val output = Output(UInt(3.W))\n    })\n}\n</code></pre> \u53ef\u4ee5\u901a\u8fc7\u5e94\u7528<code>U</code>\u6216<code>S</code>\u65b9\u6cd5\u4ece<code>Int</code>\u521b\u5efa<code>UInt</code>/<code>SInt</code>\u5b57\u9762\u91cf\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:fail\nUInt(42)\n</code></pre> <p>\u5728chisel2\u4e2d\uff0c\u53d8\u4e3a <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\n42.U\n</code></pre> \u5728chisel3\u4e2d</p> <p>\u901a\u8fc7\u4f7f\u7528\u5e26\u6709<code>W</code>\u53c2\u6570\u7684<code>U</code>\u6216<code>S</code>\u65b9\u6cd5\u53ef\u4ee5\u521b\u5efa\u5177\u6709\u7279\u5b9a\u5bbd\u5ea6\u7684\u5b57\u9762\u91cf\u3002 \u4f7f\u7528\uff1a <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\n1.S(8.W)\n</code></pre> \u521b\u5efa\u4e00\u4e2a8\u4f4d\u5bbd\u7684\uff08\u6709\u7b26\u53f7\uff09\u503c\u4e3a1\u7684\u5b57\u9762\u91cf\u3002</p>"},{"location":"chisel_explanation/annotations/","title":"\u6ce8\u89e3","text":"<p><code>Annotation</code>\uff08\u6ce8\u89e3\uff09\u662f\u4e0eFIRRTL\u7535\u8def\u4e2d\u7684\u96f6\u4e2a\u6216\u591a\u4e2a\"\u4e8b\u7269\"\u76f8\u5173\u8054\u7684\u5143\u6570\u636e\u5bb9\u5668\u3002 \u901a\u5e38\uff0c<code>Annotation</code>\u7528\u4e8e\u5c06\u4fe1\u606f\u4eceChisel\u4f20\u9012\u7ed9\u7279\u5b9a\u7684\u3001\u5df2\u77e5\u7684FIRRTL <code>Transform</code>\uff08\u8f6c\u6362\uff09\u3002 \u5728\u8fd9\u79cd\u65b9\u5f0f\u4e0b\uff0c<code>Annotation</code>\u53ef\u4ee5\u88ab\u89c6\u4e3a\u7279\u5b9a<code>Transform</code>\u6d88\u8d39\u7684\"\u53c2\u6570\"\u3002</p> <p><code>Annotation</code>\u88ab\u8bbe\u8ba1\u4e3aChisel\u7684\u5b9e\u73b0\u7ec6\u8282\uff0c\u5e76\u4e0d\u610f\u5473\u7740\u7531\u7528\u6237\u624b\u52a8\u6784\u9020\u6216\u76f4\u63a5\u4ea4\u4e92\u3002 \u76f8\u53cd\uff0c\u5b83\u4eec\u65e8\u5728\u901a\u8fc7\u73b0\u6709\u6216\u65b0\u7684Chisel API\u6765\u4f7f\u7528\u3002\u4f8b\u5982\uff0c <code>dontTouch</code> API\u63d0\u4f9b\u4e86\u4e00\u79cd\u65b9\u5f0f\uff0c\u4f7f\u7528\u6237\u80fd\u591f\u6307\u793a\u67d0\u4e2a\u7ebf\u7f51\u6216\u7aef\u53e3\u4e0d\u5e94\u88ab\u4f18\u5316\u3002 \u8fd9\u4e2aAPI\u80cc\u540e\u7531<code>DontTouchAnnotation</code>\u652f\u6301\uff0c\u4f46\u8fd9\u5bf9Chisel\u7528\u6237\u662f\u9690\u85cf\u7684\u3002</p> <p>\u6240\u6709\u652f\u6301\u7684<code>Annotation</code>\u5217\u8868\u4f5c\u4e3aFIRRTL Dialect\u6587\u6863\u7684\u4e00\u90e8\u5206\u7ef4\u62a4\u5728 circt.llvm.org\u4e0a\u3002</p>"},{"location":"chisel_explanation/blackboxes/","title":"\u9ed1\u76d2\uff08BlackBoxes\uff09","text":"<p>Chisel\u7684\u9ed1\u76d2\uff08BlackBoxes\uff09\u7528\u4e8e\u5b9e\u4f8b\u5316\u5916\u90e8\u5b9a\u4e49\u7684\u6a21\u5757\u3002\u8fd9\u4e00\u6784\u9020\u5bf9\u4e8e\u65e0\u6cd5\u7528Chisel\u63cf\u8ff0\u7684\u786c\u4ef6\u7ed3\u6784\u4ee5\u53ca\u8fde\u63a5\u5230FPGA\u6216\u5176\u4ed6\u975eChisel\u5b9a\u4e49\u7684IP\u975e\u5e38\u6709\u7528\u3002</p> <p>\u5b9a\u4e49\u4e3a<code>BlackBox</code>\u7684\u6a21\u5757\u5c06\u5728\u751f\u6210\u7684Verilog\u4e2d\u88ab\u5b9e\u4f8b\u5316\uff0c\u4f46\u4e0d\u4f1a\u751f\u6210\u5b9a\u4e49\u6a21\u5757\u884c\u4e3a\u7684\u4ee3\u7801\u3002</p> <p>\u4e0eModule\u4e0d\u540c\uff0c<code>BlackBox</code>\u6ca1\u6709\u9690\u5f0f\u7684\u65f6\u949f\u548c\u590d\u4f4d\u4fe1\u53f7\u3002 <code>BlackBox</code>\u7684\u65f6\u949f\u548c\u590d\u4f4d\u7aef\u53e3\u5fc5\u987b\u88ab\u663e\u5f0f\u58f0\u660e\u5e76\u8fde\u63a5\u5230\u8f93\u5165\u4fe1\u53f7\u3002 \u5728IO Bundle\u4e2d\u58f0\u660e\u7684\u7aef\u53e3\u5c06\u4f7f\u7528\u8bf7\u6c42\u7684\u540d\u79f0\u751f\u6210\uff08\u5373\u6ca1\u6709\u524d\u7f00<code>io_</code>\uff09\u3002</p>"},{"location":"chisel_explanation/blackboxes/#_1","title":"\u53c2\u6570\u5316","text":"<p>Verilog\u53c2\u6570\u53ef\u4ee5\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9BlackBox\u6784\u9020\u51fd\u6570\u3002</p> <p>\u4f8b\u5982\uff0c\u8003\u8651\u5728Chisel\u8bbe\u8ba1\u4e2d\u5b9e\u4f8b\u5316\u4e00\u4e2aXilinx\u5dee\u5206\u65f6\u949f\u7f13\u51b2\u5668\uff08IBUFDS\uff09\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3._\nimport chisel3.util._\nimport chisel3.experimental._ // \u542f\u7528\u5b9e\u9a8c\u6027\u529f\u80fd\n\nclass IBUFDS extends BlackBox(Map(\"DIFF_TERM\" -&gt; \"TRUE\",\n                                  \"IOSTANDARD\" -&gt; \"DEFAULT\")) {\n  val io = IO(new Bundle {\n    val O = Output(Clock())\n    val I = Input(Clock())\n    val IB = Input(Clock())\n  })\n}\n\nclass Top extends Module {\n  val io = IO(new Bundle {})\n  val ibufds = Module(new IBUFDS)\n  // \u5c06IBUFDS\u7684\u4e00\u4e2a\u8f93\u5165\u65f6\u949f\u7aef\u53e3\u8fde\u63a5\u5230Top\u7684\u65f6\u949f\u4fe1\u53f7\n  ibufds.io.I := clock\n}\n</code></pre> <p>\u5728Chisel\u751f\u6210\u7684Verilog\u4ee3\u7801\u4e2d\uff0c<code>IBUFDS</code>\u5c06\u88ab\u5b9e\u4f8b\u5316\u4e3a\uff1a</p> <pre><code>IBUFDS #(.DIFF_TERM(\"TRUE\"), .IOSTANDARD(\"DEFAULT\")) ibufds (\n  .IB(ibufds_IB),\n  .I(ibufds_I),\n  .O(ibufds_O)\n);\n</code></pre>"},{"location":"chisel_explanation/blackboxes/#_2","title":"\u4e3a\u9ed1\u76d2\u63d0\u4f9b\u5b9e\u73b0","text":"<p>Chisel\u63d0\u4f9b\u4ee5\u4e0b\u65b9\u5f0f\u6765\u63d0\u4f9b\u9ed1\u76d2\u5e95\u5c42\u7684\u4ee3\u7801\u3002\u8003\u8651\u4ee5\u4e0b\u5c06\u4e24\u4e2a\u5b9e\u6570\u76f8\u52a0\u7684\u9ed1\u76d2\u3002\u8fd9\u4e9b\u6570\u5b57\u5728chisel3\u4e2d\u8868\u793a\u4e3a64\u4f4d\u65e0\u7b26\u53f7\u6574\u6570\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\nclass BlackBoxRealAdd extends BlackBox {\n  val io = IO(new Bundle {\n    val in1 = Input(UInt(64.W))\n    val in2 = Input(UInt(64.W))\n    val out = Output(UInt(64.W))\n  })\n}\n</code></pre> <p>\u5b9e\u73b0\u7531\u4ee5\u4e0bverilog\u63cf\u8ff0\uff1a</p> <pre><code>module BlackBoxRealAdd(\n    input  [63:0] in1,\n    input  [63:0] in2,\n    output reg [63:0] out\n);\n  always @* begin\n    out &lt;= $realtobits($bitstoreal(in1) + $bitstoreal(in2));\n  end\nendmodule\n</code></pre>"},{"location":"chisel_explanation/blackboxes/#verilog","title":"\u4f7f\u7528\u8d44\u6e90\u6587\u4ef6\u4e2d\u7684Verilog\u7684\u9ed1\u76d2","text":"<p>\u4e3a\u4e86\u5c06\u4e0a\u9762\u7684verilog\u7247\u6bb5\u63d0\u4f9b\u7ed9\u540e\u7aef\u6a21\u62df\u5668\uff0cchisel3\u57fa\u4e8echisel/firrtl\u7684\u6ce8\u89e3\u7cfb\u7edf\u63d0\u4f9b\u4e86\u4ee5\u4e0b\u5de5\u5177\u3002\u5c06\u7279\u6027<code>HasBlackBoxResource</code>\u6dfb\u52a0\u5230\u58f0\u660e\u4e2d\uff0c\u7136\u540e\u5728\u4e3b\u4f53\u4e2d\u8c03\u7528\u51fd\u6570\u6765\u544a\u8bc9\u7cfb\u7edf\u5728\u54ea\u91cc\u53ef\u4ee5\u627e\u5230verilog\u4ee3\u7801\u3002\u6a21\u5757\u73b0\u5728\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\nimport chisel3.util.HasBlackBoxResource\n\nclass BlackBoxRealAdd extends BlackBox with HasBlackBoxResource {\n  val io = IO(new Bundle {\n    val in1 = Input(UInt(64.W))\n    val in2 = Input(UInt(64.W))\n    val out = Output(UInt(64.W))\n  })\n  addResource(\"/real_math.v\")\n}\n</code></pre> <p>\u4e0a\u9762\u7684verilog\u7247\u6bb5\u88ab\u653e\u5165\u540d\u4e3a<code>real_math.v</code>\u7684\u8d44\u6e90\u6587\u4ef6\u4e2d\u3002\u4ec0\u4e48\u662f\u8d44\u6e90\u6587\u4ef6\uff1f\u5b83\u6e90\u81eaJava\u7684\u60ef\u4f8b\uff0c\u5728\u9879\u76ee\u4e2d\u4fdd\u5b58\u4e00\u4e9b\u6587\u4ef6\uff0c\u8fd9\u4e9b\u6587\u4ef6\u4f1a\u81ea\u52a8\u5305\u542b\u5728\u5e93\u7684\u53d1\u884c\u7248\u4e2d\u3002\u5728\u5178\u578b\u7684Chisel\u9879\u76ee\u4e2d\uff0c\u53c2\u89c1chisel-template\uff0c\u8fd9\u5c06\u662f\u6e90\u4ee3\u7801\u5c42\u6b21\u7ed3\u6784\u4e2d\u7684\u4e00\u4e2a\u76ee\u5f55\uff1a<code>src/main/resources/real_math.v</code>\u3002</p>"},{"location":"chisel_explanation/blackboxes/#verilog_1","title":"\u5e26\u6709\u5185\u8054Verilog\u7684\u9ed1\u76d2","text":"<p>\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5728scala\u6e90\u4ee3\u7801\u4e2d\u653e\u7f6e\u8fd9\u4e2averilog\u3002\u4e0d\u4f7f\u7528<code>HasBlackBoxResource</code>\u800c\u4f7f\u7528<code>HasBlackBoxInline</code>\uff0c\u4e0d\u4f7f\u7528<code>setResource</code>\u800c\u4f7f\u7528<code>setInline</code>\u3002\u4ee3\u7801\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\nimport chisel3.util.HasBlackBoxInline\nclass BlackBoxRealAdd extends BlackBox with HasBlackBoxInline {\n  val io = IO(new Bundle {\n    val in1 = Input(UInt(64.W))\n    val in2 = Input(UInt(64.W))\n    val out = Output(UInt(64.W))\n  })\n  setInline(\"BlackBoxRealAdd.v\",\n    \"\"\"module BlackBoxRealAdd(\n      |    input  [15:0] in1,\n      |    input  [15:0] in2,\n      |    output [15:0] out\n      |);\n      |always @* begin\n      |  out &lt;= $realtobits($bitstoreal(in1) + $bitstoreal(in2));\n      |end\n      |endmodule\n    \"\"\".stripMargin)\n}\n</code></pre> <p>\u8fd9\u79cd\u6280\u672f\u5c06\u5185\u8054\u7684verilog\u590d\u5236\u5230\u76ee\u6807\u76ee\u5f55\u4e0b\uff0c\u540d\u4e3a<code>BlackBoxRealAdd.v</code></p>"},{"location":"chisel_explanation/blackboxes/#_3","title":"\u5185\u90e8\u539f\u7406","text":"<p>\u8fd9\u79cd\u5c06verilog\u5185\u5bb9\u4f20\u9012\u7ed9\u6d4b\u8bd5\u540e\u7aef\u7684\u673a\u5236\u662f\u901a\u8fc7chisel/firrtl\u6ce8\u89e3\u5b9e\u73b0\u7684\u3002\u5185\u8054\u548c\u8d44\u6e90\u8fd9\u4e24\u79cd\u65b9\u6cd5\u662f\u901a\u8fc7<code>setInline</code>\u548c<code>setResource</code>\u65b9\u6cd5\u8c03\u7528\u521b\u5efa\u7684\u4e24\u79cd\u6ce8\u89e3\u3002\u8fd9\u4e9b\u6ce8\u89e3\u901a\u8fc7chisel-testers\u4f20\u9012\u7ed9firrtl\u3002\u9ed8\u8ba4\u7684firrtl verilog\u7f16\u8bd1\u5668\u6709\u4e00\u4e2a\u68c0\u6d4b\u6ce8\u89e3\u5e76\u5c06\u6587\u4ef6\u6216\u5185\u8054\u6587\u672c\u79fb\u5165\u6784\u5efa\u76ee\u5f55\u7684\u8fc7\u7a0b\u3002\u5bf9\u4e8e\u6dfb\u52a0\u7684\u6bcf\u4e2a\u552f\u4e00\u6587\u4ef6\uff0c\u8be5\u8f6c\u6362\u4f1a\u5411\u6587\u4ef6<code>black_box_verilog_files.f</code>\u6dfb\u52a0\u4e00\u884c\uff0c\u8fd9\u4e2a\u6587\u4ef6\u4f1a\u88ab\u6dfb\u52a0\u5230\u4e3averilator\u6216vcs\u6784\u9020\u7684\u547d\u4ee4\u884c\u4e2d\uff0c\u4ee5\u544a\u8bc9\u5b83\u4eec\u5728\u54ea\u91cc\u67e5\u627e\u3002 dsptools\u9879\u76ee\u662f\u4f7f\u7528\u8fd9\u4e2a\u529f\u80fd\u57fa\u4e8e\u9ed1\u76d2\u6784\u5efa\u5b9e\u6570\u6a21\u62df\u6d4b\u8bd5\u5668\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\u3002</p>"},{"location":"chisel_explanation/bundles-and-vecs/","title":"Bundle\u548cVec","text":"<p><code>Bundle</code>\u548c<code>Vec</code>\u662f\u5141\u8bb8\u7528\u6237\u901a\u8fc7\u805a\u5408\u5176\u4ed6\u7c7b\u578b\u6765\u6269\u5c55Chisel\u6570\u636e\u7c7b\u578b\u96c6\u5408\u7684\u7c7b\u3002</p> <p>Bundle\u5c06\u51e0\u4e2a\u53ef\u80fd\u5177\u6709\u4e0d\u540c\u7c7b\u578b\u7684\u547d\u540d\u5b57\u6bb5\u7ec4\u5408\u6210\u4e00\u4e2a\u8fde\u8d2f\u7684\u5355\u5143\uff0c\u5f88\u50cfC\u8bed\u8a00\u4e2d\u7684<code>struct</code>\u3002\u7528\u6237\u901a\u8fc7\u5b9a\u4e49\u4e00\u4e2a\u4f5c\u4e3a<code>Bundle</code>\u5b50\u7c7b\u7684\u7c7b\u6765\u5b9a\u4e49\u81ea\u5df1\u7684bundle\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3._\nclass MyFloat extends Bundle {\n  val sign        = Bool()\n  val exponent    = UInt(8.W)\n  val significand = UInt(23.W)\n}\n\nclass ModuleWithFloatWire extends RawModule {\n  val x  = Wire(new MyFloat)\n  val xs = x.sign\n}\n</code></pre> <p>\u4f60\u53ef\u4ee5\u4f7f\u7528\u5b9e\u9a8c\u6027\u7684Bundle\u5b57\u9762\u91cf\u529f\u80fd\u521b\u5efa\u5b57\u9762\u91cfBundle\u3002</p> <p>Scala\u7684\u60ef\u4f8b\u662f\u4f7f\u7528UpperCamelCase\u547d\u540d\u7c7b\uff0c\u6211\u4eec\u5efa\u8bae\u4f60\u5728Chisel\u4ee3\u7801\u4e2d\u9075\u5faa\u8fd9\u4e00\u60ef\u4f8b\u3002</p> <p>Vec\u521b\u5efa\u4e00\u4e2a\u53ef\u7d22\u5f15\u7684\u5143\u7d20\u5411\u91cf\uff0c\u6784\u9020\u65b9\u5f0f\u5982\u4e0b\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass ModuleWithVec extends RawModule {\n  // 5\u4e2a23\u4f4d\u6709\u7b26\u53f7\u6574\u6570\u7684\u5411\u91cf\u3002\n  val myVec = Wire(Vec(5, SInt(23.W)))\n\n  // \u8fde\u63a5\u5230\u5411\u91cf\u7684\u4e00\u4e2a\u5143\u7d20\u3002\n  val reg3 = myVec(3)\n}\n</code></pre> <p>\uff08\u6ce8\u610f\u6211\u4eec\u6307\u5b9a\u4e86\u6570\u91cf\uff0c\u7136\u540e\u662f<code>Vec</code>\u5143\u7d20\u7684\u7c7b\u578b\u3002\u6211\u4eec\u8fd8\u6307\u5b9a\u4e86<code>SInt</code>\u7684\u5bbd\u5ea6\uff09</p> <p>\u539f\u59cb\u7c7b(<code>SInt</code>, <code>UInt</code>\u548c<code>Bool</code>)\u52a0\u4e0a\u805a\u5408\u7c7b(<code>Bundle</code>\u548c<code>Vec</code>)\u90fd\u7ee7\u627f\u81ea\u4e00\u4e2a\u5171\u540c\u7684\u8d85\u7c7b<code>Data</code>\u3002\u6bcf\u4e2a\u6700\u7ec8\u7ee7\u627f\u81ea<code>Data</code>\u7684\u5bf9\u8c61\u90fd\u53ef\u4ee5\u5728\u786c\u4ef6\u8bbe\u8ba1\u4e2d\u8868\u793a\u4e3a\u4e00\u4e2a\u4f4d\u5411\u91cf\u3002</p> <p>Bundle\u548cVec\u53ef\u4ee5\u4efb\u610f\u5d4c\u5957\u4ee5\u6784\u5efa\u590d\u6742\u7684\u6570\u636e\u7ed3\u6784\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass BigBundle extends Bundle {\n // 5\u4e2a23\u4f4d\u6709\u7b26\u53f7\u6574\u6570\u7684\u5411\u91cf\u3002\n val myVec = Vec(5, SInt(23.W))\n val flag  = Bool()\n // \u5148\u524d\u5b9a\u4e49\u7684bundle\u3002\n val f     = new MyFloat\n}\n</code></pre> <p>\u6ce8\u610f\uff0c\u5185\u7f6e\u7684Chisel\u539f\u59cb\u548c\u805a\u5408\u7c7b\u5728\u521b\u5efa\u5b9e\u4f8b\u65f6\u4e0d\u9700\u8981<code>new</code>\uff0c\u800c\u65b0\u7684\u7528\u6237\u6570\u636e\u7c7b\u578b\u5219\u9700\u8981\u3002\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2aScala\u7684<code>apply</code>\u6784\u9020\u51fd\u6570\uff0c\u4f7f\u5f97\u7528\u6237\u6570\u636e\u7c7b\u578b\u4e5f\u4e0d\u9700\u8981<code>new</code>\uff0c\u8fd9\u5728\u51fd\u6570\u6784\u9020\u5668\u4e2d\u6709\u63cf\u8ff0\u3002</p>"},{"location":"chisel_explanation/bundles-and-vecs/#bundle","title":"\u7ffb\u8f6cBundle","text":"<p><code>Flipped()</code>\u51fd\u6570\u9012\u5f52\u5730\u7ffb\u8f6cBundle/Record\u4e2d\u7684\u6240\u6709\u5143\u7d20\u3002\u8fd9\u5bf9\u4e8e\u6784\u5efa\u76f8\u4e92\u8fde\u63a5\u7684\u53cc\u5411\u63a5\u53e3\u975e\u5e38\u6709\u7528\uff08\u4f8b\u5982<code>Decoupled</code>\uff09\u3002\u8bf7\u770b\u4e0b\u9762\u7684\u4f8b\u5b50\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass ABBundle extends Bundle {\n  val a = Input(Bool())\n  val b = Output(Bool())\n}\nclass MyFlippedModule extends RawModule {\n  // Bundle\u7684\u6b63\u5e38\u5b9e\u4f8b\u5316\n  // 'a'\u662f\u8f93\u5165\uff0c'b'\u662f\u8f93\u51fa\n  val normalBundle = IO(new ABBundle)\n  normalBundle.b := normalBundle.a\n\n  // Flipped\u9012\u5f52\u5730\u7ffb\u8f6c\u6240\u6709Bundle\u5b57\u6bb5\u7684\u65b9\u5411\n  // \u73b0\u5728'a'\u662f\u8f93\u51fa\uff0c'b'\u662f\u8f93\u5165\n  val flippedBundle = IO(Flipped(new ABBundle))\n  flippedBundle.a := flippedBundle.b\n}\n</code></pre> <p>\u8fd9\u4f1a\u751f\u6210\u4ee5\u4e0bVerilog\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new MyFlippedModule())\n</code></pre>"},{"location":"chisel_explanation/bundles-and-vecs/#mixedvec","title":"MixedVec","text":"<p>(Chisel 3.2+)</p> <p><code>Vec</code>\u7684\u6240\u6709\u5143\u7d20\u5fc5\u987b\u5177\u6709\u76f8\u540c\u7684\u53c2\u6570\u5316\u3002\u5982\u679c\u6211\u4eec\u60f3\u521b\u5efa\u4e00\u4e2aVec\uff0c\u5176\u4e2d\u5143\u7d20\u5177\u6709\u76f8\u540c\u7684\u7c7b\u578b\u4f46\u4e0d\u540c\u7684\u53c2\u6570\u5316\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528MixedVec\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3.util.MixedVec\nclass ModuleMixedVec extends Module {\n  val io = IO(new Bundle {\n    val x = Input(UInt(3.W))\n    val y = Input(UInt(10.W))\n    val vec = Output(MixedVec(UInt(3.W), UInt(10.W)))\n  })\n  io.vec(0) := io.x\n  io.vec(1) := io.y\n}\n</code></pre> <p>\u6211\u4eec\u4e5f\u53ef\u4ee5\u4ee5\u7f16\u7a0b\u65b9\u5f0f\u521b\u5efaMixedVec\u4e2d\u7684\u7c7b\u578b\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass ModuleProgrammaticMixedVec(x: Int, y: Int) extends Module {\n  val io = IO(new Bundle {\n    val vec = Input(MixedVec((x to y) map { i =&gt; UInt(i.W) }))\n    // ...\n  })\n  // ...\u6a21\u5757\u7684\u5176\u4f59\u90e8\u5206\u653e\u5728\u8fd9\u91cc...\n}\n</code></pre>"},{"location":"chisel_explanation/bundles-and-vecs/#clonetypechisel-35","title":"\u5173\u4e8e<code>cloneType</code>\u7684\u8bf4\u660e\uff08\u5bf9\u4e8eChisel &lt; 3.5\uff09","text":"<p>\u6ce8\u610f\uff1a\u6b64\u90e8\u5206\u4ec5\u9002\u7528\u4e8eChisel 3.5\u4e4b\u524d\u7684\u7248\u672c\u3002 \u4eceChisel 3.5\u5f00\u59cb\uff0c<code>Bundle</code>\u4e0d\u5e94\u8be5<code>override def cloneType</code>\uff0c \u56e0\u4e3a\u5f53\u4f7f\u7528chisel3\u7f16\u8bd1\u5668\u63d2\u4ef6\u63a8\u65ad<code>cloneType</code>\u65f6\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u5668\u9519\u8bef\u3002</p> <p>\u7531\u4e8eChisel\u5efa\u7acb\u5728Scala\u548cJVM\u4e4b\u4e0a\uff0c \u5b83\u9700\u8981\u77e5\u9053\u5982\u4f55\u4e3a\u5404\u79cd\u76ee\u7684\u6784\u9020<code>Bundle</code>\u7684\u526f\u672c \uff08\u521b\u5efa\u7ebf\u7f51\u3001IO\u7b49\uff09\u3002 \u5982\u679c\u4f60\u6709\u4e00\u4e2a\u53c2\u6570\u5316\u7684<code>Bundle</code>\uff0c\u800cChisel\u65e0\u6cd5\u81ea\u52a8\u5f04\u6e05\u695a\u5982\u4f55 \u514b\u9686\u5b83\uff0c\u4f60\u5c06\u9700\u8981\u5728\u4f60\u7684bundle\u4e2d\u521b\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684<code>cloneType</code>\u65b9\u6cd5\u3002 \u5728\u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e0d\u662f\u5fc5\u9700\u7684\uff0c \u56e0\u4e3aChisel\u53ef\u4ee5\u81ea\u52a8\u5f04\u6e05\u695a\u5982\u4f55\u514b\u9686\u5927\u591a\u6570<code>Bundle</code>\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass MyCloneTypeBundle(val bitwidth: Int) extends Bundle {\n   val field = UInt(bitwidth.W)\n   // ...\n}\n</code></pre> <p>\u552f\u4e00\u7684\u6ce8\u610f\u4e8b\u9879\u662f\uff0c\u5982\u679c\u4f60\u5c06\u7c7b\u578b\u4e3a<code>Data</code>\u7684\u4e1c\u897f\u4f5c\u4e3a\"\u751f\u6210\u5668\"\u53c2\u6570\u4f20\u9012\uff0c \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u5e94\u8be5\u5c06\u5176\u8bbe\u4e3a<code>private val</code>\uff0c\u5e76\u5b9a\u4e49\u4e00\u4e2a<code>cloneType</code>\u65b9\u6cd5\uff0c \u4f7f\u7528<code>override def cloneType = (new YourBundleHere(...)).asInstanceOf[this.type]</code>\u3002</p> <p>\u4f8b\u5982\uff0c\u8003\u8651\u4ee5\u4e0b<code>Bundle</code>\u3002\u56e0\u4e3a\u5b83\u7684<code>gen</code>\u53d8\u91cf\u4e0d\u662f<code>private val</code>\uff0c\u7528\u6237\u5fc5\u987b \u663e\u5f0f\u5b9a\u4e49<code>cloneType</code>\u65b9\u6cd5\uff1a</p> <pre><code>import chisel3.util.{Decoupled, Irrevocable}\nclass RegisterWriteIOExplicitCloneType[T &lt;: Data](gen: T) extends Bundle {\n  val request  = Flipped(Decoupled(gen))\n  val response = Irrevocable(Bool())\n  override def cloneType = new RegisterWriteIOExplicitCloneType(gen).asInstanceOf[this.type]\n}\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5c06<code>gen</code>\u8bbe\u4e3aprivate\u6765\u4f7f\u5176\u63a8\u65adcloneType\uff0c\u56e0\u4e3a\u5b83\u662f\u4e00\u4e2a\"\u7c7b\u578b\u53c2\u6570\"\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3.util.{Decoupled, Irrevocable}\nclass RegisterWriteIO[T &lt;: Data](private val gen: T) extends Bundle {\n  val request  = Flipped(Decoupled(gen))\n  val response = Irrevocable(Bool())\n}\n</code></pre>"},{"location":"chisel_explanation/chisel-enum/","title":"ChiselEnum","text":"<p>ChiselEnum\u7c7b\u578b\u53ef\u7528\u4e8e\u51cf\u5c11\u5728\u7f16\u7801\u591a\u8def\u590d\u7528\u5668\u9009\u62e9\u5668\u3001\u64cd\u4f5c\u7801\u548c\u529f\u80fd\u5355\u5143\u64cd\u4f5c\u65f6\u51fa\u9519\u7684\u53ef\u80fd\u6027\u3002 \u4e0e<code>Chisel.util.Enum</code>\u76f8\u6bd4\uff0c<code>ChiselEnum</code>\u662f<code>Data</code>\u7684\u5b50\u7c7b\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4eec\u53ef\u4ee5\u7528\u4e8e\u5b9a\u4e49<code>Bundle</code>\u4e2d\u7684\u5b57\u6bb5\uff0c\u5305\u62ec\u5728<code>IO</code>\u4e2d\u3002</p>"},{"location":"chisel_explanation/chisel-enum/#_1","title":"\u529f\u80fd\u548c\u793a\u4f8b","text":"<pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\n// \u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\u4f7f\u7528\u7684\u5bfc\u5165\nimport chisel3._\nimport chisel3.util._\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\n// \u7528\u4e8e\u6253\u5370\u6765\u81eaChisel elab\u7684stdout\u7684\u8f85\u52a9\u7a0b\u5e8f\n// \u53ef\u80fd\u4e0e\u4ee5\u4e0b\u95ee\u9898\u6709\u5173\uff1ahttps://github.com/scalameta/mdoc/issues/517\nimport java.io._\nimport firrtl.seqToAnnoSeq\nimport _root_.logger.Logger\ndef grabLog[T](thunk: =&gt; T): (String, T) = {\n  val baos = new ByteArrayOutputStream()\n  val stream = new PrintStream(baos, true, \"utf-8\")\n  val ret = Logger.makeScope(Nil) {\n   Logger.setOutput(stream)\n   thunk\n  }\n  (baos.toString, ret)\n}\n</code></pre> <p>\u4e0b\u9762\u6211\u4eec\u770b\u5230ChiselEnum\u88ab\u7528\u4f5cRISC-V\u6838\u7684\u591a\u8def\u590d\u7528\u5668\u9009\u62e9\u5668\u3002\u867d\u7136\u5c06\u5bf9\u8c61\u5305\u88c5\u5728\u5305\u4e2d\u4e0d\u662f\u5fc5\u9700\u7684\uff0c\u4f46\u5f3a\u70c8\u5efa\u8bae\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u8fd9\u6837\u53ef\u4ee5\u66f4\u5bb9\u6613\u5730\u5728\u591a\u4e2a\u6587\u4ef6\u4e2d\u4f7f\u7528\u8be5\u7c7b\u578b\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\n// package CPUTypes {\nobject AluMux1Sel extends ChiselEnum {\n  val selectRS1, selectPC = Value\n}\n// \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6253\u5370\u6bcf\u4e2aValue\u6765\u67e5\u770b\u6620\u5c04\nAluMux1Sel.all.foreach(println)\n</code></pre> <p>\u8fd9\u91cc\u6211\u4eec\u770b\u5230\u4e00\u4e2a\u4f7f\u7528AluMux1Sel\u7684\u591a\u8def\u590d\u7528\u5668\uff0c\u7528\u4e8e\u5728\u4e0d\u540c\u8f93\u5165\u4e4b\u95f4\u8fdb\u884c\u9009\u62e9\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nimport AluMux1Sel._\n\nclass AluMux1Bundle extends Bundle {\n  val aluMux1Sel = Input(AluMux1Sel())\n  val rs1Out     = Input(Bits(32.W))\n  val pcOut      = Input(Bits(32.W))\n  val aluMux1Out = Output(Bits(32.W))\n}\n\nclass AluMux1File extends Module {\n  val io = IO(new AluMux1Bundle)\n\n  // aluMux1Out\u7684\u9ed8\u8ba4\u503c\n  io.aluMux1Out := 0.U\n\n  switch (io.aluMux1Sel) {\n    is (selectRS1) {\n      io.aluMux1Out := io.rs1Out\n    }\n    is (selectPC) {\n      io.aluMux1Out := io.pcOut\n    }\n  }\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new AluMux1File)\n</code></pre> <p>ChiselEnum\u8fd8\u5141\u8bb8\u7528\u6237\u901a\u8fc7\u5411<code>Value(...)</code>\u4f20\u9012\u4e00\u4e2a<code>UInt</code>\u6765\u76f4\u63a5\u8bbe\u7f6e\u503c\uff0c \u5982\u4e0b\u6240\u793a\u3002\u6ce8\u610f\uff0c\u6bcf\u4e2a<code>Value</code>\u7684\u5927\u5c0f\u5fc5\u987b\u4e25\u683c\u5927\u4e8e\u524d\u4e00\u4e2a\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nobject Opcode extends ChiselEnum {\n    val load  = Value(0x03.U) // i \"load\"  -&gt; 000_0011\n    val imm   = Value(0x13.U) // i \"imm\"   -&gt; 001_0011\n    val auipc = Value(0x17.U) // u \"auipc\" -&gt; 001_0111\n    val store = Value(0x23.U) // s \"store\" -&gt; 010_0011\n    val reg   = Value(0x33.U) // r \"reg\"   -&gt; 011_0011\n    val lui   = Value(0x37.U) // u \"lui\"   -&gt; 011_0111\n    val br    = Value(0x63.U) // b \"br\"    -&gt; 110_0011\n    val jalr  = Value(0x67.U) // i \"jalr\"  -&gt; 110_0111\n    val jal   = Value(0x6F.U) // j \"jal\"   -&gt; 110_1111\n}\n</code></pre> <p>\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u4e00\u4e2a\u8d77\u59cb\u70b9\u7136\u540e\u4f7f\u7528\u5e38\u89c4Value\u5b9a\u4e49\uff0c\"\u8df3\u8dc3\"\u5230\u4e00\u4e2a\u503c\u5e76\u7ee7\u7eed\u9012\u589e\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nobject BranchFunct3 extends ChiselEnum {\n    val beq, bne = Value\n    val blt = Value(4.U)\n    val bge, bltu, bgeu = Value\n}\n// \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6253\u5370\u6bcf\u4e2aValue\u6765\u67e5\u770b\u6620\u5c04\nBranchFunct3.all.foreach(println)\n</code></pre>"},{"location":"chisel_explanation/chisel-enum/#_2","title":"\u7c7b\u578b\u8f6c\u6362","text":"<p>\u4f60\u53ef\u4ee5\u4f7f\u7528<code>.asUInt</code>\u5c06\u679a\u4e3e\u8f6c\u6362\u4e3a<code>UInt</code>\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nclass ToUInt extends RawModule {\n  val in = IO(Input(Opcode()))\n  val out = IO(Output(UInt(in.getWidth.W)))\n  out := in.asUInt\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\n// \u603b\u662f\u9700\u8981\u8fd0\u884cChisel\u6765\u67e5\u770b\u662f\u5426\u6709\u5177\u4f53\u5316\u9519\u8bef\nchisel3.docs.emitSystemVerilog(new ToUInt)\n</code></pre> <p>\u4f60\u53ef\u4ee5\u901a\u8fc7\u5c06<code>UInt</code>\u4f20\u9012\u7ed9<code>ChiselEnum</code>\u5bf9\u8c61\u7684apply\u65b9\u6cd5\uff0c\u4ece<code>UInt</code>\u8f6c\u6362\u4e3a\u679a\u4e3e\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nclass FromUInt extends Module {\n  val in = IO(Input(UInt(7.W)))\n  val out = IO(Output(Opcode()))\n  out := Opcode(in)\n}\n</code></pre> <p>\u7136\u800c\uff0c\u5982\u679c\u4f60\u4ece<code>UInt</code>\u8f6c\u6362\u4e3aEnum\u7c7b\u578b\uff0c\u800c\u8be5Enum\u7684\u503c\u4e2d\u6709\u672a\u5b9a\u4e49\u7684\u72b6\u6001 \u53ef\u80fd\u88ab<code>UInt</code>\u547d\u4e2d\uff0c\u4f60\u5c06\u770b\u5230\u7c7b\u4f3c\u5982\u4e0b\u7684\u8b66\u544a\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:passthrough\nprintln(\"```\")\n_root_.circt.stage.ChiselStage.emitCHIRRTL(new FromUInt): Unit // Suppress String output\nprintln(\"```\")\n</code></pre> <p>\uff08\u6ce8\u610f\uff0c\u7531\u4e8e\u6211\u4eec\u7684\u6587\u6863\u751f\u6210\u6d41\u7a0b\u7684\u7279\u6b8a\u6027\uff0cEnum\u7684\u540d\u79f0\u770b\u8d77\u6765\u5f88\u4e11\uff0c\u5728\u6b63\u5e38\u4f7f\u7528\u4e2d \u4f1a\u66f4\u6574\u6d01\uff09\u3002</p> <p>\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528<code>.safe</code>\u5de5\u5382\u65b9\u6cd5\u6765\u907f\u514d\u8fd9\u4e2a\u8b66\u544a\uff0c\u8be5\u65b9\u6cd5\u8fd4\u56de\u8f6c\u6362\u540e\u7684Enum\u4ee5\u53ca \u4e00\u4e2a<code>Bool</code>\uff0c\u6307\u793aEnum\u662f\u5426\u5904\u4e8e\u6709\u6548\u72b6\u6001\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nclass SafeFromUInt extends Module {\n  val in = IO(Input(UInt(7.W)))\n  val out = IO(Output(Opcode()))\n  val (value, valid) = Opcode.safe(in)\n  assert(valid, \"Enum\u72b6\u6001\u5fc5\u987b\u6709\u6548\uff0c\u5f97\u5230\u4e86%d\uff01\", in)\n  out := value\n}\n</code></pre> <p>\u73b0\u5728\u5c06\u4e0d\u4f1a\u6709\u8b66\u544a\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:passthrough\nprintln(\"```\")\n_root_.circt.stage.ChiselStage.emitCHIRRTL(new SafeFromUInt): Unit // Suppress String output\nprintln(\"```\")\n</code></pre> <p>\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528<code>suppressEnumCastWarning</code>\u6765\u6291\u5236\u8b66\u544a\u3002\u8fd9\u4e3b\u8981 \u7528\u4e8e\u4ece[[UInt]]\u8f6c\u6362\u4e3a\u5305\u542bEnum\u7684Bundle\u7c7b\u578b\uff0c \u5176\u4e2d[[UInt]]\u5df2\u77e5\u5bf9Bundle\u7c7b\u578b\u6709\u6548\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nclass MyBundle extends Bundle {\n  val addr = UInt(8.W)\n  val op = Opcode()\n}\n\nclass SuppressedFromUInt extends Module {\n  val in = IO(Input(UInt(15.W)))\n  val out = IO(Output(new MyBundle()))\n  suppressEnumCastWarning {\n    out := in.asTypeOf(new MyBundle)\n  }\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\nval (log3, _) = grabLog(_root_.circt.stage.ChiselStage.emitCHIRRTL(new SuppressedFromUInt))\nassert(log3.isEmpty)\n</code></pre>"},{"location":"chisel_explanation/chisel-enum/#_3","title":"\u6d4b\u8bd5","text":"<p>\u679a\u4e3e\u503c\u7684_\u7c7b\u578b_\u662f<code>&lt;ChiselEnum\u5bf9\u8c61&gt;.Type</code>\uff0c\u8fd9\u5bf9\u4e8e\u5c06\u503c\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570 \uff08\u6216\u4efb\u4f55\u5176\u4ed6\u9700\u8981\u7c7b\u578b\u6ce8\u89e3\u7684\u65f6\u5019\uff09\u975e\u5e38\u6709\u7528\u3002 \u5728\u679a\u4e3e\u503c\u4e0a\u8c03\u7528<code>.litValue</code>\u5c06\u8fd4\u56de\u8be5\u5bf9\u8c61\u7684\u6574\u6570\u503c\uff0c\u8868\u793a\u4e3a <code>BigInt</code>\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\ndef expectedSel(sel: AluMux1Sel.Type): Boolean = sel match {\n  case AluMux1Sel.selectRS1 =&gt; (sel.litValue == 0)\n  case AluMux1Sel.selectPC  =&gt; (sel.litValue == 1)\n  case _                    =&gt; false\n}\n</code></pre> <p>\u679a\u4e3e\u503c\u7c7b\u578b\u8fd8\u5b9a\u4e49\u4e86\u4e00\u4e9b\u7528\u4e8e\u5904\u7406<code>ChiselEnum</code>\u503c\u7684\u4fbf\u6377\u65b9\u6cd5\u3002\u4f8b\u5982\uff0c\u7ee7\u7eed\u4f7f\u7528RISC-V\u64cd\u4f5c\u7801 \u793a\u4f8b\uff0c\u53ef\u4ee5\u4f7f\u7528<code>.isOneOf</code>\u65b9\u6cd5\u8f7b\u677e\u521b\u5efa\u4e00\u4e2a\u786c\u4ef6\u4fe1\u53f7\uff0c\u8be5\u4fe1\u53f7\u4ec5\u5728LOAD/STORE\u64cd\u4f5c\u65f6 \uff08\u5f53\u679a\u4e3e\u503c\u7b49\u4e8e<code>Opcode.load</code>\u6216<code>Opcode.store</code>\u65f6\uff09\u6709\u6548\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nclass LoadStoreExample extends Module {\n  val io = IO(new Bundle {\n    val opcode = Input(Opcode())\n    val load_or_store = Output(Bool())\n  })\n  io.load_or_store := io.opcode.isOneOf(Opcode.load, Opcode.store)\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\n// \u603b\u662f\u9700\u8981\u8fd0\u884cChisel\u6765\u67e5\u770b\u662f\u5426\u6709\u5177\u4f53\u5316\u9519\u8bef\nchisel3.docs.emitSystemVerilog(new LoadStoreExample)\n</code></pre> <p><code>ChiselEnum</code>\u5bf9\u8c61\u4e0a\u5b9a\u4e49\u7684\u4e00\u4e9b\u5176\u4ed6\u6709\u7528\u65b9\u6cd5\u6709\uff1a</p> <ul> <li><code>.all</code>\uff1a\u8fd4\u56de\u679a\u4e3e\u4e2d\u7684\u679a\u4e3e\u503c</li> <li><code>.getWidth</code>\uff1a\u8fd4\u56de\u786c\u4ef6\u7c7b\u578b\u7684\u5bbd\u5ea6</li> </ul>"},{"location":"chisel_explanation/chisel-enum/#_4","title":"\u89e3\u51b3\u65b9\u6cd5","text":"<p>\u622a\u81f3Chisel v3.4.3\uff082020\u5e747\u67081\u65e5\uff09\uff0c\u503c\u7684\u5bbd\u5ea6\u603b\u662f\u88ab\u63a8\u65ad\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f60\u53ef\u4ee5\u6dfb\u52a0\u4e00\u4e2a\u989d\u5916\u7684<code>Value</code>\u6765\u5f3a\u5236\u4f7f\u7528\u6240\u9700\u7684\u5bbd\u5ea6\u3002 \u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u6dfb\u52a0\u4e86\u4e00\u4e2a\u5b57\u6bb5<code>ukn</code>\u6765\u5f3a\u5236\u5bbd\u5ea6\u4e3a3\u4f4d\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nobject StoreFunct3 extends ChiselEnum {\n    val sb, sh, sw = Value\n    val ukn = Value(7.U)\n}\n// \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6253\u5370\u6bcf\u4e2aValue\u6765\u67e5\u770b\u6620\u5c04\nStoreFunct3.all.foreach(println)\n</code></pre> <p>\u4e0d\u652f\u6301\u6709\u7b26\u53f7\u503c\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u60f3\u8981\u6709\u7b26\u53f7\u503c\uff0c\u4f60\u5fc5\u987b\u4f7f\u7528<code>.asSInt</code>\u8f6c\u6362UInt\u3002</p>"},{"location":"chisel_explanation/chisel-enum/#_5","title":"\u5176\u4ed6\u8d44\u6e90","text":"<p>ChiselEnum\u7c7b\u578b\u6bd4\u4e0a\u9762\u6240\u8ff0\u7684\u66f4\u5f3a\u5927\u3002\u5b83\u5141\u8bb8Sequence\u3001Vec\u548cBundle\u8d4b\u503c\uff0c\u4ee5\u53ca\u4f7f\u7528<code>.next</code>\u64cd\u4f5c \u6765\u5141\u8bb8\u9010\u6b65\u904d\u5386\u987a\u5e8f\u72b6\u6001\uff0c\u5e76\u4f7f\u7528<code>.isValid</code>\u6765\u68c0\u67e5\u786c\u4ef6\u503c\u662f\u5426\u662f\u6709\u6548\u7684<code>Value</code>\u3002ChiselEnum\u7684\u6e90\u4ee3\u7801\u53ef\u4ee5\u5728 \u8fd9\u91cc \u7684<code>EnumFactory</code>\u7c7b\u4e2d\u627e\u5230\u3002ChiselEnum\u64cd\u4f5c\u7684\u4f8b\u5b50\u53ef\u4ee5\u5728 \u8fd9\u91cc\u627e\u5230\u3002</p>"},{"location":"chisel_explanation/chisel-type-vs-scala-type/","title":"Chisel\u7c7b\u578b\u4e0eScala\u7c7b\u578b","text":"<p>Scala\u7f16\u8bd1\u5668\u65e0\u6cd5\u533a\u5206Chisel\u5bf9\u786c\u4ef6\u7684\u8868\u793a\uff08\u5982<code>false.B</code>\u3001<code>Reg(Bool())</code>\uff09 \u548c\u7eafChisel\u7c7b\u578b\uff08\u4f8b\u5982<code>Bool()</code>\uff09\u3002\u5f53\u671f\u671b\u786c\u4ef6\u65f6\u4f20\u9012Chisel\u7c7b\u578b\uff0c\u6216\u53cd\u4e4b\uff0c\u53ef\u80fd\u4f1a\u5f97\u5230\u8fd0\u884c\u65f6\u9519\u8bef\u3002</p>"},{"location":"chisel_explanation/chisel-type-vs-scala-type/#scalachisel","title":"Scala\u7c7b\u578b\u4e0eChisel\u7c7b\u578b\u4e0e\u786c\u4ef6","text":"<pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\nimport chisel3._\nimport circt.stage.ChiselStage\n</code></pre> <p>Data\u7684Scala\u7c7b\u578b\u7531Scala\u7f16\u8bd1\u5668\u8bc6\u522b\uff0c\u4f8b\u5982<code>Bool</code>\u3001<code>Decoupled[UInt]</code>\u6216\u4e0b\u9762\u7684<code>MyBundle</code> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass MyBundle(w: Int) extends Bundle {\n  val foo = UInt(w.W)\n  val bar = UInt(w.W)\n}\n</code></pre></p> <p><code>Data</code>\u7684Chisel\u7c7b\u578b\u662f\u4e00\u4e2aScala\u5bf9\u8c61\u3002\u5b83\u6355\u83b7\u6240\u6709\u5b9e\u9645\u5b58\u5728\u7684\u5b57\u6bb5\uff0c \u6309\u540d\u79f0\u548c\u5305\u62ec\u5bbd\u5ea6\u5728\u5185\u7684\u7c7b\u578b\u3002 \u4f8b\u5982\uff0c<code>MyBundle(3)</code>\u521b\u5efa\u4e00\u4e2a\u5177\u6709\u5b57\u6bb5<code>foo: UInt(3.W), bar: UInt(3.W))</code>\u7684Chisel\u7c7b\u578b\u3002</p> <p>\u786c\u4ef6\u662f\"\u7ed1\u5b9a\"\u5230\u53ef\u5408\u6210\u786c\u4ef6\u7684<code>Data</code>\u3002\u4f8b\u5982<code>false.B</code>\u6216<code>Reg(Bool())</code>\u3002 \u7ed1\u5b9a\u51b3\u5b9a\u4e86\u6bcf\u4e2a\u5b57\u6bb5\u7684\u5b9e\u9645\u65b9\u5411\uff0c\u5b83\u4e0d\u662fChisel\u7c7b\u578b\u7684\u5c5e\u6027\u3002</p> <p>\u5b57\u9762\u91cf\u662f\u53ef\u4ee5\u8868\u793a\u4e3a\u5b57\u9762\u503c\u7684<code>Data</code>\uff0c\u65e0\u9700\u5305\u88c5\u5728Wire\u3001Reg\u6216IO\u4e2d\u3002</p>"},{"location":"chisel_explanation/chisel-type-vs-scala-type/#chisel","title":"Chisel\u7c7b\u578b\u4e0e\u786c\u4ef6\u4e0e\u5b57\u9762\u91cf","text":"<p>\u4e0b\u9762\u7684\u4ee3\u7801\u6f14\u793a\u4e86\u5177\u6709\u76f8\u540cScala\u7c7b\u578b\uff08<code>MyBundle</code>\uff09\u7684\u5bf9\u8c61\u5982\u4f55\u5177\u6709\u4e0d\u540c\u7684\u5c5e\u6027\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3.experimental.BundleLiterals._\n\nclass MyModule(gen: () =&gt; MyBundle) extends Module {\n                                                            //   \u786c\u4ef6    \u5b57\u9762\u91cf\n    val xType:    MyBundle     = new MyBundle(3)            //    -        -\n    val dirXType: MyBundle     = Input(new MyBundle(3))     //    -        -\n    val xReg:     MyBundle     = Reg(new MyBundle(3))       //    x        -\n    val xIO:      MyBundle     = IO(Input(new MyBundle(3))) //    x        -\n    val xRegInit: MyBundle     = RegInit(xIO)               //    x        -\n    val xLit:     MyBundle     = xType.Lit(                 //    x        x\n      _.foo -&gt; 0.U(3.W),\n      _.bar -&gt; 0.U(3.W)\n    )\n    val y:        MyBundle = gen()                          //      ?          ?\n\n    // \u9700\u8981\u521d\u59cb\u5316\u6240\u6709\u786c\u4ef6\u503c\n    xReg := DontCare\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\n// \u4ec5\u7528\u4e8e\u7f16\u8bd1\u68c0\u67e5\u4e0a\u9762\u7684\u5185\u5bb9\nimport circt.stage.ChiselStage.elaborate\nelaborate(new MyModule(() =&gt; new MyBundle(3)))\n</code></pre>"},{"location":"chisel_explanation/chisel-type-vs-scala-type/#chisel-","title":"Chisel\u7c7b\u578b\u4e0e\u786c\u4ef6 -- \u7279\u5b9a\u51fd\u6570\u548c\u9519\u8bef","text":"<p><code>.asTypeOf</code>\u5bf9\u786c\u4ef6\u548cChisel\u7c7b\u578b\u90fd\u6709\u6548\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nelaborate(new Module {\n  val chiselType = new MyBundle(3)\n  val hardware = Wire(new MyBundle(3))\n  hardware := DontCare\n  val a = 0.U.asTypeOf(chiselType)\n  val b = 0.U.asTypeOf(hardware)\n})\n</code></pre> <p>\u53ea\u80fd\u5bf9\u786c\u4ef6\u4f7f\u7528<code>:=</code>\uff1a <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\n// \u8fd9\u6837\u505a...\nelaborate(new Module {\n  val hardware = Wire(new MyBundle(3))\n  hardware := DontCare\n})\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:crash\n// \u4e0d\u8981\u8fd9\u6837\u505a...\nelaborate(new Module {\n  val chiselType = new MyBundle(3)\n  chiselType := DontCare\n})\n</code></pre></p> <p>\u53ea\u80fd\u4ece\u786c\u4ef6<code>:=</code>\uff1a <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\n// \u8fd9\u6837\u505a...\nelaborate(new Module {\n  val hardware = IO(new MyBundle(3))\n  val moarHardware = Wire(new MyBundle(3))\n  moarHardware := DontCare\n  hardware := moarHardware\n})\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:crash\n// Not this...\nelaborate(new Module {\n  val hardware = IO(new MyBundle(3))\n  val chiselType = new MyBundle(3)\n  hardware := chiselType\n})\n</code></pre></p> <p>Have to pass hardware to <code>chiselTypeOf</code>: <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\n// Do this...\nelaborate(new Module {\n  val hardware = Wire(new MyBundle(3))\n  hardware := DontCare\n  val chiselType = chiselTypeOf(hardware)\n})\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:crash\n// Not this...\nelaborate(new Module {\n  val chiselType = new MyBundle(3)\n  val crash = chiselTypeOf(chiselType)\n})\n</code></pre></p> <p>Have to pass hardware to <code>*Init</code>: <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\n// Do this...\nelaborate(new Module {\n  val hardware = Wire(new MyBundle(3))\n  hardware := DontCare\n  val moarHardware = WireInit(hardware)\n})\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:crash\n// Not this...\nelaborate(new Module {\n  val crash = WireInit(new MyBundle(3))\n})\n</code></pre></p> <p>Can't pass hardware to a <code>Wire</code>, <code>Reg</code>, <code>IO</code>: <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\n// Do this...\nelaborate(new Module {\n  val hardware = Wire(new MyBundle(3))\n  hardware := DontCare\n})\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:crash\n// Not this...\nelaborate(new Module {\n  val hardware = Wire(new MyBundle(3))\n  val crash = Wire(hardware)\n})\n</code></pre></p> <p><code>.Lit</code> can only be called on Chisel type: <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\n// Do this...\nelaborate(new Module {\n  val hardwareLit = (new MyBundle(3)).Lit(\n    _.foo -&gt; 0.U,\n    _.bar -&gt; 0.U\n  )\n})\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:crash\n//Not this...\nelaborate(new Module {\n  val hardware = Wire(new MyBundle(3))\n  val crash = hardware.Lit(\n    _.foo -&gt; 0.U,\n    _.bar -&gt; 0.U\n  )\n})\n</code></pre></p> <p>Can only use a Chisel type within a <code>Bundle</code> definition: <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\n// Do this...\nelaborate(new Module {\n  val hardware = Wire(new Bundle {\n    val nested = new MyBundle(3)\n  })\n  hardware := DontCare\n})\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:crash\n// Not this...\nelaborate(new Module {\n  val crash = Wire(new Bundle {\n    val nested = Wire(new MyBundle(3))\n  })\n})\n</code></pre></p> <p>Can only call <code>directionOf</code> on Hardware: <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3.reflect.DataMirror\n\nclass Child extends Module{\n  val hardware = IO(new MyBundle(3))\n  hardware := DontCare\n  val chiselType = new MyBundle(3)\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\n// Do this...\nelaborate(new Module {\n  val child = Module(new Child())\n  child.hardware := DontCare\n  val direction = DataMirror.directionOf(child.hardware)\n})\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:crash\n// Not this...\nelaborate(new Module {\nval child = Module(new Child())\n  child.hardware := DontCare\n  val direction = DataMirror.directionOf(child.chiselType)\n})\n</code></pre></p> <p>Can call <code>specifiedDirectionOf</code> on hardware or Chisel type: <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nelaborate(new Module {\n  val child = Module(new Child())\n  child.hardware := DontCare\n  val direction0 = DataMirror.specifiedDirectionOf(child.hardware)\n  val direction1 = DataMirror.specifiedDirectionOf(child.chiselType)\n})\n</code></pre></p>"},{"location":"chisel_explanation/chisel-type-vs-scala-type/#asinstanceof-vs-astypeof-vs-chiseltypeof","title":"<code>.asInstanceOf</code> vs <code>.asTypeOf</code> vs <code>chiselTypeOf</code>","text":"<p><code>.asInstanceOf</code> is a Scala runtime cast, usually used for telling the compiler that you have more information than it can infer to convert Scala types:</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass ScalaCastingModule(gen: () =&gt; Bundle) extends Module {\n  val io = IO(Output(gen().asInstanceOf[MyBundle]))\n  io.foo := 0.U\n}\n</code></pre> <p>This works if we do indeed have more information than the compiler: <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nelaborate(new ScalaCastingModule( () =&gt; new MyBundle(3)))\n</code></pre></p> <p>But if we are wrong, we can get a Scala runtime exception: <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:crash\nclass NotMyBundle extends Bundle {val baz = Bool()}\nelaborate(new ScalaCastingModule(() =&gt; new NotMyBundle()))\n</code></pre></p> <p><code>.asTypeOf</code> is a conversion from one <code>Data</code> subclass to another. It is commonly used to assign data to all-zeros, as described in this cookbook recipe, but it can also be used (though not really recommended, as there is no checking on width matches) to convert one Chisel type to another:</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\nimport chisel3.docs.emitSystemVerilog\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nclass SimilarToMyBundle(w: Int) extends Bundle{\n  val foobar = UInt((2*w).W)\n}\n\nemitSystemVerilog(new Module {\n  val in = IO(Input(new MyBundle(3)))\n  val out = IO(Output(new SimilarToMyBundle(3)))\n\n  out := in.asTypeOf(out)\n})\n</code></pre> <p>In contrast to <code>asInstanceOf</code> and <code>asTypeOf</code>, <code>chiselTypeOf</code> is not a casting operation. It returns a Scala object which can be used as shown in the examples above to create more Chisel types and hardware with the same Chisel type as existing hardware.</p>"},{"location":"chisel_explanation/combinational-circuits/","title":"\u7ec4\u5408\u7535\u8def","text":"<p>\u5728Chisel\u4e2d\uff0c\u7535\u8def\u8868\u793a\u4e3a\u8282\u70b9\u56fe\u3002\u6bcf\u4e2a\u8282\u70b9\u662f\u4e00\u4e2a\u786c\u4ef6\u8fd0\u7b97\u7b26\uff0c\u5177\u6709\u96f6\u4e2a\u6216\u591a\u4e2a\u8f93\u5165\u5e76\u9a71\u52a8\u4e00\u4e2a\u8f93\u51fa\u3002\u524d\u9762\u4ecb\u7ecd\u7684\u5b57\u9762\u91cf\u662f\u4e00\u79cd\u7b80\u5316\u7684\u8282\u70b9\uff0c\u5b83\u6ca1\u6709\u8f93\u5165\u5e76\u5728\u5176\u8f93\u51fa\u4e0a\u9a71\u52a8\u4e00\u4e2a\u5e38\u91cf\u503c\u3002\u521b\u5efa\u548c\u8fde\u63a5\u8282\u70b9\u7684\u4e00\u79cd\u65b9\u5f0f\u662f\u4f7f\u7528\u6587\u672c\u8868\u8fbe\u5f0f\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u8868\u8fbe\u5f0f\u8868\u793a\u4e00\u4e2a\u7b80\u5355\u7684\u7ec4\u5408\u903b\u8f91\u7535\u8def\uff1a</p> <pre><code>(a &amp; b) | (~c &amp; d)\n</code></pre> <p>\u8fd9\u79cd\u8bed\u6cd5\u5e94\u8be5\u770b\u8d77\u6765\u5f88\u719f\u6089\uff0c\u5176\u4e2d<code>&amp;</code>\u548c<code>|</code>\u5206\u522b\u4ee3\u8868\u6309\u4f4d\u4e0e\u548c\u6216\uff0c\u800c<code>~</code>\u4ee3\u8868\u6309\u4f4d\u975e\u3002\u540d\u79f0<code>a</code>\u5230<code>d</code>\u4ee3\u8868\u67d0\u79cd\uff08\u672a\u6307\u5b9a\uff09\u5bbd\u5ea6\u7684\u547d\u540d\u7ebf\u7f51\u3002</p> <p>\u4efb\u4f55\u7b80\u5355\u7684\u8868\u8fbe\u5f0f\u90fd\u53ef\u4ee5\u76f4\u63a5\u8f6c\u6362\u4e3a\u7535\u8def\u6811\uff0c\u547d\u540d\u7ebf\u7f51\u4f4d\u4e8e\u53f6\u5b50\u4e0a\uff0c\u8fd0\u7b97\u7b26\u5f62\u6210\u5185\u90e8\u8282\u70b9\u3002\u8868\u8fbe\u5f0f\u7684\u6700\u7ec8\u7535\u8def\u8f93\u51fa\u53d6\u81ea\u6811\u6839\u5904\u7684\u8fd0\u7b97\u7b26\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u662f\u6309\u4f4d\u6216\u3002</p> <p>\u7b80\u5355\u8868\u8fbe\u5f0f\u53ef\u4ee5\u6784\u5efa\u6811\u5f62\u7535\u8def\uff0c\u4f46\u8981\u6784\u5efa\u4efb\u610f\u6709\u5411\u65e0\u73af\u56fe\uff08DAG\uff09\u5f62\u72b6\u7684\u7535\u8def\uff0c\u6211\u4eec\u9700\u8981\u63cf\u8ff0\u6247\u51fa\u3002\u5728Chisel\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u547d\u540d\u4e00\u4e2a\u4fdd\u5b58\u5b50\u8868\u8fbe\u5f0f\u7684\u7ebf\u7f51\u6765\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5728\u540e\u7eed\u8868\u8fbe\u5f0f\u4e2d\u591a\u6b21\u5f15\u7528\u8fd9\u4e2a\u7ebf\u7f51\u3002\u6211\u4eec\u901a\u8fc7\u58f0\u660e\u4e00\u4e2a\u53d8\u91cf\u6765\u5728Chisel\u4e2d\u547d\u540d\u4e00\u4e2a\u7ebf\u7f51\u3002\u4f8b\u5982\uff0c\u8003\u8651\u9009\u62e9\u8868\u8fbe\u5f0f\uff0c\u5b83\u5728\u4e0b\u9762\u7684\u591a\u8def\u590d\u7528\u5668\u63cf\u8ff0\u4e2d\u88ab\u4f7f\u7528\u4e86\u4e24\u6b21\uff1a <pre><code>val sel = a | b\nval out = (sel &amp; in1) | (~sel &amp; in0)\n</code></pre></p> <p>\u5173\u952e\u5b57<code>val</code>\u662fScala\u7684\u4e00\u90e8\u5206\uff0c\u7528\u4e8e\u547d\u540d\u4e0d\u4f1a\u6539\u53d8\u503c\u7684\u53d8\u91cf\u3002\u8fd9\u91cc\u7528\u5b83\u6765\u547d\u540dChisel\u7ebf\u7f51<code>sel</code>\uff0c\u5b83\u4fdd\u5b58\u7b2c\u4e00\u4e2a\u6309\u4f4d\u6216\u8fd0\u7b97\u7b26\u7684\u8f93\u51fa\uff0c\u4ee5\u4fbf\u5728\u7b2c\u4e8c\u4e2a\u8868\u8fbe\u5f0f\u4e2d\u591a\u6b21\u4f7f\u7528\u8fd9\u4e2a\u8f93\u51fa\u3002</p>"},{"location":"chisel_explanation/combinational-circuits/#_2","title":"\u7ebf\u7f51","text":"<p>Chisel\u8fd8\u652f\u6301\u7ebf\u7f51\u4f5c\u4e3a\u786c\u4ef6\u8282\u70b9\uff0c\u53ef\u4ee5\u7ed9\u5b83\u4eec\u8d4b\u503c\u6216\u8fde\u63a5\u5176\u4ed6\u8282\u70b9\u3002</p> <pre><code>val myNode = Wire(UInt(8.W))\nwhen (isReady) {\n  myNode := 255.U\n} .otherwise {\n  myNode := 0.U\n}\n</code></pre> <pre><code>val myNode = Wire(UInt(8.W))\nwhen (input &gt; 128.U) {\n  myNode := 255.U\n} .elsewhen (input &gt; 64.U) {\n  myNode := 1.U\n} .otherwise {\n  myNode := 0.U\n}\n</code></pre> <p>\u6ce8\u610f\uff0c\u5bf9Wire\u7684\u6700\u540e\u4e00\u6b21\u8fde\u63a5\u4f1a\u751f\u6548\u3002\u4f8b\u5982\uff0c\u4ee5\u4e0b\u4e24\u4e2aChisel\u7535\u8def\u662f\u7b49\u6548\u7684\uff1a</p> <pre><code>val myNode = Wire(UInt(8.W))\nmyNode := 10.U\nmyNode := 0.U\n</code></pre> <pre><code>val myNode = Wire(UInt(8.W))\nmyNode := 0.U\n</code></pre>"},{"location":"chisel_explanation/connectable/","title":"\u53ef\u8fde\u63a5\u8fd0\u7b97\u7b26","text":""},{"location":"chisel_explanation/connectable/#_1","title":"\u76ee\u5f55","text":"<ul> <li>\u672f\u8bed</li> <li>\u6982\u8ff0</li> <li>\u5bf9\u9f50\uff1a\u7ffb\u8f6c\u4e0e\u5bf9\u9f50</li> <li>\u8f93\u5165/\u8f93\u51fa</li> <li>\u8fde\u63a5\u5177\u6709\u5b8c\u5168\u5bf9\u9f50\u6210\u5458\u7684\u7ec4\u4ef6</li> <li>\u5355\u5411\u8fde\u63a5\u8fd0\u7b97\u7b26 (<code>:=</code>)</li> <li>\u8fde\u63a5\u5177\u6709\u6df7\u5408\u5bf9\u9f50\u6210\u5458\u7684\u7ec4\u4ef6</li> <li>\u53cc\u5411\u8fde\u63a5\u8fd0\u7b97\u7b26 (<code>:&lt;&gt;=</code>)</li> <li>\u7aef\u53e3\u65b9\u5411\u8ba1\u7b97\u4e0e\u8fde\u63a5\u65b9\u5411\u8ba1\u7b97</li> <li>\u5bf9\u9f50\u8fde\u63a5\u8fd0\u7b97\u7b26 (<code>:&lt;=</code>)</li> <li>\u7ffb\u8f6c\u8fde\u63a5\u8fd0\u7b97\u7b26 (<code>:&gt;=</code>)</li> <li>\u5f3a\u5236\u5355\u5411\u8fde\u63a5\u8fd0\u7b97\u7b26 (<code>:#=</code>)</li> <li>Connectable</li> <li>\u8fde\u63a5Records</li> <li>\u5e26\u6709\u8c41\u514d\u8fde\u63a5\u7684\u9ed8\u8ba4\u503c</li> <li>\u8fde\u63a5\u5177\u6709\u53ef\u9009\u6210\u5458\u7684\u7c7b\u578b</li> <li>\u59cb\u7ec8\u5ffd\u7565\u989d\u5916\u6210\u5458\uff08\u90e8\u5206\u8fde\u63a5\u8fd0\u7b97\u7b26\uff09</li> <li>\u8fde\u63a5\u5177\u6709\u4e0d\u540c\u5bbd\u5ea6\u7684\u7ec4\u4ef6</li> <li>\u8fde\u63a5\u7ed3\u6784\u4e0d\u7b49\u4ef7\u7684Chisel\u7c7b\u578b\u7684\u6280\u672f</li> <li>\u8fde\u63a5\u540c\u4e00\u8d85\u7c7b\u578b\u7684\u4e0d\u540c\u5b50\u7c7b\u578b\uff0c\u5177\u6709\u51b2\u7a81\u540d\u79f0</li> <li>\u901a\u8fc7\u8c41\u514d\u989d\u5916\u6210\u5458\u8fde\u63a5\u5b50\u7c7b\u578b\u5230\u8d85\u7c7b\u578b</li> <li>\u8fde\u63a5\u4e0d\u540c\u7684\u5b50\u7c7b\u578b</li> <li>\u5e38\u89c1\u95ee\u9898</li> </ul>"},{"location":"chisel_explanation/connectable/#_2","title":"\u672f\u8bed","text":"<ul> <li>\"Chisel\u7c7b\u578b\" - \u4e00\u4e2a\u672a\u7ed1\u5b9a\u5230\u786c\u4ef6\u7684 <code>Data</code>\uff0c\u5373\u4e0d\u662f\u4e00\u4e2a\u7ec4\u4ef6\u3002\uff08\u66f4\u591a\u8be6\u60c5\u5728\u6b64\uff09\u3002</li> <li>\u4f8b\u5982\uff0c<code>UInt(3.W)</code>\u3001<code>new Bundle {..}</code>\u3001<code>Vec(3, SInt(2.W))</code> \u90fd\u662fChisel\u7c7b\u578b</li> <li>\"\u7ec4\u4ef6\" - \u4e00\u4e2a\u7ed1\u5b9a\u5230\u786c\u4ef6\u7684 <code>Data</code>\uff08<code>IO</code>\u3001<code>Reg</code>\u3001<code>Wire</code> \u7b49\uff09</li> <li>\u4f8b\u5982\uff0c<code>Wire(UInt(3.W))</code> \u662f\u4e00\u4e2a\u7ec4\u4ef6\uff0c\u5176Chisel\u7c7b\u578b\u662f <code>UInt(3.W)</code></li> <li><code>Aggregate</code> - \u5305\u542b\u5176\u4ed6Chisel\u7c7b\u578b\u6216\u7ec4\u4ef6\u7684Chisel\u7c7b\u578b\u6216\u7ec4\u4ef6\uff08\u5373 <code>Vec</code>\u3001<code>Record</code> \u6216 <code>Bundle</code>\uff09</li> <li><code>Element</code> - \u4e0d\u5305\u542b\u5176\u4ed6Chisel\u7c7b\u578b\u6216\u7ec4\u4ef6\u7684Chisel\u7c7b\u578b\u6216\u7ec4\u4ef6\uff08\u4f8b\u5982 <code>UInt</code>\u3001<code>SInt</code>\u3001<code>Clock</code>\u3001<code>Bool</code> \u7b49\uff09</li> <li>\"\u6210\u5458\" - Chisel\u7c7b\u578b\u6216\u7ec4\u4ef6\uff0c\u6216\u5176\u4efb\u4f55\u5b50\u9879\uff08\u53ef\u4ee5\u662f <code>Aggregate</code> \u6216 <code>Element</code>\uff09</li> <li>\u4f8b\u5982\uff0c<code>Vec(3, UInt(2.W))(0)</code> \u662f\u7236 <code>Vec</code> Chisel\u7c7b\u578b\u7684\u6210\u5458</li> <li>\u4f8b\u5982\uff0c<code>Wire(Vec(3, UInt(2.W)))(0)</code> \u662f\u7236 <code>Wire</code> \u7ec4\u4ef6\u7684\u6210\u5458</li> <li>\u4f8b\u5982\uff0c<code>IO(Decoupled(Bool)).ready</code> \u662f\u7236 <code>IO</code> \u7ec4\u4ef6\u7684\u6210\u5458</li> <li>\"\u76f8\u5bf9\u5bf9\u9f50\" - \u540c\u4e00\u7ec4\u4ef6\u6216Chisel\u7c7b\u578b\u7684\u4e24\u4e2a\u6210\u5458\u662f\u5426\u76f8\u5bf9\u4e8e\u5f7c\u6b64\u5bf9\u9f50/\u7ffb\u8f6c</li> <li>\u8be6\u7ec6\u5b9a\u4e49\u89c1\u4e0b\u6587</li> <li>\"\u7ed3\u6784\u7c7b\u578b\u68c0\u67e5\" - \u5982\u679cChisel\u7c7b\u578b <code>A</code> \u548cChisel\u7c7b\u578b <code>B</code> \u5177\u6709\u5339\u914d\u7684bundle\u5b57\u6bb5\u540d\u79f0\u548c\u7c7b\u578b\uff08<code>Record</code> vs <code>Vector</code> vs <code>Element</code>\uff09\uff0c\u63a2\u6d4b\u4fee\u9970\u7b26\uff08\u63a2\u6d4bvs\u975e\u63a2\u6d4b\uff09\uff0c\u5411\u91cf\u5927\u5c0f\uff0c<code>Element</code> \u7c7b\u578b\uff08UInt/SInt/Bool/Clock\uff09\uff0c\u5219 <code>A</code> \u5728\u7ed3\u6784\u4e0a\u7b49\u4ef7\u4e8e <code>B</code></li> <li>\u5ffd\u7565\u76f8\u5bf9\u5bf9\u9f50\uff08\u7ffb\u8f6c\u6027\uff09</li> <li>\"\u5bf9\u9f50\u7c7b\u578b\u68c0\u67e5\" - \u5982\u679cChisel\u7c7b\u578b <code>A</code> \u7684\u6bcf\u4e2a\u6210\u5458\u76f8\u5bf9\u4e8e <code>A</code> \u7684\u76f8\u5bf9\u5bf9\u9f50\u4e0eChisel\u7c7b\u578b <code>B</code> \u7684\u7ed3\u6784\u4e0a\u5bf9\u5e94\u6210\u5458\u76f8\u5bf9\u4e8e <code>B</code> \u7684\u76f8\u5bf9\u5bf9\u9f50\u76f8\u540c\uff0c\u5219Chisel\u7c7b\u578b <code>A</code> \u4e0e\u53e6\u4e00\u4e2aChisel\u7c7b\u578b <code>B</code> \u5728\u5bf9\u9f50\u4e0a\u5339\u914d\u3002</li> </ul>"},{"location":"chisel_explanation/connectable/#_3","title":"\u6982\u8ff0","text":"<p><code>Connectable</code> \u8fd0\u7b97\u7b26\u662f\u8fde\u63a5Chisel\u786c\u4ef6\u7ec4\u4ef6\u7684\u6807\u51c6\u65b9\u5f0f\u3002</p> <p>\u6ce8\u610f\uff1a\u6709\u5173\u5148\u524d\u8fd0\u7b97\u7b26\u8bed\u4e49\u7684\u63cf\u8ff0\uff0c\u8bf7\u53c2\u89c1<code>\u8fde\u63a5\u8fd0\u7b97\u7b26</code>\u3002</p> <p>\u6240\u6709\u8fde\u63a5\u8fd0\u7b97\u7b26\u90fd\u8981\u6c42\u4e24\u4e2a\u786c\u4ef6\u7ec4\u4ef6\uff08\u6d88\u8d39\u8005\u548c\u751f\u4ea7\u8005\uff09\u5728\u7ed3\u6784\u4e0a\u7c7b\u578b\u7b49\u4ef7\u3002</p> <p>\u7ed3\u6784\u7c7b\u578b\u7b49\u4ef7\u89c4\u5219\u7684\u4e00\u4e2a\u4f8b\u5916\u662f\u4f7f\u7528 <code>Connectable</code> \u673a\u5236\uff0c\u8be6\u7ec6\u8bf4\u660e\u5728\u672c\u6587\u6863\u672b\u5c3e\u7684\u6b64\u90e8\u5206\u3002</p> <p>\u805a\u5408\uff08<code>Record</code>\u3001<code>Vec</code>\u3001<code>Bundle</code>\uff09Chisel\u7c7b\u578b\u53ef\u4ee5\u5305\u542b\u76f8\u5bf9\u4e8e\u5f7c\u6b64\u7ffb\u8f6c\u7684\u6570\u636e\u6210\u5458\u3002 \u7531\u4e8e\u8fd9\u4e00\u70b9\uff0c\u5728\u4e24\u4e2aChisel\u7ec4\u4ef6\u4e4b\u95f4\u6709\u8bb8\u591a\u671f\u671b\u7684\u8fde\u63a5\u884c\u4e3a\u3002 \u4ee5\u4e0b\u662fChisel\u8fde\u63a5\u8fd0\u7b97\u7b26\uff0c\u5728\u6d88\u8d39\u8005 <code>c</code> \u548c\u751f\u4ea7\u8005 <code>p</code> \u4e4b\u95f4\uff1a  * <code>c := p</code>\uff08\u5355\u5411\uff09\uff1a\u5c06\u6240\u6709 <code>p</code> \u6210\u5458\u8fde\u63a5\u5230 <code>c</code>\uff1b\u8981\u6c42 <code>c</code> \u548c <code>p</code> \u6ca1\u6709\u4efb\u4f55\u7ffb\u8f6c\u6210\u5458  * <code>c :#= p</code>\uff08\u5f3a\u5236\u5355\u5411\uff09\uff1a\u5c06\u6240\u6709 <code>p</code> \u6210\u5458\u8fde\u63a5\u5230 <code>c</code>\uff1b\u65e0\u8bba\u5bf9\u9f50\u5982\u4f55  * <code>c :&lt;= p</code>\uff08\u5bf9\u9f50\u65b9\u5411\uff09\uff1a\u4ece <code>p</code> \u8fde\u63a5\u6240\u6709\u5bf9\u9f50\uff08\u975e\u7ffb\u8f6c\uff09\u7684 <code>c</code> \u6210\u5458  * <code>c :&gt;= p</code>\uff08\u7ffb\u8f6c\u65b9\u5411\uff09\uff1a\u4ece <code>c</code> \u8fde\u63a5\u6240\u6709\u7ffb\u8f6c\u7684 <code>p</code> \u6210\u5458  * <code>c :&lt;&gt;= p</code>\uff08\u53cc\u5411\u8fd0\u7b97\u7b26\uff09\uff1a\u4ece <code>p</code> \u8fde\u63a5\u6240\u6709\u5bf9\u9f50\u7684 <code>c</code> \u6210\u5458\uff1b\u4ece <code>c</code> \u8fde\u63a5\u6240\u6709\u7ffb\u8f6c\u7684 <code>p</code> \u6210\u5458</p> <p>\u8fd9\u4e9b\u8fd0\u7b97\u7b26\u53ef\u80fd\u770b\u8d77\u6765\u662f\u4e00\u7ec4\u968f\u673a\u7684\u7b26\u53f7\uff1b\u4f46\u662f\uff0c\u8fd0\u7b97\u7b26\u4e4b\u95f4\u7684\u5b57\u7b26\u662f\u4e00\u81f4\u7684\uff0c\u5e76\u4e14\u81ea\u63cf\u8ff0\u6bcf\u4e2a\u8fd0\u7b97\u7b26\u7684\u8bed\u4e49\uff1a  * <code>:</code> \u59cb\u7ec8\u8868\u793a\u6d88\u8d39\u8005\uff0c\u6216\u8fd0\u7b97\u7b26\u7684\u5de6\u4fa7\u3002  * <code>=</code> \u59cb\u7ec8\u8868\u793a\u751f\u4ea7\u8005\uff0c\u6216\u8fd0\u7b97\u7b26\u7684\u53f3\u4fa7\u3002    * \u56e0\u6b64\uff0c<code>c := p</code> \u8fde\u63a5\u6d88\u8d39\u8005\uff08<code>c</code>\uff09\u548c\u751f\u4ea7\u8005\uff08<code>p</code>\uff09\u3002  * <code>&lt;</code> \u59cb\u7ec8\u8868\u793a\u4e00\u4e9b\u6210\u5458\u5c06\u4ece\u751f\u4ea7\u8005\u9a71\u52a8\u5230\u6d88\u8d39\u8005\uff0c\u6216\u4ece\u53f3\u5230\u5de6\u3002    * \u56e0\u6b64\uff0c<code>c :&lt;= p</code> \u5c06\u751f\u4ea7\u8005\uff08<code>p</code>\uff09\u4e2d\u7684\u6210\u5458\u9a71\u52a8\u5230\u6d88\u8d39\u8005\uff08<code>c</code>\uff09\u4e2d\u7684\u6210\u5458\u3002  * <code>&gt;</code> \u59cb\u7ec8\u8868\u793a\u4e00\u4e9b\u4fe1\u53f7\u5c06\u4ece\u6d88\u8d39\u8005\u9a71\u52a8\u5230\u751f\u4ea7\u8005\uff0c\u6216\u4ece\u5de6\u5230\u53f3\u3002    * \u56e0\u6b64\uff0c<code>c :&gt;= p</code> \u5c06\u6d88\u8d39\u8005\uff08<code>c</code>\uff09\u4e2d\u7684\u6210\u5458\u9a71\u52a8\u5230\u751f\u4ea7\u8005\uff08<code>p</code>\uff09\u4e2d\u7684\u6210\u5458\u3002    * \u56e0\u6b64\uff0c<code>c :&lt;&gt;= p</code> \u65e2\u5c06\u6210\u5458\u4ece <code>p</code> \u9a71\u52a8\u5230 <code>c</code>\uff0c\u53c8\u5c06\u6210\u5458\u4ece <code>c</code> \u9a71\u52a8\u5230 <code>p</code>\u3002  * <code>#</code> \u59cb\u7ec8\u8868\u793a\u5ffd\u7565\u6210\u5458\u5bf9\u9f50\u5e76\u4ece\u751f\u4ea7\u8005\u9a71\u52a8\u5230\u6d88\u8d39\u8005\uff0c\u6216\u4ece\u53f3\u5230\u5de6\u3002    * \u56e0\u6b64\uff0c<code>c :#= p</code> \u59cb\u7ec8\u5c06\u6210\u5458\u4ece <code>p</code> \u9a71\u52a8\u5230 <code>c</code> \u800c\u5ffd\u7565\u65b9\u5411\u3002</p> <p>\u6ce8\u610f\uff1a\u6b64\u5916\uff0c\u4ee5 <code>=</code> \u7ed3\u5c3e\u7684\u8fd0\u7b97\u7b26\u5177\u6709\u8d4b\u503c\u4f18\u5148\u7ea7\uff0c\u8fd9\u610f\u5473\u7740 <code>x :&lt;&gt;= y + z</code> \u5c06\u8f6c\u6362\u4e3a <code>x :&lt;&gt;= (y + z)</code>\uff0c\u800c\u4e0d\u662f <code>(x :&lt;&gt;= y) + z</code>\u3002 \u8fd9\u5bf9\u4e8e <code>&lt;&gt;</code> \u8fd0\u7b97\u7b26\u6765\u8bf4\u4e0d\u662f\u771f\u7684\uff0c\u8fd9\u662f\u7528\u6237\u7684\u4e00\u4e2a\u5c0f\u75db\u70b9\u3002</p>"},{"location":"chisel_explanation/connectable/#_4","title":"\u5bf9\u9f50\uff1a\u7ffb\u8f6c\u4e0e\u5bf9\u9f50","text":"<p>\u6210\u5458\u7684\u5bf9\u9f50\u662f\u4e00\u4e2a\u76f8\u5bf9\u5c5e\u6027\uff1a\u6210\u5458\u76f8\u5bf9\u4e8e\u540c\u4e00\u7ec4\u4ef6\u6216Chisel\u7c7b\u578b\u7684\u53e6\u4e00\u4e2a\u6210\u5458\u662f\u5bf9\u9f50/\u7ffb\u8f6c\u7684\u3002 \u56e0\u6b64\uff0c\u5fc5\u987b\u59cb\u7ec8\u8bf4\u660e\u6210\u5458\u662f\u5426\u76f8\u5bf9\u4e8e\u8be5\u7c7b\u578b\u7684\u53e6\u4e00\u4e2a\u6210\u5458\uff08\u7236\u7ea7\u3001\u5144\u5f1f\u3001\u5b50\u7ea7\u7b49\uff09\u7ffb\u8f6c/\u5bf9\u9f50\u3002</p> <p>\u6211\u4eec\u4f7f\u7528\u4ee5\u4e0b\u975e\u5d4c\u5957bundle <code>Parent</code> \u7684\u793a\u4f8b\uff0c\u8ba9\u6211\u4eec\u9648\u8ff0 <code>p</code> \u6210\u5458\u4e4b\u95f4\u7684\u6240\u6709\u5bf9\u9f50\u5173\u7cfb\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3._\nclass Parent extends Bundle {\n  val alignedChild = UInt(32.W)\n  val flippedChild = Flipped(UInt(32.W))\n}\nclass MyModule0 extends Module {\n  val p = Wire(new Parent)\n}\n</code></pre> <p>\u9996\u5148\uff0c\u6bcf\u4e2a\u6210\u5458\u603b\u662f\u4e0e\u81ea\u8eab\u5bf9\u9f50\uff1a  * <code>p</code> \u76f8\u5bf9\u4e8e <code>p</code> \u662f\u5bf9\u9f50\u7684  * <code>p.alignedChild</code> \u76f8\u5bf9\u4e8e <code>p.alignedChild</code> \u662f\u5bf9\u9f50\u7684  * <code>p.flippedChild</code> \u76f8\u5bf9\u4e8e <code>p.flippedChild</code> \u662f\u5bf9\u9f50\u7684</p> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5217\u51fa\u6240\u6709\u7236/\u5b50\u5173\u7cfb\u3002 \u56e0\u4e3a <code>flippedChild</code> \u5b57\u6bb5\u662f <code>Flipped</code>\uff0c\u5b83\u6539\u53d8\u4e86\u76f8\u5bf9\u4e8e\u5176\u7236\u7ea7\u7684\u5bf9\u9f50\u65b9\u5f0f\u3002  * <code>p</code> \u76f8\u5bf9\u4e8e <code>p.alignedChild</code> \u662f\u5bf9\u9f50\u7684  * <code>p</code> \u76f8\u5bf9\u4e8e <code>p.flippedChild</code> \u662f\u7ffb\u8f6c\u7684</p> <p>\u6700\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5217\u51fa\u6240\u6709\u5144\u5f1f\u5173\u7cfb\uff1a  * <code>p.alignedChild</code> \u76f8\u5bf9\u4e8e <code>p.flippedChild</code> \u662f\u7ffb\u8f6c\u7684</p> <p>\u4e0b\u4e00\u4e2a\u793a\u4f8b\u6709\u4e00\u4e2a\u5d4c\u5957bundle <code>GrandParent</code>\uff0c\u5b83\u5b9e\u4f8b\u5316\u4e86\u4e00\u4e2a\u5bf9\u9f50\u7684 <code>Parent</code> \u5b57\u6bb5\u548c\u7ffb\u8f6c\u7684 <code>Parent</code> \u5b57\u6bb5\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3._\nclass GrandParent extends Bundle {\n  val alignedParent = new Parent\n  val flippedParent = Flipped(new Parent)\n}\nclass MyModule1 extends Module {\n  val g = Wire(new GrandParent)\n}\n</code></pre> <p>\u8003\u8651\u4ee5\u4e0b\u7956\u7236\u6bcd\u548c\u5b59\u5b50\u4e4b\u95f4\u7684\u5bf9\u9f50\u5173\u7cfb\u3002 \u5947\u6570\u4e2a\u7ffb\u8f6c\u8868\u793a\u7ffb\u8f6c\u5173\u7cfb\uff1b\u5076\u6570\u4e2a\u7ffb\u8f6c\u8868\u793a\u5bf9\u9f50\u5173\u7cfb\u3002  * <code>g</code> \u76f8\u5bf9\u4e8e <code>g.flippedParent.flippedChild</code> \u662f\u5bf9\u9f50\u7684  * <code>g</code> \u76f8\u5bf9\u4e8e <code>g.alignedParent.alignedChild</code> \u662f\u5bf9\u9f50\u7684  * <code>g</code> \u76f8\u5bf9\u4e8e <code>g.flippedParent.alignedChild</code> \u662f\u7ffb\u8f6c\u7684  * <code>g</code> \u76f8\u5bf9\u4e8e <code>g.alignedParent.flippedChild</code> \u662f\u7ffb\u8f6c\u7684</p> <p>\u8003\u8651\u4ee5\u4e0b\u4ece <code>g.alignedParent</code> \u548c <code>g.flippedParent</code> \u5f00\u59cb\u7684\u5bf9\u9f50\u5173\u7cfb\u3002 \u6ce8\u610f\uff0c<code>g.alignedParent</code> \u76f8\u5bf9\u4e8e <code>g</code> \u662f\u5bf9\u9f50\u8fd8\u662f\u7ffb\u8f6c\u5bf9 <code>g.alignedParent</code> \u548c <code>g.alignedParent.alignedChild</code> \u4e4b\u95f4\u7684\u5bf9\u9f50/\u7ffb\u8f6c\u5173\u7cfb\u6ca1\u6709\u5f71\u54cd\uff0c\u56e0\u4e3a\u5bf9\u9f50\u4ec5\u76f8\u5bf9\u4e8e\u6240\u8ba8\u8bba\u7684\u4e24\u4e2a\u6210\u5458\uff01\uff1a  * <code>g.alignedParent</code> \u76f8\u5bf9\u4e8e <code>g.alignedParent.alignedChild</code> \u662f\u5bf9\u9f50\u7684  * <code>g.flippedParent</code> \u76f8\u5bf9\u4e8e <code>g.flippedParent.alignedChild</code> \u662f\u5bf9\u9f50\u7684  * <code>g.alignedParent</code> \u76f8\u5bf9\u4e8e <code>g.alignedParent.flippedChild</code> \u662f\u7ffb\u8f6c\u7684  * <code>g.flippedParent</code> \u76f8\u5bf9\u4e8e <code>g.flippedParent.flippedChild</code> \u662f\u7ffb\u8f6c\u7684</p> <p>\u603b\u4e4b\uff0c\u6210\u5458\u76f8\u5bf9\u4e8e\u786c\u4ef6\u7ec4\u4ef6\u7684\u53e6\u4e00\u4e2a\u6210\u5458\u662f\u5bf9\u9f50\u6216\u7ffb\u8f6c\u7684\u3002 \u8fd9\u610f\u5473\u7740\u786e\u5b9a\u4efb\u4f55\u8fd0\u7b97\u7b26\u884c\u4e3a\u6240\u9700\u7684\u4ec5\u662f\u6d88\u8d39\u8005/\u751f\u4ea7\u8005\u7684\u7c7b\u578b\u3002 \u6d88\u8d39\u8005/\u751f\u4ea7\u8005\u662f\u5426\u662f\u66f4\u5927bundle\u7684\u6210\u5458\u65e0\u5173\u7d27\u8981\uff1b\u4f60\u53ea\u9700\u8981\u77e5\u9053\u6d88\u8d39\u8005/\u751f\u4ea7\u8005\u7684\u7c7b\u578b\u3002</p>"},{"location":"chisel_explanation/connectable/#_5","title":"\u8f93\u5165/\u8f93\u51fa","text":"<p><code>Input(gen)</code>/<code>Output(gen)</code> \u662f\u5f3a\u5236\u8fd0\u7b97\u7b26\u3002 \u5b83\u4eec\u6267\u884c\u4e24\u4e2a\u529f\u80fd\uff1a(1)\u521b\u5efa\u4e00\u4e2a\u65b0\u7684Chisel\u7c7b\u578b\uff0c\u5176\u4e2d\u6240\u6709\u9012\u5f52\u5b50\u6210\u5458\u7684\u7ffb\u8f6c\u90fd\u88ab\u79fb\u9664\uff08\u4ecd\u7136\u5728\u7ed3\u6784\u4e0a\u7b49\u4ef7\u4e8e <code>gen</code> \u4f46\u4e0d\u518d\u5728\u5bf9\u9f50\u7c7b\u578b\u4e0a\u7b49\u4ef7\uff09\uff0c\u4ee5\u53ca(2)\u5982\u679c\u662f <code>Input</code> \u5219\u5e94\u7528 <code>Flipped</code>\uff0c\u5982\u679c\u662f <code>Output</code> \u5219\u4fdd\u6301\u5bf9\u9f50\uff08\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\uff09\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8c61\u4e00\u4e2a\u540d\u4e3a <code>cloneChiselTypeButStripAllFlips</code> \u7684\u51fd\u6570\uff0c\u90a3\u4e48 <code>Input(gen)</code> \u5728\u7ed3\u6784\u548c\u5bf9\u9f50\u7c7b\u578b\u4e0a\u7b49\u4ef7\u4e8e <code>Flipped(cloneChiselTypeButStripAllFlips(gen))</code>\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u5982\u679c <code>gen</code> \u662f\u975e\u805a\u5408\u7684\uff0c\u90a3\u4e48 <code>Input(nonAggregateGen)</code> \u7b49\u4ef7\u4e8e <code>Flipped(nonAggregateGen)</code>\u3002</p> <p>\u672a\u6765\u7684\u5de5\u4f5c\u5c06\u91cd\u6784\u8fd9\u4e9b\u539f\u8bed\u5411\u7528\u6237\u66b4\u9732\u7684\u65b9\u5f0f\uff0c\u4f7fChisel\u7684\u7c7b\u578b\u7cfb\u7edf\u66f4\u52a0\u76f4\u89c2\u3002 \u89c1 [https://github.com/chipsalliance/chisel3/issues/2643]\u3002</p> <p>\u8003\u8651\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u770b\u4ee5\u4e0b\u793a\u4f8b\uff0c\u5e76\u8be6\u7ec6\u8bf4\u660e\u6210\u5458\u7684\u76f8\u5bf9\u5bf9\u9f50\u5173\u7cfb\u3002</p> <p>\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c\u4e8e <code>Parent</code> \u7684\u793a\u4f8b\uff0c\u4f46\u4f7f\u7528 <code>Input/Output</code> \u800c\u4e0d\u662f <code>Flipped</code>\u3002 \u56e0\u4e3a <code>alignedChild</code> \u548c <code>flippedChild</code> \u662f\u975e\u805a\u5408\u7684\uff0c\u6240\u4ee5 <code>Input</code> \u57fa\u672c\u4e0a\u5c31\u662f\u4e00\u4e2a <code>Flipped</code>\uff0c\u56e0\u6b64\u5bf9\u9f50\u65b9\u5f0f\u4e0e\u4e4b\u524d\u7684 <code>Parent</code> \u793a\u4f8b\u76f8\u6bd4\u6ca1\u6709\u53d8\u5316\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3._\nclass ParentWithOutputInput extends Bundle {\n  val alignedCoerced = Output(UInt(32.W)) // \u7b49\u540c\u4e8e UInt(32.W)\n  val flippedCoerced = Input(UInt(32.W))  // \u7b49\u540c\u4e8e Flipped(UInt(32.W))\n}\nclass MyModule2 extends Module {\n  val p = Wire(new ParentWithOutputInput)\n}\n</code></pre> <p>\u5bf9\u9f50\u5173\u7cfb\u4e0e\u4e4b\u524d\u7684 <code>Parent</code> \u793a\u4f8b\u76f8\u540c\uff1a  * <code>p</code> \u76f8\u5bf9\u4e8e <code>p</code> \u662f\u5bf9\u9f50\u7684  * <code>p.alignedCoerced</code> \u76f8\u5bf9\u4e8e <code>p.alignedCoerced</code> \u662f\u5bf9\u9f50\u7684  * <code>p.flippedCoerced</code> \u76f8\u5bf9\u4e8e <code>p.flippedCoerced</code> \u662f\u5bf9\u9f50\u7684  * <code>p</code> \u76f8\u5bf9\u4e8e <code>p.alignedCoerced</code> \u662f\u5bf9\u9f50\u7684  * <code>p</code> \u76f8\u5bf9\u4e8e <code>p.flippedCoerced</code> \u662f\u7ffb\u8f6c\u7684  * <code>p.alignedCoerced</code> \u76f8\u5bf9\u4e8e <code>p.flippedCoerced</code> \u662f\u7ffb\u8f6c\u7684</p> <p>\u4e0b\u4e00\u4e2a\u793a\u4f8b\u6709\u4e00\u4e2a\u5d4c\u5957bundle <code>GrandParent</code>\uff0c\u5b83\u5b9e\u4f8b\u5316\u4e86\u4e00\u4e2a <code>Output</code> \u7c7b\u578b\u7684 <code>ParentWithOutputInput</code> \u5b57\u6bb5\u548c\u4e00\u4e2a <code>Input</code> \u7c7b\u578b\u7684 <code>ParentWithOutputInput</code> \u5b57\u6bb5\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3._\nclass GrandParentWithOutputInput extends Bundle {\n  val alignedCoerced = Output(new ParentWithOutputInput)\n  val flippedCoerced = Input(new ParentWithOutputInput)\n}\nclass MyModule3 extends Module {\n  val g = Wire(new GrandParentWithOutputInput)\n}\n</code></pre> <p>\u8bf7\u8bb0\u4f4f\uff0c<code>Output(gen)/Input(gen)</code> \u4f1a\u9012\u5f52\u5730\u53bb\u9664\u4efb\u4f55\u9012\u5f52\u5b50\u6210\u5458\u7684 <code>Flipped</code>\u3002 \u8fd9\u4f7f\u5f97 <code>gen</code> \u7684\u6bcf\u4e2a\u6210\u5458\u90fd\u4e0e <code>gen</code> \u7684\u5176\u4ed6\u6240\u6709\u6210\u5458\u5bf9\u9f50\u3002</p> <p>\u8003\u8651\u7956\u7236\u6bcd\u548c\u5b59\u5b50\u4e4b\u95f4\u7684\u4ee5\u4e0b\u5bf9\u9f50\u5173\u7cfb\u3002 \u56e0\u4e3a <code>alignedCoerced</code> \u548c <code>flippedCoerced</code> \u4e0e\u5b83\u4eec\u7684\u6240\u6709\u9012\u5f52\u6210\u5458\u5bf9\u9f50\uff0c\u6240\u4ee5\u5b83\u4eec\u662f\u5b8c\u5168\u5bf9\u9f50\u7684\u3002 \u56e0\u6b64\uff0c\u53ea\u6709\u5b83\u4eec\u4e0e <code>g</code> \u7684\u5bf9\u9f50\u5173\u7cfb\u5f71\u54cd\u5b59\u5b50\u7684\u5bf9\u9f50\u5173\u7cfb\uff1a  * <code>g</code> \u76f8\u5bf9\u4e8e <code>g.alignedCoerced.alignedCoerced</code> \u662f\u5bf9\u9f50\u7684  * <code>g</code> \u76f8\u5bf9\u4e8e <code>g.alignedCoerced.flippedCoerced</code> \u662f\u5bf9\u9f50\u7684  * <code>g</code> \u76f8\u5bf9\u4e8e <code>g.flippedCoerced.alignedCoerced</code> \u662f\u7ffb\u8f6c\u7684  * <code>g</code> \u76f8\u5bf9\u4e8e <code>g.flippedCoerced.flippedCoerced</code> \u662f\u7ffb\u8f6c\u7684</p> <p>\u8003\u8651\u4ece <code>g.alignedCoerced</code> \u548c <code>g.flippedCoerced</code> \u5f00\u59cb\u7684\u4ee5\u4e0b\u5bf9\u9f50\u5173\u7cfb\u3002 \u8bf7\u6ce8\u610f\uff0c<code>g.alignedCoerced</code> \u76f8\u5bf9\u4e8e <code>g</code> \u662f\u5bf9\u9f50\u8fd8\u662f\u7ffb\u8f6c\u5bf9 <code>g.alignedCoerced</code> \u548c <code>g.alignedCoerced.alignedCoerced</code> \u6216 <code>g.alignedCoerced.flippedCoerced</code> \u4e4b\u95f4\u7684\u5bf9\u9f50/\u7ffb\u8f6c\u5173\u7cfb\u6ca1\u6709\u5f71\u54cd\uff0c\u56e0\u4e3a\u5bf9\u9f50\u4ec5\u76f8\u5bf9\u4e8e\u6240\u8ba8\u8bba\u7684\u4e24\u4e2a\u6210\u5458\uff01\u4f46\u662f\uff0c\u7531\u4e8e\u5bf9\u9f50\u88ab\u5f3a\u5236\uff0c<code>g.alignedCoerced</code>/<code>g.flippedAligned</code> \u4e0e\u5176\u5b50\u9879\u4e4b\u95f4\u7684\u6240\u6709\u5173\u7cfb\u90fd\u662f\u5bf9\u9f50\u7684\uff1a  * <code>g.alignedCoerced</code> \u76f8\u5bf9\u4e8e <code>g.alignedCoerced.alignedCoerced</code> \u662f\u5bf9\u9f50\u7684  * <code>g.alignedCoerced</code> \u76f8\u5bf9\u4e8e <code>g.alignedCoerced.flippedCoerced</code> \u662f\u5bf9\u9f50\u7684  * <code>g.flippedCoerced</code> \u76f8\u5bf9\u4e8e <code>g.flippedCoerced.alignedCoerced</code> \u662f\u5bf9\u9f50\u7684  * <code>g.flippedCoerced</code> \u76f8\u5bf9\u4e8e <code>g.flippedCoerced.flippedCoerced</code> \u662f\u5bf9\u9f50\u7684</p> <p>\u603b\u4e4b\uff0c<code>Input(gen)</code> \u548c <code>Output(gen)</code> \u9012\u5f52\u5730\u5f3a\u5236\u5b50\u9879\u5bf9\u9f50\uff0c\u5e76\u51b3\u5b9a <code>gen</code> \u76f8\u5bf9\u4e8e\u5176\u7236bundle\uff08\u5982\u679c\u5b58\u5728\uff09\u7684\u5bf9\u9f50\u65b9\u5f0f\u3002</p>"},{"location":"chisel_explanation/connectable/#_6","title":"\u8fde\u63a5\u5177\u6709\u5b8c\u5168\u5bf9\u9f50\u6210\u5458\u7684\u7ec4\u4ef6","text":""},{"location":"chisel_explanation/connectable/#_7","title":"\u5355\u5411\u8fde\u63a5\u8fd0\u7b97\u7b26 (<code>:=</code>)","text":"<p>\u5bf9\u4e8e\u6240\u6709\u6210\u5458\u76f8\u4e92\u5bf9\u9f50\uff08\u975e\u7ffb\u8f6c\uff09\u7684\u7b80\u5355\u8fde\u63a5\uff0c\u4f7f\u7528 <code>:=</code>\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3._\nclass FullyAlignedBundle extends Bundle {\n  val a = Bool()\n  val b = Bool()\n}\nclass Example0 extends RawModule {\n  val incoming = IO(Flipped(new FullyAlignedBundle))\n  val outgoing = IO(new FullyAlignedBundle)\n  outgoing := incoming\n}\n</code></pre> <p>\u8fd9\u4f1a\u751f\u6210\u4ee5\u4e0bVerilog\u4ee3\u7801\uff0c\u5176\u4e2d <code>incoming</code> \u7684\u6bcf\u4e2a\u6210\u5458\u90fd\u9a71\u52a8 <code>outgoing</code> \u7684\u6bcf\u4e2a\u6210\u5458\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new Example0)\n</code></pre> <p>\u4f60\u53ef\u80fd\u4f1a\u60f3\uff1a\"\u7b49\u7b49\uff0c\u6211\u56f0\u60d1\u4e86\uff01<code>incoming</code> \u4e0d\u662f\u88ab\u7ffb\u8f6c\u800c <code>outgoing</code> \u662f\u5bf9\u9f50\u7684\u5417\uff1f\" \u2014\u2014 \u4e0d\u662f\uff01<code>incoming</code> \u662f\u5426\u4e0e <code>outgoing</code> \u5bf9\u9f50\u6ca1\u6709\u610f\u4e49\uff1b\u8bb0\u4f4f\uff0c\u4f60\u53ea\u5728\u540c\u4e00\u7ec4\u4ef6\u6216Chisel\u7c7b\u578b\u7684\u6210\u5458\u4e4b\u95f4\u8bc4\u4f30\u5bf9\u9f50\u5173\u7cfb\u3002 \u56e0\u4e3a\u7ec4\u4ef6\u603b\u662f\u4e0e\u81ea\u8eab\u5bf9\u9f50\uff0c<code>outgoing</code> \u4e0e <code>outgoing</code> \u5bf9\u9f50\uff0c\u800c <code>incoming</code> \u4e0e <code>incoming</code> \u5bf9\u9f50\uff0c\u6240\u4ee5\u6ca1\u6709\u95ee\u9898\u3002 \u5b83\u4eec\u76f8\u5bf9\u4e8e\u5176\u4ed6\u4efb\u4f55\u4e1c\u897f\u7684\u7ffb\u8f6c\u7a0b\u5ea6\u90fd\u65e0\u5173\u7d27\u8981\u3002</p>"},{"location":"chisel_explanation/connectable/#_8","title":"\u8fde\u63a5\u5177\u6709\u6df7\u5408\u5bf9\u9f50\u6210\u5458\u7684\u7ec4\u4ef6","text":"<p>\u805a\u5408Chisel\u7c7b\u578b\u53ef\u4ee5\u5305\u542b\u76f8\u5bf9\u4e8e\u5f7c\u6b64\u7ffb\u8f6c\u7684\u6570\u636e\u6210\u5458\uff1b\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c<code>alignedChild</code> \u548c <code>flippedChild</code> \u76f8\u5bf9\u4e8e <code>MixedAlignmentBundle</code> \u662f\u5bf9\u9f50/\u7ffb\u8f6c\u7684\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3._\nclass MixedAlignmentBundle extends Bundle {\n  val alignedChild = Bool()\n  val flippedChild = Flipped(Bool())\n}\n</code></pre> <p>\u7531\u4e8e\u8fd9\u4e00\u70b9\uff0c\u4e24\u4e2aChisel\u7ec4\u4ef6\u4e4b\u95f4\u6709\u8bb8\u591a\u671f\u671b\u7684\u8fde\u63a5\u884c\u4e3a\u3002 \u9996\u5148\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u6700\u5e38\u89c1\u7684Chisel\u8fde\u63a5\u8fd0\u7b97\u7b26 <code>:&lt;&gt;=</code>\uff0c\u5b83\u9002\u7528\u4e8e\u8fde\u63a5\u5177\u6709\u6df7\u5408\u5bf9\u9f50\u6210\u5458\u7684\u7ec4\u4ef6\uff0c\u7136\u540e\u82b1\u70b9\u65f6\u95f4\u7814\u7a76\u7aef\u53e3\u65b9\u5411\u548c\u8fde\u63a5\u65b9\u5411\u4e4b\u95f4\u5e38\u89c1\u7684\u6df7\u6dc6\u6e90\u3002 \u7136\u540e\uff0c\u6211\u4eec\u5c06\u63a2\u7d22\u5176\u4f59\u7684Chisel\u8fde\u63a5\u8fd0\u7b97\u7b26\u3002</p>"},{"location":"chisel_explanation/connectable/#_9","title":"\u53cc\u5411\u8fde\u63a5\u8fd0\u7b97\u7b26 (<code>:&lt;&gt;=</code>)","text":"<p>\u5bf9\u4e8e\u5e0c\u671b\u91c7\u7528\"\u7c7b\u6279\u91cf\u8fde\u63a5\u8bed\u4e49\"\u7684\u8fde\u63a5\uff0c\u5176\u4e2d\u5bf9\u9f50\u6210\u5458\u4ece\u751f\u4ea7\u8005\u9a71\u52a8\u5230\u6d88\u8d39\u8005\uff0c\u7ffb\u8f6c\u6210\u5458\u4ece\u6d88\u8d39\u8005\u9a71\u52a8\u5230\u751f\u4ea7\u8005\uff0c\u4f7f\u7528 <code>:&lt;&gt;=</code>\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass Example1 extends RawModule {\n  val incoming = IO(Flipped(new MixedAlignmentBundle))\n  val outgoing = IO(new MixedAlignmentBundle)\n  outgoing :&lt;&gt;= incoming\n}\n</code></pre> <p>\u8fd9\u4f1a\u751f\u6210\u4ee5\u4e0bVerilog\u4ee3\u7801\uff0c\u5176\u4e2d\u5bf9\u9f50\u6210\u5458\u4ece <code>incoming</code> \u9a71\u52a8\u5230 <code>outgoing</code>\uff0c\u7ffb\u8f6c\u6210\u5458\u4ece <code>outgoing</code> \u9a71\u52a8\u5230 <code>incoming</code>\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new Example1)\n</code></pre>"},{"location":"chisel_explanation/connectable/#_10","title":"\u7aef\u53e3\u65b9\u5411\u8ba1\u7b97\u4e0e\u8fde\u63a5\u65b9\u5411\u8ba1\u7b97","text":"<p>\u4e00\u4e2a\u5e38\u89c1\u95ee\u9898\u662f\uff0c\u5982\u679c\u4f7f\u7528\u6df7\u5408\u5bf9\u9f50\u8fde\u63a5\uff08\u5982 <code>:&lt;&gt;=</code>\uff09\u8fde\u63a5\u7236\u7ec4\u4ef6\u7684\u5b50\u6210\u5458\uff0c\u5b50\u6210\u5458\u4e0e\u5176\u7236\u7ec4\u4ef6\u7684\u5bf9\u9f50\u5173\u7cfb\u4f1a\u5f71\u54cd\u4ec0\u4e48\u5417\uff1f\u7b54\u6848\u662f\u5426\u5b9a\u7684\uff0c\u56e0\u4e3a\u5bf9\u9f50\u59cb\u7ec8\u76f8\u5bf9\u4e8e\u6b63\u5728\u8fde\u63a5\u7684\u5bf9\u8c61\u8ba1\u7b97\uff0c\u4e14\u6210\u5458\u59cb\u7ec8\u4e0e\u81ea\u8eab\u5bf9\u9f50\u3002</p> <p>\u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c\u4ece <code>incoming.alignedChild</code> \u8fde\u63a5\u5230 <code>outgoing.alignedChild</code>\uff0c<code>incoming.alignedChild</code> \u662f\u5426\u4e0e <code>incoming</code> \u5bf9\u9f50\u65e0\u5173\u7d27\u8981\uff0c\u56e0\u4e3a <code>:&lt;&gt;=</code> \u4ec5\u6839\u636e\u6b63\u5728\u8fde\u63a5\u7684\u5bf9\u8c61\u8ba1\u7b97\u5bf9\u9f50\u5173\u7cfb\uff0c\u800c <code>incoming.alignedChild</code> \u4e0e <code>incoming.alignedChild</code> \u662f\u5bf9\u9f50\u7684\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass Example1a extends RawModule {\n  val incoming = IO(Flipped(new MixedAlignmentBundle))\n  val outgoing = IO(new MixedAlignmentBundle)\n  outgoing.alignedChild :&lt;&gt;= incoming.alignedChild // incoming.alignedChild \u662f\u5426\u4e0e incoming \u5bf9\u9f50/\u7ffb\u8f6c\u4e0e :&lt;&gt;= \u8fde\u63a5\u7684\u5185\u5bb9\u65e0\u5173\n}\n</code></pre> <p>\u867d\u7136 <code>incoming.flippedChild</code> \u4e0e <code>incoming</code> \u7684\u5bf9\u9f50\u5173\u7cfb\u4e0d\u5f71\u54cd\u6211\u4eec\u7684\u8fd0\u7b97\u7b26\uff0c\u4f46\u5b83\u786e\u5b9e\u5f71\u54cd <code>incoming.flippedChild</code> \u662f\u6211\u4eec\u6a21\u5757\u7684\u8f93\u51fa\u7aef\u53e3\u8fd8\u662f\u8f93\u5165\u7aef\u53e3\u3002 \u4e00\u4e2a\u5e38\u89c1\u7684\u6df7\u6dc6\u6e90\u662f\u5c06\u786e\u5b9a <code>incoming.flippedChild</code> \u662f\u5426\u89e3\u6790\u4e3aVerilog\u7684 <code>output</code>/<code>input</code>\uff08\u7aef\u53e3\u65b9\u5411\u8ba1\u7b97\uff09\u7684\u8fc7\u7a0b\u4e0e\u786e\u5b9a <code>:&lt;&gt;=</code> \u5982\u4f55\u9a71\u52a8\u4ec0\u4e48\u5230\u4ec0\u4e48\uff08\u8fde\u63a5\u65b9\u5411\u8ba1\u7b97\uff09\u7684\u8fc7\u7a0b\u6df7\u6dc6\u3002 \u867d\u7136\u8fd9\u4e24\u4e2a\u8fc7\u7a0b\u90fd\u8003\u8651\u76f8\u5bf9\u5bf9\u9f50\uff0c\u4f46\u5b83\u4eec\u662f\u4e0d\u540c\u7684\u3002</p> <p>\u7aef\u53e3\u65b9\u5411\u8ba1\u7b97\u59cb\u7ec8\u6839\u636e\u6807\u8bb0\u4e3a <code>IO</code> \u7684\u7ec4\u4ef6\u8ba1\u7b97\u5bf9\u9f50\u5173\u7cfb\u3002 <code>IO(Flipped(gen))</code> \u662f\u4e00\u4e2a\u4f20\u5165\u7aef\u53e3\uff0c<code>gen</code> \u7684\u4efb\u4f55\u4e0e <code>gen</code> \u5bf9\u9f50/\u7ffb\u8f6c\u7684\u6210\u5458\u90fd\u662f\u4f20\u5165/\u4f20\u51fa\u7aef\u53e3\u3002 <code>IO(gen)</code> \u662f\u4e00\u4e2a\u4f20\u51fa\u7aef\u53e3\uff0c<code>gen</code> \u7684\u4efb\u4f55\u4e0e <code>gen</code> \u5bf9\u9f50/\u7ffb\u8f6c\u7684\u6210\u5458\u90fd\u662f\u4f20\u51fa/\u4f20\u5165\u7aef\u53e3\u3002</p> <p>\u8fde\u63a5\u65b9\u5411\u8ba1\u7b97\u59cb\u7ec8\u6839\u636e\u8fde\u63a5\u5f15\u7528\u7684\u663e\u5f0f\u6d88\u8d39\u8005/\u751f\u4ea7\u8005\u8ba1\u7b97\u5bf9\u9f50\u5173\u7cfb\u3002 \u5982\u679c\u8fde\u63a5 <code>incoming :&lt;&gt;= outgoing</code>\uff0c\u5219\u6839\u636e <code>incoming</code> \u548c <code>outgoing</code> \u8ba1\u7b97\u5bf9\u9f50\u5173\u7cfb\u3002 \u5982\u679c\u8fde\u63a5 <code>incoming.alignedChild :&lt;&gt;= outgoing.alignedChild</code>\uff0c\u5219\u6839\u636e <code>incoming.alignedChild</code> \u548c <code>outgoing.alignedChild</code> \u8ba1\u7b97\u5bf9\u9f50\u5173\u7cfb\uff08<code>incoming</code> \u4e0e <code>incoming.alignedChild</code> \u7684\u5bf9\u9f50\u5173\u7cfb\u65e0\u5173\u7d27\u8981\uff09\u3002</p> <p>\u8fd9\u610f\u5473\u7740\u7528\u6237\u53ef\u80fd\u4f1a\u5c1d\u8bd5\u8fde\u63a5\u5230\u5176\u6a21\u5757\u7684\u8f93\u5165\u7aef\u53e3\uff01\u5982\u679c\u6211\u5199 <code>x :&lt;&gt;= y</code>\uff0c\u800c <code>x</code> \u662f\u5f53\u524d\u6a21\u5757\u7684\u8f93\u5165\uff0c\u90a3\u4e48\u8fde\u63a5\u5c31\u662f\u8bd5\u56fe\u505a\u5230\u8fd9\u4e00\u70b9\u3002 \u7136\u800c\uff0c\u7531\u4e8e\u4ece\u5f53\u524d\u6a21\u5757\u5185\u90e8\u65e0\u6cd5\u9a71\u52a8\u8f93\u5165\u7aef\u53e3\uff0cChisel\u5c06\u629b\u51fa\u9519\u8bef\u3002 \u8fd9\u4e0e\u4f7f\u7528\u5355\u5411\u8fd0\u7b97\u7b26\u65f6\u4f1a\u5f97\u5230\u7684\u9519\u8bef\u76f8\u540c\uff1a\u5982\u679c <code>x</code> \u662f\u5f53\u524d\u6a21\u5757\u7684\u8f93\u5165\uff0c<code>x := y</code> \u5c06\u629b\u51fa\u540c\u6837\u7684\u9519\u8bef\u3002 \u7ec4\u4ef6\u662f\u5426\u53ef\u9a71\u52a8\u4e0e\u5c1d\u8bd5\u9a71\u52a8\u5b83\u7684\u4efb\u4f55\u8fde\u63a5\u8fd0\u7b97\u7b26\u7684\u8bed\u4e49\u65e0\u5173\u3002</p> <p>\u603b\u4e4b\uff0c\u7aef\u53e3\u65b9\u5411\u8ba1\u7b97\u662f\u76f8\u5bf9\u4e8e\u6807\u8bb0\u4e3a <code>IO</code> \u7684\u6839\u8fdb\u884c\u7684\uff0c\u4f46\u8fde\u63a5\u65b9\u5411\u8ba1\u7b97\u662f\u76f8\u5bf9\u4e8e\u8fde\u63a5\u6b63\u5728\u8fdb\u884c\u7684\u6d88\u8d39\u8005/\u751f\u4ea7\u8005\u8fdb\u884c\u7684\u3002 \u8fd9\u5177\u6709\u79ef\u6781\u7279\u6027\uff0c\u5373\u8fde\u63a5\u8bed\u4e49\u4ec5\u57fa\u4e8e\u6d88\u8d39\u8005/\u751f\u4ea7\u8005\u7684Chisel\u7ed3\u6784\u7c7b\u578b\u53ca\u5176\u76f8\u5bf9\u5bf9\u9f50\u5173\u7cfb\uff08\u65e0\u9700\u66f4\u591a\uff0c\u65e0\u9700\u66f4\u5c11\uff09\u3002</p>"},{"location":"chisel_explanation/connectable/#_11","title":"\u5bf9\u9f50\u8fde\u63a5\u8fd0\u7b97\u7b26 (<code>:&lt;=</code>)","text":"<p>\u5bf9\u4e8e\u5e0c\u671b\u91c7\u7528\"\u7c7b\u6279\u91cf\u8fde\u63a5\u8bed\u4e49\"\u7684\u5bf9\u9f50\u534a\u90e8\u5206\u7684\u8fde\u63a5\uff0c\u5176\u4e2d\u5bf9\u9f50\u6210\u5458\u4ece\u751f\u4ea7\u8005\u9a71\u52a8\u5230\u6d88\u8d39\u8005\uff0c\u800c\u5ffd\u7565\u7ffb\u8f6c\u6210\u5458\uff0c\u4f7f\u7528 <code>:&lt;=</code>\uff08\"\u5bf9\u9f50\u8fde\u63a5\"\uff09\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass Example2 extends RawModule {\n  val incoming = IO(Flipped(new MixedAlignmentBundle))\n  val outgoing = IO(new MixedAlignmentBundle)\n  incoming.flippedChild := DontCare // \u5426\u5219FIRRTL\u4f1a\u629b\u51fa\u672a\u521d\u59cb\u5316\u9519\u8bef\n  outgoing :&lt;= incoming\n}\n</code></pre> <p>\u8fd9\u4f1a\u751f\u6210\u4ee5\u4e0bVerilog\u4ee3\u7801\uff0c\u5176\u4e2d\u5bf9\u9f50\u6210\u5458\u4ece <code>incoming</code> \u9a71\u52a8\u5230 <code>outgoing</code>\uff0c\u800c\u5ffd\u7565\u7ffb\u8f6c\u6210\u5458\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new Example2)\n</code></pre>"},{"location":"chisel_explanation/connectable/#_12","title":"\u7ffb\u8f6c\u8fde\u63a5\u8fd0\u7b97\u7b26 (<code>:&gt;=</code>)","text":"<p>\u5bf9\u4e8e\u5e0c\u671b\u91c7\u7528\"\u7c7b\u6279\u91cf\u8fde\u63a5\u8bed\u4e49\"\u7684\u7ffb\u8f6c\u534a\u90e8\u5206\u7684\u8fde\u63a5\uff0c\u5176\u4e2d\u5bf9\u9f50\u6210\u5458\u88ab\u5ffd\u7565\u800c\u7ffb\u8f6c\u6210\u5458\u4ece\u6d88\u8d39\u8005\u8fde\u63a5\u5230\u751f\u4ea7\u8005\uff0c\u4f7f\u7528 <code>:&gt;=</code>\uff08\"\u7ffb\u8f6c\u8fde\u63a5\"\u6216\"\u53cd\u538b\u8fde\u63a5\"\uff09\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass Example3 extends RawModule {\n  val incoming = IO(Flipped(new MixedAlignmentBundle))\n  val outgoing = IO(new MixedAlignmentBundle)\n  outgoing.alignedChild := DontCare // \u5426\u5219FIRRTL\u4f1a\u629b\u51fa\u672a\u521d\u59cb\u5316\u9519\u8bef\n  outgoing :&gt;= incoming\n}\n</code></pre> <p>\u8fd9\u4f1a\u751f\u6210\u4ee5\u4e0bVerilog\u4ee3\u7801\uff0c\u5176\u4e2d\u5bf9\u9f50\u6210\u5458\u88ab\u5ffd\u7565\uff0c\u7ffb\u8f6c\u6210\u5458\u4ece <code>outgoing</code> \u9a71\u52a8\u5230 <code>incoming</code>\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new Example3)\n</code></pre> <p>\u6ce8\u610f\uff1a\u654f\u9510\u7684\u89c2\u5bdf\u8005\u4f1a\u53d1\u73b0 <code>c :&lt;&gt;= p</code> \u5728\u8bed\u4e49\u4e0a\u7b49\u540c\u4e8e <code>c :&lt;= p</code> \u540e\u8ddf <code>c :&gt;= p</code>\u3002</p>"},{"location":"chisel_explanation/connectable/#_13","title":"\u5f3a\u5236\u5355\u5411\u8fde\u63a5\u8fd0\u7b97\u7b26 (<code>:#=</code>)","text":"<p>\u5bf9\u4e8e\u5e0c\u671b\u6bcf\u4e2a\u751f\u4ea7\u8005\u6210\u5458\u59cb\u7ec8\u9a71\u52a8\u6bcf\u4e2a\u6d88\u8d39\u8005\u6210\u5458\u7684\u8fde\u63a5\uff0c\u65e0\u8bba\u5bf9\u9f50\u5982\u4f55\uff0c\u4f7f\u7528 <code>:#=</code>\uff08\"\u5f3a\u5236\u8fde\u63a5\"\uff09\u3002 \u8fd9\u4e2a\u8fd0\u7b97\u7b26\u5bf9\u4e8e\u521d\u59cb\u5316\u5305\u542b\u6df7\u5408\u5bf9\u9f50\u6210\u5458\u7684\u7c7b\u578b\u7684wire\u5f88\u6709\u7528\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3.experimental.BundleLiterals._\nclass Example4 extends RawModule {\n  val w = Wire(new MixedAlignmentBundle)\n  dontTouch(w) // \u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u5728\u8f93\u51fa\u7684Verilog\u4e2d\u770b\u5230\u5b83\n  w :#= (new MixedAlignmentBundle).Lit(_.alignedChild -&gt; true.B, _.flippedChild -&gt; true.B)\n}\n</code></pre> <p>\u8fd9\u4f1a\u751f\u6210\u4ee5\u4e0bVerilog\u4ee3\u7801\uff0c\u5176\u4e2d\u6240\u6709\u6210\u5458\u90fd\u4ece\u5b57\u9762\u503c\u9a71\u52a8\u5230 <code>w</code>\uff0c\u65e0\u8bba\u5bf9\u9f50\u5982\u4f55\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new Example4)\n</code></pre> <p>\u6ce8\u610f\uff1a\u654f\u9510\u7684\u89c2\u5bdf\u8005\u4f1a\u53d1\u73b0 <code>c :#= p</code> \u5728\u8bed\u4e49\u4e0a\u7b49\u540c\u4e8e <code>c :&lt;= p</code> \u540e\u8ddf <code>p :&gt;= c</code>\uff08\u6ce8\u610f\u5728\u7b2c\u4e8c\u4e2a\u8fde\u63a5\u4e2d <code>p</code> \u548c <code>c</code> \u4ea4\u6362\u4e86\u4f4d\u7f6e\uff09\u3002</p> <p><code>:#=</code> \u7684\u53e6\u4e00\u4e2a\u7528\u4f8b\u662f\u5c06\u6df7\u5408\u65b9\u5411\u7684bundle\u8fde\u63a5\u5230\u5b8c\u5168\u5bf9\u9f50\u7684\u76d1\u89c6\u5668\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3.experimental.BundleLiterals._\nclass Example4b extends RawModule {\n  val monitor = IO(Output(new MixedAlignmentBundle))\n  val w = Wire(new MixedAlignmentBundle)\n  dontTouch(w) // \u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u5728\u8f93\u51fa\u7684Verilog\u4e2d\u770b\u5230\u5b83\n  w :#= DontCare\n  monitor :#= w\n}\n</code></pre> <p>\u8fd9\u4f1a\u751f\u6210\u4ee5\u4e0bVerilog\u4ee3\u7801\uff0c\u5176\u4e2d\u6240\u6709\u6210\u5458\u90fd\u4ece\u5b57\u9762\u503c\u9a71\u52a8\u5230 <code>w</code>\uff0c\u65e0\u8bba\u5bf9\u9f50\u5982\u4f55\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new Example4b)\n</code></pre>"},{"location":"chisel_explanation/connectable/#connectable","title":"Connectable","text":"<p>\u6709\u65f6\u7528\u6237\u5e0c\u671b\u8fde\u63a5\u4e0d\u662f\u7c7b\u578b\u7b49\u4ef7\u7684Chisel\u7ec4\u4ef6\u3002 \u4f8b\u5982\uff0c\u7528\u6237\u53ef\u80fd\u5e0c\u671b\u8fde\u63a5\u533f\u540d\u7684 <code>Record</code> \u7ec4\u4ef6\uff0c\u8fd9\u4e9b\u7ec4\u4ef6\u53ef\u80fd\u6709\u5b57\u6bb5\u7684\u4ea4\u96c6\u662f\u7b49\u4ef7\u7684\uff0c\u4f46\u7531\u4e8e\u7ed3\u6784\u4e0a\u4e0d\u7b49\u4ef7\u800c\u65e0\u6cd5\u8fde\u63a5\u3002 \u6216\u8005\uff0c\u6709\u4eba\u53ef\u80fd\u5e0c\u671b\u8fde\u63a5\u5177\u6709\u4e0d\u540c\u5bbd\u5ea6\u7684\u4e24\u79cd\u7c7b\u578b\u3002</p> <p><code>Connectable</code> \u662f\u5728\u8fd9\u4e9b\u573a\u666f\u4e2d\u7279\u5316\u8fde\u63a5\u8fd0\u7b97\u7b26\u884c\u4e3a\u7684\u673a\u5236\u3002 \u5bf9\u4e8e\u5728\u8fde\u63a5\u5230\u7684\u53e6\u4e00\u4e2a\u7ec4\u4ef6\u4e2d\u4e0d\u5b58\u5728\u7684\u9644\u52a0\u6210\u5458\uff0c\u6216\u8005\u5bf9\u4e8e\u4e0d\u5339\u914d\u7684\u5bbd\u5ea6\uff0c\u6216\u8005\u5bf9\u4e8e\u59cb\u7ec8\u6392\u9664\u4e0d\u88ab\u8fde\u63a5\u7684\u6210\u5458\uff0c\u53ef\u4ee5\u4ece <code>Connectable</code> \u5bf9\u8c61\u4e2d\u660e\u786e\u8c03\u7528\u5b83\u4eec\uff0c\u800c\u4e0d\u662f\u89e6\u53d1\u9519\u8bef\u3002</p> <p>\u6b64\u5916\uff0c\u8fd8\u6709\u5176\u4ed6\u6280\u672f\u53ef\u7528\u4e8e\u89e3\u51b3\u7c7b\u4f3c\u7528\u4f8b\uff0c\u5305\u62ec <code>.viewAsSuperType</code>\u3001\u5bf9\u8d85\u7c7b\u578b\u7684\u9759\u6001\u8f6c\u6362\uff08\u4f8b\u5982 <code>(x: T)</code>\uff09\u6216\u521b\u5efa\u81ea\u5b9a\u4e49 <code>DataView</code>\u3002 \u5173\u4e8e\u4f55\u65f6\u4f7f\u7528\u6bcf\u79cd\u6280\u672f\u7684\u8ba8\u8bba\uff0c\u8bf7\u7ee7\u7eed\u6b64\u5904\u3002</p> <p>\u672c\u8282\u6f14\u793a\u4e86\u5982\u4f55\u5728\u591a\u79cd\u60c5\u51b5\u4e0b\u4f7f\u7528 <code>Connectable</code>\u3002</p>"},{"location":"chisel_explanation/connectable/#records","title":"\u8fde\u63a5Records","text":"<p>\u4e00\u4e2a\u7528\u4f8b\u662f\u5c1d\u8bd5\u8fde\u63a5\u4e24\u4e2a <code>Record</code>\uff1b\u5bf9\u4e8e\u5339\u914d\u7684\u6210\u5458\uff0c\u5b83\u4eec\u5e94\u8be5\u88ab\u8fde\u63a5\uff0c\u4f46\u5bf9\u4e8e\u4e0d\u5339\u914d\u7684\u6210\u5458\uff0c\u7531\u4e8e\u5b83\u4eec\u4e0d\u5339\u914d\u800c\u5bfc\u81f4\u7684\u9519\u8bef\u5e94\u8be5\u88ab\u5ffd\u7565\u3002 \u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u4f7f\u7528\u5176\u4ed6\u8fd0\u7b97\u7b26\u521d\u59cb\u5316\u6240\u6709 <code>Record</code> \u6210\u5458\uff0c\u7136\u540e\u4f7f\u7528 <code>:&lt;&gt;=</code> \u548c <code>.waive</code> \u53ea\u8fde\u63a5\u5339\u914d\u7684\u6210\u5458\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c<code>.viewAsSuperType</code>\u3001\u9759\u6001\u8f6c\u6362\u6216\u81ea\u5b9a\u4e49 <code>DataView</code> \u90fd\u65e0\u6cd5\u5e2e\u52a9\u89e3\u51b3\u8fd9\u79cd\u60c5\u51b5\uff0c\u56e0\u4e3aScala\u7c7b\u578b\u4ecd\u7136\u662f <code>Record</code>\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport scala.collection.immutable.SeqMap\n\nclass Example9 extends RawModule {\n  val abType = new Record { val elements = SeqMap(\"a\" -&gt; Bool(), \"b\" -&gt; Flipped(Bool())) }\n  val bcType = new Record { val elements = SeqMap(\"b\" -&gt; Flipped(Bool()), \"c\" -&gt; Bool()) }\n\n  val p = IO(Flipped(abType))\n  val c = IO(bcType)\n\n  DontCare :&gt;= p\n  c :&lt;= DontCare\n\n  c.waive(_.elements(\"c\")):&lt;&gt;= p.waive(_.elements(\"a\"))\n}\n</code></pre> <p>\u8fd9\u4f1a\u751f\u6210\u4ee5\u4e0bVerilog\u4ee3\u7801\uff0c\u5176\u4e2d <code>p.b</code> \u4ece <code>c.b</code> \u9a71\u52a8\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new Example9)\n</code></pre>"},{"location":"chisel_explanation/connectable/#_14","title":"\u5e26\u6709\u8c41\u514d\u8fde\u63a5\u7684\u9ed8\u8ba4\u503c","text":"<p>\u53e6\u4e00\u4e2a\u7528\u4f8b\u662f\u5c1d\u8bd5\u8fde\u63a5\u4e24\u4e2a <code>Record</code>\uff1b\u5bf9\u4e8e\u5339\u914d\u7684\u6210\u5458\uff0c\u5b83\u4eec\u5e94\u8be5\u88ab\u8fde\u63a5\uff0c\u4f46\u5bf9\u4e8e\u4e0d\u5339\u914d\u7684\u6210\u5458\uff0c\u5b83\u4eec\u5e94\u8be5\u88ab\u8fde\u63a5\u5230\u9ed8\u8ba4\u503c\u3002 \u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u4f7f\u7528\u5176\u4ed6\u8fd0\u7b97\u7b26\u521d\u59cb\u5316\u6240\u6709 <code>Record</code> \u6210\u5458\uff0c\u7136\u540e\u4f7f\u7528 <code>:&lt;&gt;=</code> \u548c <code>.waive</code> \u53ea\u8fde\u63a5\u5339\u914d\u7684\u6210\u5458\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport scala.collection.immutable.SeqMap\n\nclass Example10 extends RawModule {\n  val abType = new Record { val elements = SeqMap(\"a\" -&gt; Bool(), \"b\" -&gt; Flipped(Bool())) }\n  val bcType = new Record { val elements = SeqMap(\"b\" -&gt; Flipped(Bool()), \"c\" -&gt; Bool()) }\n\n  val p = Wire(abType)\n  val c = Wire(bcType)\n\n  dontTouch(p) // \u8fd9\u6837\u5b83\u5c31\u4e0d\u4f1a\u56e0\u4e3a\u793a\u4f8b\u800c\u88ab\u5e38\u91cf\u4f20\u64ad\u6389\n  dontTouch(c) // \u8fd9\u6837\u5b83\u5c31\u4e0d\u4f1a\u56e0\u4e3a\u793a\u4f8b\u800c\u88ab\u5e38\u91cf\u4f20\u64ad\u6389\n\n  p :#= abType.Lit(_.elements(\"a\") -&gt; true.B, _.elements(\"b\") -&gt; true.B)\n  c :#= bcType.Lit(_.elements(\"b\") -&gt; true.B, _.elements(\"c\") -&gt; true.B)\n\n  c.waive(_.elements(\"c\")) :&lt;&gt;= p.waive(_.elements(\"a\"))\n}\n</code></pre> <p>\u8fd9\u4f1a\u751f\u6210\u4ee5\u4e0bVerilog\u4ee3\u7801\uff0c\u5176\u4e2d <code>p.b</code> \u4ece <code>c.b</code> \u9a71\u52a8\uff0c\u800c <code>p.a</code>\u3001<code>c.b</code> \u548c <code>c.c</code> \u88ab\u521d\u59cb\u5316\u4e3a\u9ed8\u8ba4\u503c\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new Example10)\n</code></pre>"},{"location":"chisel_explanation/connectable/#_15","title":"\u8fde\u63a5\u5177\u6709\u53ef\u9009\u6210\u5458\u7684\u7c7b\u578b","text":"<p>\u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>:&lt;&gt;=</code> \u548c <code>.waive</code> \u8fde\u63a5\u4e24\u4e2a <code>MyDecoupledOpt</code>\uff0c\u5176\u4e2d\u53ea\u6709\u4e00\u4e2a\u6709 <code>bits</code> \u6210\u5458\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass MyDecoupledOpt(hasBits: Boolean) extends Bundle {\n  val valid = Bool()\n  val ready = Flipped(Bool())\n  val bits = if (hasBits) Some(UInt(32.W)) else None\n}\nclass Example6 extends RawModule {\n  val in  = IO(Flipped(new MyDecoupledOpt(true)))\n  val out = IO(new MyDecoupledOpt(false))\n  out :&lt;&gt;= in.waive(_.bits.get) // \u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u8c03\u7528 .get \u662f\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u68c0\u67e5 in.bits.isEmpty\n}\n</code></pre> <p>\u8fd9\u4f1a\u751f\u6210\u4ee5\u4e0bVerilog\u4ee3\u7801\uff0c\u5176\u4e2d <code>ready</code> \u548c <code>valid</code> \u88ab\u8fde\u63a5\uff0c\u800c <code>bits</code> \u88ab\u5ffd\u7565\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new Example6)\n</code></pre>"},{"location":"chisel_explanation/connectable/#_16","title":"\u59cb\u7ec8\u5ffd\u7565\u989d\u5916\u6210\u5458\u9020\u6210\u7684\u9519\u8bef\uff08\u90e8\u5206\u8fde\u63a5\u8fd0\u7b97\u7b26\uff09","text":"<p>\u6700\u4e0d\u5b89\u5168\u7684\u8fde\u63a5\u662f\u53ea\u8fde\u63a5\u6d88\u8d39\u8005\u548c\u751f\u4ea7\u8005\u4e2d\u90fd\u5b58\u5728\u7684\u6210\u5458\uff0c\u5e76\u5ffd\u7565\u6240\u6709\u5176\u4ed6\u6210\u5458\u3002 \u8fd9\u662f\u4e0d\u5b89\u5168\u7684\uff0c\u56e0\u4e3a\u8fd9\u79cd\u8fde\u63a5\u5728\u4efb\u4f55Chisel\u7c7b\u578b\u4e0a\u90fd\u4e0d\u4f1a\u51fa\u9519\u3002</p> <p>\u8981\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 <code>.waiveAll</code> \u548c\u9759\u6001\u8f6c\u6362\u5230 <code>Data</code>\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass OnlyA extends Bundle {\n  val a = UInt(32.W)\n}\nclass OnlyB extends Bundle {\n  val b = UInt(32.W)\n}\nclass Example11 extends RawModule {\n  val in  = IO(Flipped(new OnlyA))\n  val out = IO(new OnlyB)\n\n  out := DontCare\n\n  (out: Data).waiveAll :&lt;&gt;= (in: Data).waiveAll\n}\n</code></pre> <p>\u8fd9\u4f1a\u751f\u6210\u4ee5\u4e0bVerilog\u4ee3\u7801\uff0c\u5176\u4e2d\u6ca1\u6709\u4efb\u4f55\u8fde\u63a5\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new Example11)\n</code></pre>"},{"location":"chisel_explanation/connectable/#_17","title":"\u8fde\u63a5\u5177\u6709\u4e0d\u540c\u5bbd\u5ea6\u7684\u7ec4\u4ef6","text":"<p>\u975e <code>Connectable</code> \u8fd0\u7b97\u7b26\u4f1a\u5728\u5c06\u5177\u6709\u8f83\u5927\u5bbd\u5ea6\u7684\u7ec4\u4ef6\u8fde\u63a5\u5230\u5177\u6709\u8f83\u5c0f\u5bbd\u5ea6\u7684\u7ec4\u4ef6\u65f6\u9690\u5f0f\u622a\u65ad\u3002 <code>Connectable</code> \u8fd0\u7b97\u7b26\u4e0d\u5141\u8bb8\u8fd9\u79cd\u9690\u5f0f\u622a\u65ad\u884c\u4e3a\uff0c\u5e76\u8981\u6c42\u88ab\u9a71\u52a8\u7684\u7ec4\u4ef6\u7684\u5bbd\u5ea6\u7b49\u4e8e\u6216\u5927\u4e8e\u6e90\u7ec4\u4ef6\u7684\u5bbd\u5ea6\u3002</p> <p>\u5982\u679c\u9700\u8981\u9690\u5f0f\u622a\u65ad\u884c\u4e3a\uff0c\u90a3\u4e48 <code>Connectable</code> \u63d0\u4f9b\u4e86\u4e00\u4e2a <code>squeeze</code> \u673a\u5236\uff0c\u5b83\u5c06\u5141\u8bb8\u8fde\u63a5\u7ee7\u7eed\u8fdb\u884c\u9690\u5f0f\u622a\u65ad\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport scala.collection.immutable.SeqMap\n\nclass Example14 extends RawModule {\n  val p = IO(Flipped(UInt(4.W)))\n  val c = IO(UInt(3.W))\n\n  c :&lt;&gt;= p.squeeze\n}\n</code></pre> <p>\u8fd9\u4f1a\u751f\u6210\u4ee5\u4e0bVerilog\u4ee3\u7801\uff0c\u5176\u4e2d <code>p</code> \u5728\u9a71\u52a8 <code>c</code> \u4e4b\u524d\u88ab\u622a\u65ad\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new Example14)\n</code></pre>"},{"location":"chisel_explanation/connectable/#connectable_1","title":"\u4eceConnectable\u4e0a\u7684\u4efb\u4f55\u8fd0\u7b97\u7b26\u4e2d\u6392\u9664\u6210\u5458","text":"<p>\u5982\u679c\u7528\u6237\u5e0c\u671b\u59cb\u7ec8\u4ece\u8fde\u63a5\u4e2d\u6392\u9664\u67d0\u4e2a\u5b57\u6bb5\uff0c\u8bf7\u4f7f\u7528 <code>.exclude</code> \u673a\u5236\uff0c\u5b83\u6c38\u8fdc\u4e0d\u4f1a\u8fde\u63a5\u8be5\u5b57\u6bb5\uff08\u5c31\u597d\u50cf\u5b83\u5bf9\u8fde\u63a5\u4e0d\u5b58\u5728\u4e00\u6837\uff09\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u5b57\u6bb5\u5728\u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005\u4e2d\u90fd\u5339\u914d\uff0c\u4f46\u53ea\u6709\u4e00\u4e2a\u88ab\u6392\u9664\uff0c\u53e6\u4e00\u4e2a\u672a\u6392\u9664\u7684\u5b57\u6bb5\u4ecd\u4f1a\u89e6\u53d1\u9519\u8bef\uff1b\u8981\u89e3\u51b3\u6b64\u95ee\u9898\uff0c\u8bf7\u4f7f\u7528 <code>.waive</code> \u6216 <code>.exclude</code>\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport scala.collection.immutable.SeqMap\n\nclass BundleWithSpecialField extends Bundle {\n  val foo = UInt(3.W)\n  val special = Bool()\n}\nclass Example15 extends RawModule {\n  val p = IO(Flipped(new BundleWithSpecialField()))\n  val c = IO(new BundleWithSpecialField())\n\n  c.special := true.B // \u5fc5\u987b\u521d\u59cb\u5316\u5b83\n\n  c.exclude(_.special) :&lt;&gt;= p.exclude(_.special)\n}\n</code></pre> <p>This generates the following Verilog, where the <code>special</code> field is not connected:</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new Example15)\n</code></pre>"},{"location":"chisel_explanation/connectable/#chisel","title":"\u8fde\u63a5\u7ed3\u6784\u4e0d\u7b49\u4ef7\u7684Chisel\u7c7b\u578b\u7684\u6280\u672f","text":"<p><code>DataView</code> \u548c <code>.viewAsSupertype</code> \u521b\u5efa\u4e00\u4e2a\u5177\u6709\u4e0d\u540cChisel\u7c7b\u578b\u7684\u7ec4\u4ef6\u89c6\u56fe\u3002 \u8fd9\u610f\u5473\u7740\u7528\u6237\u53ef\u4ee5\u9996\u5148\u521b\u5efa\u6d88\u8d39\u8005\u6216\u751f\u4ea7\u8005\uff08\u6216\u4e24\u8005\uff09\u7684 <code>DataView</code>\uff0c\u4f7fChisel\u7c7b\u578b\u5728\u7ed3\u6784\u4e0a\u7b49\u4ef7\u3002 \u5f53\u6d88\u8d39\u8005\u548c\u751f\u4ea7\u8005\u4e4b\u95f4\u7684\u5dee\u5f02\u4e0d\u662f\u8d85\u7ea7\u5d4c\u5957\uff0c\u5e76\u4e14\u5b83\u4eec\u5177\u6709\u7f16\u7801\u5176\u7ed3\u6784\u7684\u4e30\u5bccScala\u7c7b\u578b\u65f6\uff0c\u8fd9\u79cd\u65b9\u6cd5\u5f88\u6709\u7528\u3002 \u4e00\u822c\u6765\u8bf4\uff0c<code>DataView</code> \u662f\u9996\u9009\u673a\u5236\uff08\u5982\u679c\u53ef\u4ee5\u4f7f\u7528\u7684\u8bdd\uff09\uff0c\u56e0\u4e3a\u5b83\u5728Scala\u7c7b\u578b\u4e2d\u4fdd\u7559\u4e86\u6700\u591a\u7684Chisel\u4fe1\u606f\uff0c\u4f46\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\u5b83\u4e0d\u8d77\u4f5c\u7528\uff0c\u56e0\u6b64\u5fc5\u987b\u56de\u9000\u5230\u4f7f\u7528 <code>Connectable</code>\u3002</p> <p><code>Connectable</code> \u4e0d\u6539\u53d8Chisel\u7c7b\u578b\uff0c\u800c\u662f\u6539\u53d8\u8fd0\u7b97\u7b26\u7684\u8bed\u4e49\uff0c\u4f7f\u5176\u5728\u8c41\u514d\u6210\u5458\u60ac\u7a7a\u6216\u672a\u8fde\u63a5\u65f6\u4e0d\u62a5\u9519\u3002 \u5f53\u6d88\u8d39\u8005\u548c\u751f\u4ea7\u8005\u4e4b\u95f4\u7684\u5dee\u5f02\u5728Scala\u7c7b\u578b\u7cfb\u7edf\u4e2d\u4e0d\u663e\u793a\uff08\u4f8b\u5982\uff0c\u7c7b\u578b\u4e3a <code>Option[Data]</code> \u7684\u5b58\u5728/\u7f3a\u5931\u5b57\u6bb5\uff0c\u6216\u533f\u540d <code>Record</code>\uff09\uff0c\u6216\u8005\u6df1\u5ea6\u5d4c\u5957\u5728\u521b\u5efa <code>DataView</code> \u7279\u522b\u7e41\u91cd\u7684bundle\u4e2d\u65f6\uff0c\u8fd9\u79cd\u65b9\u6cd5\u5f88\u6709\u7528\u3002</p> <p>\u9759\u6001\u8f6c\u6362\uff08\u4f8b\u5982 <code>(x: T)</code>\uff09\u5141\u8bb8\u8fde\u63a5\u5177\u6709\u4e0d\u540cScala\u7c7b\u578b\u7684\u7ec4\u4ef6\uff0c\u4f46\u4fdd\u6301Chisel\u7c7b\u578b\u4e0d\u53d8\u3002 \u5373\u4f7fScala\u7c7b\u578b\u4e0d\u540c\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u5f3a\u5236\u8fdb\u884c\u8fde\u63a5\u3002</p> <p>\u6709\u4eba\u53ef\u80fd\u4f1a\u7591\u60d1\uff0c\u5982\u679c\u8fd0\u7b97\u7b26\u8981\u6c42\u76f8\u540c\u7684Scala\u7c7b\u578b\u53ef\u4ee5\u8f7b\u6613\u7ed5\u8fc7\uff0c\u4e3a\u4ec0\u4e48\u4e00\u5f00\u59cb\u5c31\u8981\u6c42\u5b83\u4eec\u76f8\u540c\uff1f \u539f\u56e0\u662f\u9f13\u52b1\u7528\u6237\u4f7f\u7528Scala\u7c7b\u578b\u7cfb\u7edf\u6765\u7f16\u7801Chisel\u4fe1\u606f\uff0c\u56e0\u4e3a\u8fd9\u53ef\u4ee5\u4f7f\u4ed6\u4eec\u7684\u4ee3\u7801\u66f4\u52a0\u5065\u58ee\uff1b\u7136\u800c\uff0c\u6211\u4eec\u4e0d\u60f3\u8fc7\u4e8e\u4e25\u683c\uff0c\u56e0\u4e3a\u6709\u65f6\u5019\u6211\u4eec\u5e0c\u671b\u5141\u8bb8\u7528\u6237\"\u5c31\u662f\u8981\u8fde\u63a5\u8fd9\u4e2a\u4e1c\u897f\"\u3002</p> <p>\u5f53\u5176\u4ed6\u65b9\u6cd5\u90fd\u5931\u8d25\u65f6\uff0c\u59cb\u7ec8\u53ef\u4ee5\u624b\u52a8\u5c55\u5f00\u8fde\u63a5\uff0c\u6210\u5458\u9010\u4e2a\u5730\u5b9e\u73b0\u4ed6\u4eec\u60f3\u8981\u7684\u884c\u4e3a\u3002 \u8fd9\u79cd\u65b9\u6cd5\u7684\u7f3a\u70b9\u662f\u5197\u957f\uff0c\u5e76\u4e14\u5411\u7ec4\u4ef6\u6dfb\u52a0\u65b0\u6210\u5458\u5c06\u9700\u8981\u66f4\u65b0\u624b\u52a8\u8fde\u63a5\u3002</p> <p>\u5173\u4e8e <code>Connectable</code> \u4e0e <code>.viewAsSupertype</code>/<code>DataView</code> \u4e0e\u9759\u6001\u8f6c\u6362\uff08\u4f8b\u5982 <code>(x: T)</code>\uff09\u9700\u8981\u8bb0\u4f4f\u7684\u4e8b\u9879\uff1a</p> <ul> <li><code>DataView</code> \u548c <code>.viewAsSupertype</code> \u4f1a\u9884\u5148\u79fb\u9664\u65b0\u89c6\u56fe\u4e2d\u4e0d\u5b58\u5728\u7684\u6210\u5458\uff0c\u800c\u65b0\u89c6\u56fe\u5177\u6709\u4e0d\u540c\u7684Chisel\u7c7b\u578b\uff0c\u56e0\u6b64 <code>DataView</code> \u786e\u5b9e\u5f71\u54cd\u8fde\u63a5\u7684\u5185\u5bb9</li> <li><code>Connectable</code> \u53ef\u7528\u4e8e\u8c41\u514d\u6700\u7ec8\u60ac\u7a7a\u6216\u672a\u8fde\u63a5\u7684\u6210\u5458\u4e0a\u7684\u9519\u8bef\u3002 \u91cd\u8981\u7684\u662f\uff0c<code>Connectable</code> \u8c41\u514d\u4e0d\u4f1a\u5f71\u54cd\u8fde\u63a5\u7684\u5185\u5bb9</li> <li>\u9759\u6001\u8f6c\u6362\u4e0d\u4f1a\u79fb\u9664\u989d\u5916\u7684\u6210\u5458\uff0c\u56e0\u6b64\u9759\u6001\u8f6c\u6362\u4e0d\u4f1a\u5f71\u54cd\u8fde\u63a5\u7684\u5185\u5bb9</li> </ul>"},{"location":"chisel_explanation/connectable/#_18","title":"\u8fde\u63a5\u540c\u4e00\u8d85\u7c7b\u578b\u7684\u4e0d\u540c\u5b50\u7c7b\u578b\uff0c\u5177\u6709\u51b2\u7a81\u7684\u540d\u79f0","text":"<p>\u5728\u8fd9\u4e9b\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u8fde\u63a5 <code>MyDecoupled</code> \u548c <code>MyDecoupledOtherBits</code>\u3002 \u4e24\u8005\u90fd\u662f <code>MyReadyValid</code> \u7684\u5b50\u7c7b\u578b\uff0c\u4e14\u90fd\u6709\u4e00\u4e2a <code>UInt(32.W)</code> \u7c7b\u578b\u7684 <code>bits</code> \u5b57\u6bb5\u3002</p> <p>\u7b2c\u4e00\u4e2a\u793a\u4f8b\u5c06\u4f7f\u7528 <code>.viewAsSupertype</code> \u5c06\u5b83\u4eec\u4f5c\u4e3a <code>MyReadyValid</code> \u8fde\u63a5\u3002 \u56e0\u4e3a\u5b83\u6539\u53d8\u4e86Chisel\u7c7b\u578b\u4ee5\u7701\u7565\u4e24\u4e2a <code>bits</code> \u5b57\u6bb5\uff0c\u6240\u4ee5 <code>bits</code> \u5b57\u6bb5\u672a\u8fde\u63a5\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport experimental.dataview._\nclass MyDecoupledOtherBits extends MyReadyValid {\n  val bits = UInt(32.W)\n}\nclass Example12 extends RawModule {\n  val in  = IO(Flipped(new MyDecoupled))\n  val out = IO(new MyDecoupledOtherBits)\n\n  out := DontCare\n\n  out.viewAsSupertype(new MyReadyValid) :&lt;&gt;= in.viewAsSupertype(new MyReadyValid)\n}\n</code></pre> <p>\u6ce8\u610f <code>bits</code> \u5b57\u6bb5\u672a\u8fde\u63a5\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new Example12)\n</code></pre> <p>\u7b2c\u4e8c\u4e2a\u793a\u4f8b\u5c06\u4f7f\u7528\u9759\u6001\u8f6c\u6362\u548c <code>.waive(_.bits)</code> \u5c06\u5b83\u4eec\u4f5c\u4e3a <code>MyReadyValid</code> \u8fde\u63a5\u3002 \u6ce8\u610f\uff0c\u7531\u4e8e\u9759\u6001\u8f6c\u6362\u4e0d\u6539\u53d8Chisel\u7c7b\u578b\uff0c\u8fde\u63a5\u53d1\u73b0\u6d88\u8d39\u8005\u548c\u751f\u4ea7\u8005\u90fd\u6709\u4e00\u4e2a <code>bits</code> \u5b57\u6bb5\u3002 \u8fd9\u610f\u5473\u7740\u7531\u4e8e\u5b83\u4eec\u5728\u7ed3\u6784\u4e0a\u7b49\u4ef7\uff0c\u5b83\u4eec\u5339\u914d\u5e76\u88ab\u8fde\u63a5\u3002 <code>waive(_.bits)</code> \u4e0d\u8d77\u4f5c\u7528\uff0c\u56e0\u4e3a <code>bits</code> \u65e2\u4e0d\u60ac\u7a7a\u4e5f\u4e0d\u662f\u672a\u8fde\u63a5\u7684\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport experimental.dataview._\nclass Example13 extends RawModule {\n  val in  = IO(Flipped(new MyDecoupled))\n  val out = IO(new MyDecoupledOtherBits)\n\n  out := DontCare\n\n  out.waiveAs[MyReadyValid](_.bits) :&lt;&gt;= in.waiveAs[MyReadyValid](_.bits)\n}\n</code></pre> <p>\u6ce8\u610f\uff0c<code>bits</code> \u5b57\u6bb5\u786e\u5b9e\u88ab\u8fde\u63a5\u4e86\uff0c\u5373\u4f7f\u5b83\u4eec\u88ab\u8c41\u514d\uff0c\u56e0\u4e3a <code>.waive</code> \u53ea\u662f\u6539\u53d8\u4e86\u5f53\u5b83\u4eec\u7f3a\u5931\u65f6\u662f\u5426\u5e94\u8be5\u629b\u51fa\u9519\u8bef\uff0c\u800c\u4e0d\u662f\u5728\u5b83\u4eec\u7ed3\u6784\u7b49\u4ef7\u65f6\u4e0d\u8fde\u63a5\u5b83\u4eec\u3002 \u8981\u59cb\u7ec8\u7701\u7565\u8fde\u63a5\uff0c\u8bf7\u5728\u4e00\u4fa7\u4f7f\u7528 <code>.exclude</code>\uff0c\u5728\u53e6\u4e00\u4fa7\u4f7f\u7528 <code>.exclude</code> \u6216 <code>.waive</code>\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new Example13)\n</code></pre>"},{"location":"chisel_explanation/connectable/#_19","title":"\u901a\u8fc7\u8c41\u514d\u989d\u5916\u6210\u5458\u8fde\u63a5\u5b50\u7c7b\u578b\u5230\u8d85\u7c7b\u578b","text":"<p>\u6ce8\u610f\uff0c\u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6700\u597d\u4f7f\u7528 <code>.viewAsSupertype</code>\u3002</p> <p>\u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>:&lt;&gt;=</code> \u901a\u8fc7\u8c41\u514d <code>bits</code> \u6210\u5458\u5c06 <code>MyReadyValid</code> \u8fde\u63a5\u5230 <code>MyDecoupled</code>\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass MyReadyValid extends Bundle {\n  val valid = Bool()\n  val ready = Flipped(Bool())\n}\nclass MyDecoupled extends MyReadyValid {\n  val bits = UInt(32.W)\n}\nclass Example5 extends RawModule {\n  val in  = IO(Flipped(new MyDecoupled))\n  val out = IO(new MyReadyValid)\n  out :&lt;&gt;= in.waiveAs[MyReadyValid](_.bits)\n}\n</code></pre> <p>\u8fd9\u4f1a\u751f\u6210\u4ee5\u4e0bVerilog\u4ee3\u7801\uff0c\u5176\u4e2d <code>ready</code> \u548c <code>valid</code> \u88ab\u8fde\u63a5\uff0c\u800c <code>bits</code> \u88ab\u5ffd\u7565\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new Example5)\n</code></pre>"},{"location":"chisel_explanation/connectable/#_20","title":"\u8fde\u63a5\u4e0d\u540c\u7684\u5b50\u7c7b\u578b","text":"<p>\u6ce8\u610f\uff0c\u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6700\u597d\u4f7f\u7528 <code>.viewAsSupertype</code>\u3002</p> <p>\u6ce8\u610f\uff0c\u8fde\u63a5\u8fd0\u7b97\u7b26\u8981\u6c42 <code>consumer</code> \u548c <code>producer</code> \u5177\u6709\u76f8\u540c\u7684Scala\u7c7b\u578b\uff0c\u4ee5\u9f13\u52b1\u9759\u6001\u6355\u83b7\u66f4\u591a\u4fe1\u606f\uff0c\u4f46\u5b83\u4eec\u603b\u662f\u53ef\u4ee5\u5728\u8fde\u63a5\u4e4b\u524d\u8f6c\u6362\u4e3a <code>Data</code> \u6216\u5176\u4ed6\u5171\u540c\u7684\u8d85\u7c7b\u578b\u3002</p> <p>\u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>:&lt;&gt;=</code> \u548c <code>.waiveAs</code> \u8fde\u63a5 <code>MyReadyValid</code> \u7684\u4e24\u4e2a\u4e0d\u540c\u5b50\u7c7b\u578b\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass HasBits extends MyReadyValid {\n  val bits = UInt(32.W)\n}\nclass HasEcho extends MyReadyValid {\n  val echo = Flipped(UInt(32.W))\n}\nclass Example7 extends RawModule {\n  val in  = IO(Flipped(new HasBits))\n  val out = IO(new HasEcho)\n  out.waiveAs[MyReadyValid](_.echo) :&lt;&gt;= in.waiveAs[MyReadyValid](_.bits)\n}\n</code></pre> <p>\u8fd9\u4f1a\u751f\u6210\u4ee5\u4e0bVerilog\u4ee3\u7801\uff0c\u5176\u4e2d <code>ready</code> \u548c <code>valid</code> \u88ab\u8fde\u63a5\uff0c\u800c <code>bits</code> \u548c <code>echo</code> \u88ab\u5ffd\u7565\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new Example7)\n</code></pre>"},{"location":"chisel_explanation/connectable/#_21","title":"\u5e38\u89c1\u95ee\u9898","text":""},{"location":"chisel_explanation/connectable/#_22","title":"\u5982\u4f55\u5c3d\u53ef\u80fd\u7075\u6d3b\u5730\u8fde\u63a5\u4e24\u4e2a\u9879\u76ee\uff08\u5c3d\u529b\u800c\u4e3a\u4f46\u6c38\u4e0d\u62a5\u9519\uff09","text":"<p>\u4f7f\u7528 <code>.unsafe</code>\uff08\u8c41\u514d\u5e76\u5141\u8bb8\u6324\u538b\u6240\u6709\u5b57\u6bb5\uff09\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass ExampleUnsafe extends RawModule {\n  val in  = IO(Flipped(new Bundle { val foo = Bool(); val bar = Bool() }))\n  val out = IO(new Bundle { val baz = Bool(); val bar = Bool() })\n  out.unsafe :&lt;&gt;= in.unsafe // bar\u88ab\u8fde\u63a5\uff0c\u4e14\u6ca1\u6709\u9519\u8bef\n}\n</code></pre>"},{"location":"chisel_explanation/connectable/#scala","title":"\u5982\u4f55\u8fde\u63a5\u4e24\u4e2a\u9879\u76ee\u4f46\u4e0d\u5173\u5fc3Scala\u7c7b\u578b\u662f\u5426\u7b49\u4ef7\uff1f","text":"<p>\u4f7f\u7528 <code>.as</code>\uff08\u5411\u4e0a\u8f6c\u6362Scala\u7c7b\u578b\uff09\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass ExampleAs extends RawModule {\n  val in  = IO(Flipped(new Bundle { val foo = Bool(); val bar = Bool() }))\n  val out = IO(new Bundle { val foo = Bool(); val bar = Bool() })\n  // foo\u548cbar\u88ab\u8fde\u63a5\uff0c\u5c3d\u7ba1Scala\u7c7b\u578b\u4e0d\u76f8\u540c\n  out.as[Data] :&lt;&gt;= in.as[Data]\n}\n</code></pre>"},{"location":"chisel_explanation/connection-operators/","title":"\u8fde\u63a5\u8fd0\u7b97\u7b26\u6df1\u5165\u63a2\u8ba8","text":"<p>Chisel \u5305\u542b\u4e24\u4e2a\u8fde\u63a5\u8fd0\u7b97\u7b26\uff0c<code>:=</code> \u548c <code>&lt;&gt;</code>\u3002\u672c\u6587\u6863\u6df1\u5165\u89e3\u91ca\u4e86\u8fd9\u4e24\u8005\u7684\u533a\u522b\u4ee5\u53ca\u4f55\u65f6\u4f7f\u7528\u5176\u4e2d\u4e4b\u4e00\u3002\u8fd9\u4e9b\u533a\u522b\u901a\u8fc7\u4f7f\u7528 Scastie \u793a\u4f8b\u7684\u5b9e\u9a8c\u6765\u6f14\u793a\uff0c\u8fd9\u4e9b\u793a\u4f8b\u4f7f\u7528 <code>DecoupledIO</code>\u3002</p>"},{"location":"chisel_explanation/connection-operators/#_2","title":"\u5b9e\u9a8c\u8bbe\u7f6e","text":"<pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\n// \u4ee5\u4e0b\u793a\u4f8b\u4f7f\u7528\u7684\u5bfc\u5165\nimport chisel3._\nimport chisel3.util.DecoupledIO\n</code></pre> <p>\u8be5\u5b9e\u9a8c\u7684\u56fe\u8868\u53ef\u4ee5\u5728\u6b64\u5904\u67e5\u770b\u3002 </p> <p><pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass Wrapper extends Module{\n  val io = IO(new Bundle {\n  val in = Flipped(DecoupledIO(UInt(8.W)))\n  val out = DecoupledIO(UInt(8.W))\n  })\n  val p = Module(new PipelineStage)\n  val c = Module(new PipelineStage)\n  // \u8fde\u63a5\u751f\u4ea7\u8005\u5230IO\n  p.io.a &lt;&gt; io.in\n  // \u8fde\u63a5\u751f\u4ea7\u8005\u5230\u6d88\u8d39\u8005\n  c.io.a &lt;&gt; p.io.b\n  // \u8fde\u63a5\u6d88\u8d39\u8005\u5230IO\n  io.out &lt;&gt; c.io.b\n}\nclass PipelineStage extends Module{\n  val io = IO(new Bundle{\n    val a = Flipped(DecoupledIO(UInt(8.W)))\n    val b = DecoupledIO(UInt(8.W))\n  })\n  io.b &lt;&gt; io.a\n}\n</code></pre> \u4e0b\u9762\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u8fd9\u4e2a\u793a\u4f8b\u7684\u751f\u6210Verilog\uff1a <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new Wrapper)\n</code></pre></p>"},{"location":"chisel_explanation/connection-operators/#1","title":"\u6982\u5ff51\uff1a<code>&lt;&gt;</code> \u662f\u53ef\u4ea4\u6362\u7684","text":"<p>\u8be5\u5b9e\u9a8c\u65e8\u5728\u6d4b\u8bd5 <code>&lt;&gt;</code> \u7684\u529f\u80fd\uff0c\u4f7f\u7528\u4e0a\u8ff0\u5b9e\u9a8c\u3002</p> <p>\u5b9e\u73b0\u8fd9\u4e00\u70b9\u6d89\u53ca\u7ffb\u8f6c <code>&lt;&gt;</code> \u8fd0\u7b97\u7b26\u7684\u53f3\u4fa7\uff08RHS\uff09\u548c\u5de6\u4fa7\uff08LHS\uff09\uff0c\u5e76\u89c2\u5bdf <code>&lt;&gt;</code> \u5982\u4f55\u53cd\u5e94\u3002 \uff08\u5b9e\u9a8c\u7684Scastie\u94fe\u63a5\uff1ahttps://scastie.scala-lang.org/Shorla/LVhlbkFQQnq7X3trHfgZZQ\uff09</p> <p><pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\nimport chisel3.util.DecoupledIO\n\nclass Wrapper extends Module{\n  val io = IO(new Bundle {\n  val in = Flipped(DecoupledIO(UInt(8.W)))\n  val out = DecoupledIO(UInt(8.W))\n  })\n  val p = Module(new PipelineStage)\n  val c = Module(new PipelineStage)\n  // \u8fde\u63a5\u751f\u4ea7\u8005\u5230I/O\n  io.in &lt;&gt; p.io.a\n  // \u8fde\u63a5\u751f\u4ea7\u8005\u5230\u6d88\u8d39\u8005\n  p.io.b &lt;&gt; c.io.a\n  // \u8fde\u63a5\u6d88\u8d39\u8005\u5230I/O\n  c.io.b &lt;&gt; io.out\n}\nclass PipelineStage extends Module{\n  val io = IO(new Bundle{\n    val a = Flipped(DecoupledIO(UInt(8.W)))\n    val b = DecoupledIO(UInt(8.W))\n  })\n  io.a &lt;&gt; io.b\n}\n</code></pre> \u4e0b\u9762\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u8fd9\u4e2a\u793a\u4f8b\u7684\u751f\u6210Verilog\uff1a <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new Wrapper)\n</code></pre></p>"},{"location":"chisel_explanation/connection-operators/#_3","title":"\u7ed3\u8bba\uff1a","text":"<p>Verilog\u4fdd\u6301\u4e0d\u53d8\uff0c\u6ca1\u6709\u4ea7\u751f\u9519\u8bef\uff0c\u8868\u660e <code>&lt;&gt;</code> \u8fd0\u7b97\u7b26\u662f\u53ef\u4ea4\u6362\u7684\u3002</p>"},{"location":"chisel_explanation/connection-operators/#2-rhslhslhs","title":"\u6982\u5ff52\uff1a<code>:=</code> \u8868\u793a\u4eceRHS\u5206\u914d\u6240\u6709LHS\u4fe1\u53f7\uff0c\u65e0\u8bbaLHS\u7684\u65b9\u5411\u5982\u4f55\u3002","text":"<p>\u4f7f\u7528\u4e0e\u4e0a\u9762\u76f8\u540c\u7684\u5b9e\u9a8c\u4ee3\u7801\uff0c\u6211\u4eec\u8bbe\u7f6e\u6d4b\u8bd5 <code>:=</code> \u7684\u529f\u80fd \u6211\u4eec\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4ee3\u7801\u4e2d\u5c06\u6240\u6709 <code>&lt;&gt;</code> \u5b9e\u4f8b\u66ff\u6362\u4e3a <code>:=</code>\u3002 (\u5b9e\u9a8c\u7684Scastie\u94fe\u63a5\uff1ahttps://scastie.scala-lang.org/Shorla/o1ShdaY3RWKf0IIFwwQ1UQ/1)</p> <p><pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\nimport chisel3.util.DecoupledIO\n\nclass Wrapper extends Module{\n  val io = IO(new Bundle {\n  val in = Flipped(DecoupledIO(UInt(8.W)))\n  val out = DecoupledIO(UInt(8.W))\n  })\n  val p = Module(new PipelineStage)\n  val c = Module(new PipelineStage)\n  // \u8fde\u63a5\u751f\u4ea7\u8005\u5230I/O\n  p.io.a := io.in\n  // \u8fde\u63a5\u751f\u4ea7\u8005\u5230\u6d88\u8d39\u8005\n  c.io.a := p.io.b\n  // \u8fde\u63a5\u6d88\u8d39\u8005\u5230I/O\n  io.out := c.io.b\n}\nclass PipelineStage extends Module{\n  val io = IO(new Bundle{\n    val a = Flipped(DecoupledIO(UInt(8.W)))\n    val b = DecoupledIO(UInt(8.W))\n  })\n  io.a := io.b\n}\n</code></pre> \u4e0b\u9762\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u8fd9\u4e2a\u793a\u4f8b\u7684\u9519\u8bef\u6d88\u606f\uff1a <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:crash\ncirct.stage.ChiselStage.emitSystemVerilog(new Wrapper)\n</code></pre></p>"},{"location":"chisel_explanation/connection-operators/#_4","title":"\u7ed3\u8bba\uff1a","text":"<p><code>:=</code> \u8fd0\u7b97\u7b26\u9010\u5b57\u6bb5\u904d\u5386LHS\uff0c\u5e76\u5c1d\u8bd5\u5c06\u5176\u8fde\u63a5\u5230RHS\u4e2d\u5177\u6709\u76f8\u540c\u540d\u79f0\u7684\u4fe1\u53f7\u3002\u5982\u679cLHS\u4e0a\u7684\u67d0\u4e2a\u5185\u5bb9\u5b9e\u9645\u4e0a\u662fInput\uff0c\u6216\u8005RHS\u4e0a\u76f8\u5e94\u7684\u4fe1\u53f7\u662fOutput\uff0c\u5219\u4f1a\u51fa\u73b0\u5982\u4e0a\u6240\u793a\u7684\u9519\u8bef\u3002</p>"},{"location":"chisel_explanation/connection-operators/#3-dontcare-wires","title":"\u6982\u5ff53\uff1a\u59cb\u7ec8\u4f7f\u7528 <code>:=</code> \u5c06 DontCare \u5206\u914d\u7ed9 Wires","text":"<p>\u5f53\u5c06 <code>DontCare</code> \u5206\u914d\u7ed9\u6ca1\u6709\u65b9\u5411\u7684\u5185\u5bb9\u65f6\uff0c\u5e94\u8be5\u4f7f\u7528 <code>:=</code> \u8fd8\u662f <code>&lt;&gt;</code>\uff1f \u6211\u4eec\u5c06\u4f7f\u7528\u4e0b\u9762\u7684\u793a\u4f8b\u4ee3\u7801\u627e\u51fa\u7b54\u6848\uff1a \uff08\u5b9e\u9a8c\u7684Scastie\u94fe\u63a5\uff1ahttps://scastie.scala-lang.org/Shorla/ZIGsWcylRqKJhZCkKWlSIA/1\uff09</p> <p><pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\nimport chisel3.util.DecoupledIO\n\nclass Wrapper extends Module{\n  val io = IO(new Bundle {\n  val in = Flipped(DecoupledIO(UInt(8.W)))\n  val out = DecoupledIO(UInt(8.W))\n  })\n  val p = Module(new PipelineStage)\n  val c = Module(new PipelineStage)\n  //connect Producer to IO\n  io.in := DontCare\n  p.io.a &lt;&gt; DontCare\n  val tmp = Wire(Flipped(DecoupledIO(UInt(8.W))))\n  tmp := DontCare\n  p.io.a &lt;&gt; io.in\n  // connect producer to consumer\n  c.io.a &lt;&gt; p.io.b\n  //connect consumer to IO\n  io.out &lt;&gt; c.io.b\n}\nclass PipelineStage extends Module{\n  val io = IO(new Bundle{\n    val a = Flipped(DecoupledIO(UInt(8.W)))\n    val b = DecoupledIO(UInt(8.W))\n  })\n  io.b &lt;&gt; io.a\n}\n</code></pre> Below we can see the resulting Verilog for this example: <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new Wrapper)\n</code></pre></p>"},{"location":"chisel_explanation/connection-operators/#_5","title":"\u7ed3\u8bba\uff1a","text":"<p>\u5982\u679c\u4f7f\u7528 <code>&lt;&gt;</code> \u5c06\u65e0\u65b9\u5411\u7684wire <code>tmp</code> \u5206\u914d\u7ed9 DontCare\uff0c\u6211\u4eec\u4f1a\u5f97\u5230\u4e00\u4e2a\u9519\u8bef\u3002\u4f46\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 <code>:=</code> \u5e76\u4e14\u6ca1\u6709\u53d1\u751f\u9519\u8bef\u3002 \u5f53\u4f7f\u7528 <code>:=</code> \u5c06wire\u5206\u914d\u7ed9DontCare\u65f6\uff0c\u4e0d\u4f1a\u53d1\u751f\u9519\u8bef\u3002</p> <p>\u56e0\u6b64\uff0c\u5f53\u5c06 <code>DontCare</code> \u5206\u914d\u7ed9 <code>Wire</code> \u65f6\uff0c\u59cb\u7ec8\u4f7f\u7528 <code>:=</code>\u3002</p>"},{"location":"chisel_explanation/connection-operators/#4-dontcare-ios","title":"\u6982\u5ff54\uff1a\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>&lt;&gt;</code> \u6216 <code>:=</code> \u5c06 <code>DontCare</code> \u5206\u914d\u7ed9\u6709\u65b9\u5411\u7684\u5185\u5bb9\uff08IOs\uff09","text":"<p>\u5f53\u5c06 <code>DontCare</code> \u5206\u914d\u7ed9\u6709\u65b9\u5411\u7684\u5185\u5bb9\u65f6\uff0c\u5e94\u8be5\u4f7f\u7528 <code>:=</code> \u8fd8\u662f <code>&lt;&gt;</code>\uff1f \u6211\u4eec\u5c06\u4f7f\u7528\u4e0b\u9762\u7684\u793a\u4f8b\u4ee3\u7801\u627e\u51fa\u7b54\u6848\uff1a \uff08\u5b9e\u9a8c\u7684Scastie\u94fe\u63a5\uff1ahttps://scastie.scala-lang.org/Shorla/ZIGsWcylRqKJhZCkKWlSIA/1\uff09</p> <p><pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\nimport chisel3.util.DecoupledIO\n\nclass Wrapper extends Module{\n  val io = IO(new Bundle {\n  val in = Flipped(DecoupledIO(UInt(8.W)))\n  val out = DecoupledIO(UInt(8.W))\n  })\n  val p = Module(new PipelineStage)\n  val c = Module(new PipelineStage)\n  //connect Producer to IO\n  io.in := DontCare\n  p.io.a &lt;&gt; DontCare\n  val tmp = Wire(Flipped(DecoupledIO(UInt(8.W))))\n  tmp := DontCare\n  p.io.a &lt;&gt; io.in\n  // connect producer to consumer\n  c.io.a &lt;&gt; p.io.b\n  //connect consumer to IO\n  io.out &lt;&gt; c.io.b\n}\nclass PipelineStage extends Module{\n  val io = IO(new Bundle{\n    val a = Flipped(DecoupledIO(UInt(8.W)))\n    val b = DecoupledIO(UInt(8.W))\n  })\n  io.b &lt;&gt; io.a\n}\n</code></pre> \u4e0b\u9762\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u8fd9\u4e2a\u793a\u4f8b\u7684\u751f\u6210Verilog\uff1a <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new Wrapper)\n</code></pre></p>"},{"location":"chisel_explanation/connection-operators/#_6","title":"\u7ed3\u8bba\uff1a","text":"<p><code>&lt;&gt;</code> \u548c <code>:=</code> \u90fd\u53ef\u4ee5\u7528\u4e8e\u5c06\u6709\u65b9\u5411\u7684\u5185\u5bb9\uff08IOs\uff09\u5206\u914d\u7ed9DontCare\uff0c\u5982\u5206\u522b\u5728 <code>io.in</code> \u548c <code>p.io.a</code> \u4e2d\u6240\u793a\u3002\u8fd9\u57fa\u672c\u4e0a\u662f\u7b49\u6548\u7684\uff0c\u56e0\u4e3a\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c<code>&lt;&gt;</code> \u548c <code>:=</code> \u90fd\u5c06\u4eceLHS\u786e\u5b9a\u65b9\u5411\u3002</p>"},{"location":"chisel_explanation/connection-operators/#5-ioio","title":"\u6982\u5ff55\uff1a<code>&lt;&gt;</code> \u5728\u81f3\u5c11\u6709\u4e00\u4e2a\u5df2\u77e5\u6d41\u5411\u7684\u5185\u5bb9\u4e4b\u95f4\u5de5\u4f5c\uff08IO\u6216\u5b50IO\uff09\u3002","text":"<p>\u5982\u679c\u81f3\u5c11\u6709\u4e00\u4e2a\u5df2\u77e5\u6d41\u5411\uff0c<code>&lt;&gt;</code> \u4f1a\u505a\u4ec0\u4e48\uff1f\u8fd9\u5c06\u901a\u8fc7\u4e0b\u9762\u7684\u5b9e\u9a8c\u4ee3\u7801\u5c55\u793a\uff1a \uff08\u5b9e\u9a8c\u7684Scastie\u94fe\u63a5\uff1ahttps://scastie.scala-lang.org/Shorla/gKx9ReLVTTqDTk9vmw5ozg\uff09</p> <p><pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\nimport chisel3.util.DecoupledIO\n\nclass Wrapper extends Module{\n  val io = IO(new Bundle {\n  val in = Flipped(DecoupledIO(UInt(8.W)))\n  val out = DecoupledIO(UInt(8.W))\n  })\n  val p = Module(new PipelineStage)\n  val c = Module(new PipelineStage)\n  //\u8fde\u63a5\u751f\u4ea7\u8005\u5230IO\n    // \u5bf9\u4e8e\u8fd9\u4e2a\u5b9e\u9a8c\uff0c\u6211\u4eec\u6dfb\u52a0\u4e00\u4e2a\u4e34\u65f6wire\u770b\u770b\u662f\u5426\u6709\u6548...\n  //p.io.a &lt;&gt; io.in\n  val tmp = Wire(DecoupledIO(UInt(8.W)))\n  // \u8fde\u63a5\u4e2d\u95f4wire\n  tmp &lt;&gt; io.in\n  p.io.a &lt;&gt; tmp\n  // \u8fde\u63a5\u751f\u4ea7\u8005\u5230\u6d88\u8d39\u8005\n  c.io.a &lt;&gt; p.io.b\n  //\u8fde\u63a5\u6d88\u8d39\u8005\u5230IO\n  io.out &lt;&gt; c.io.b\n}\nclass PipelineStage extends Module{\n  val io = IO(new Bundle{\n    val a = Flipped(DecoupledIO(UInt(8.W)))\n    val b = DecoupledIO(UInt(8.W))\n  })\n  io.b &lt;&gt; io.a\n}\n</code></pre> \u4e0b\u9762\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u8fd9\u4e2a\u793a\u4f8b\u7684\u751f\u6210Verilog\uff1a <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nchisel3.docs.emitSystemVerilog(new Wrapper)\n</code></pre></p>"},{"location":"chisel_explanation/connection-operators/#_7","title":"\u7ed3\u8bba\uff1a","text":"<p>\u4e0a\u8ff0\u8fde\u63a5\u987a\u5229\u8fdb\u884c\uff0c\u6ca1\u6709\u9519\u8bef\uff0c\u8fd9\u8868\u660e\u53ea\u8981\u6709\u81f3\u5c11\u4e00\u4e2a\u6709\u65b9\u5411\u7684\u5185\u5bb9\uff08IO\u6216\u5b50\u6a21\u5757\u7684IO\uff09\u6765\"\u56fa\u5b9a\"\u65b9\u5411\uff0c<code>&lt;&gt;</code> \u5c31\u53ef\u4ee5\u5de5\u4f5c\u3002</p>"},{"location":"chisel_explanation/connection-operators/#6","title":"\u6982\u5ff56\uff1a<code>&lt;&gt;</code> \u548c <code>:=</code> \u901a\u8fc7\u5b57\u6bb5\u540d\u79f0\u8fde\u63a5\u4fe1\u53f7\u3002","text":"<p>\u8fd9\u4e2a\u5b9e\u9a8c\u521b\u5efa\u4e86\u4e00\u4e2aMockDecoupledIO\uff0c\u5b83\u4e0eDecoupledIO\u5177\u6709\u76f8\u540c\u540d\u79f0\u7684\u5b57\u6bb5\u3002Chisel\u5141\u8bb8\u6211\u4eec\u8fde\u63a5\u5b83\u5e76\u751f\u6210\u76f8\u540c\u7684verilog\uff0c\u5373\u4f7fMockDecoupledIO\u548cDecoupledIO\u662f\u4e0d\u540c\u7684\u7c7b\u578b\u3002 \uff08\u5b9e\u9a8c\u7684Scastie\u94fe\u63a5\uff1ahttps://scastie.scala-lang.org/Uf4tQquvQYigZAW705NFIQ\uff09</p> <p><pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\nimport chisel3.util.DecoupledIO\n\nclass MockDecoupledIO extends Bundle {\n  val valid = Output(Bool())\n  val ready = Input(Bool())\n  val bits = Output(UInt(8.W))\n}\nclass Wrapper extends Module{\n  val io = IO(new Bundle {\n  val in = Flipped(new MockDecoupledIO())\n  val out = new MockDecoupledIO()\n  })\n  val p = Module(new PipelineStage)\n  val c = Module(new PipelineStage)\n  // \u8fde\u63a5\u751f\u4ea7\u8005\u5230I/O\n  p.io.a &lt;&gt; io.in\n  // \u8fde\u63a5\u751f\u4ea7\u8005\u5230\u6d88\u8d39\u8005\n  c.io.a &lt;&gt; p.io.b\n  // \u8fde\u63a5\u6d88\u8d39\u8005\u5230I/O\n  io.out &lt;&gt; c.io.b\n}\nclass PipelineStage extends Module{\n  val io = IO(new Bundle{\n    val a = Flipped(DecoupledIO(UInt(8.W)))\n    val b = DecoupledIO(UInt(8.W))\n  })\n  io.a &lt;&gt; io.b\n}\n</code></pre> \u4e0b\u9762\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u8fd9\u4e2a\u793a\u4f8b\u7684\u751f\u6210Verilog\uff1a <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new Wrapper)\n</code></pre> \u8fd9\u91cc\u662f\u53e6\u4e00\u4e2a\u5b9e\u9a8c\uff0c\u6211\u4eec\u5220\u9664\u4e86MockDecoupledIO\u7684\u4e00\u4e2a\u5b57\u6bb5\uff1a \uff08\u5b9e\u9a8c\u7684Scastie\u94fe\u63a5\uff1ahttps://scastie.scala-lang.org/ChtkhKCpS9CvJkjjqpdeIA\uff09</p> <p><pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\nimport chisel3.util.DecoupledIO\n\nclass MockDecoupledIO extends Bundle {\n  val valid = Output(Bool())\n  val ready = Input(Bool())\n  //val bits = Output(UInt(8.W))\n}\nclass Wrapper extends Module{\n  val io = IO(new Bundle {\n  val in = Flipped(new MockDecoupledIO())\n  val out = new MockDecoupledIO()\n  })\n  val p = Module(new PipelineStage)\n  val c = Module(new PipelineStage)\n  // \u8fde\u63a5\u751f\u4ea7\u8005\u5230I/O\n  p.io.a &lt;&gt; io.in\n  // \u8fde\u63a5\u751f\u4ea7\u8005\u5230\u6d88\u8d39\u8005\n  c.io.a &lt;&gt; p.io.b\n  // \u8fde\u63a5\u6d88\u8d39\u8005\u5230I/O\n  io.out &lt;&gt; c.io.b\n}\nclass PipelineStage extends Module{\n  val io = IO(new Bundle{\n    val a = Flipped(DecoupledIO(UInt(8.W)))\n    val b = DecoupledIO(UInt(8.W))\n  })\n  io.a &lt;&gt; io.b\n}\n</code></pre> \u4e0b\u9762\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u8fd9\u4e2a\u793a\u4f8b\u7684\u9519\u8bef\u4fe1\u606f\uff1a <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:crash\ncirct.stage.ChiselStage.emitSystemVerilog(new Wrapper)\n</code></pre> \u8fd9\u4e2a\u5931\u8d25\u662f\u56e0\u4e3a\u7f3a\u5c11\u4e86 <code>bits</code> \u5b57\u6bb5\u3002</p>"},{"location":"chisel_explanation/connection-operators/#_8","title":"\u7ed3\u8bba\uff1a","text":"<p>\u5bf9\u4e8e <code>:=</code>\uff0cScala\u7c7b\u578b\u4e0d\u9700\u8981\u5339\u914d\uff0c\u4f46RHS\u5fc5\u987b\u63d0\u4f9bLHS\u4e0a\u7684\u6240\u6709\u4fe1\u53f7\uff0c\u5426\u5219\u5c06\u51fa\u73b0Chisel\u7f16\u8bd1\u9519\u8bef\u3002RHS\u4e0a\u53ef\u80fd\u6709\u989d\u5916\u7684\u4fe1\u53f7\uff0c\u8fd9\u4e9b\u4fe1\u53f7\u5c06\u88ab\u5ffd\u7565\u3002\u5bf9\u4e8e <code>&lt;&gt;</code>\uff0cScala\u7c7b\u578b\u4e0d\u9700\u8981\u5339\u914d\uff0c\u4f46LHS\u548cRHS\u4e4b\u95f4\u7684\u6240\u6709\u4fe1\u53f7\u5fc5\u987b\u5b8c\u5168\u5339\u914d\u3002\u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b57\u6bb5\u7684\u987a\u5e8f\u65e0\u5173\u7d27\u8981\u3002</p>"},{"location":"chisel_explanation/data-types/","title":"Chisel\u6570\u636e\u7c7b\u578b","text":"<p>Chisel\u6570\u636e\u7c7b\u578b\u7528\u4e8e\u6307\u5b9a\u72b6\u6001\u5143\u7d20\u4e2d\u4fdd\u5b58\u7684\u503c\u6216\u5728\u7ebf\u8def\u4e0a\u6d41\u52a8\u7684\u503c\u7684\u7c7b\u578b\u3002\u867d\u7136\u786c\u4ef6\u8bbe\u8ba1\u6700\u7ec8\u64cd\u4f5c\u7684\u662f\u4e8c\u8fdb\u5236\u6570\u5b57\u5411\u91cf\uff0c\u4f46\u5176\u4ed6\u66f4\u62bd\u8c61\u7684\u503c\u8868\u793a\u65b9\u5f0f\u53ef\u4ee5\u8ba9\u89c4\u8303\u66f4\u6e05\u6670\uff0c\u5e76\u5e2e\u52a9\u5de5\u5177\u751f\u6210\u66f4\u4f18\u7684\u7535\u8def\u3002\u5728Chisel\u4e2d\uff0c\u539f\u59cb\u7684\u4f4d\u96c6\u5408\u7531<code>Bits</code>\u7c7b\u578b\u8868\u793a\u3002\u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\u6574\u6570\u88ab\u89c6\u4e3a\u5b9a\u70b9\u6570\u7684\u5b50\u96c6\uff0c\u5206\u522b\u7531\u7c7b\u578b<code>SInt</code>\u548c<code>UInt</code>\u8868\u793a\u3002\u6709\u7b26\u53f7\u5b9a\u70b9\u6570\uff08\u5305\u62ec\u6574\u6570\uff09\u4f7f\u7528\u4e8c\u8fdb\u5236\u8865\u7801\u683c\u5f0f\u8868\u793a\u3002\u5e03\u5c14\u503c\u8868\u793a\u4e3a\u7c7b\u578b<code>Bool</code>\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e9b\u7c7b\u578b\u4e0eScala\u7684\u5185\u7f6e\u7c7b\u578b\uff08\u5982<code>Int</code>\u6216<code>Boolean</code>\uff09\u662f\u4e0d\u540c\u7684\u3002</p> <p>\u6b64\u5916\uff0cChisel\u5b9a\u4e49\u4e86<code>Bundles</code>\u7528\u4e8e\u521b\u5efa\u5177\u6709\u547d\u540d\u5b57\u6bb5\u7684\u503c\u96c6\u5408\uff08\u7c7b\u4f3c\u4e8e\u5176\u4ed6\u8bed\u8a00\u4e2d\u7684<code>structs</code>\uff09\uff0c\u4ee5\u53ca<code>Vecs</code>\u7528\u4e8e\u53ef\u7d22\u5f15\u7684\u503c\u96c6\u5408\u3002</p> <p>Bundles\u548cVecs\u5c06\u5728\u4e0b\u4e00\u8282\u4e2d\u4ecb\u7ecd\u3002</p> <p>\u5e38\u91cf\u6216\u5b57\u9762\u503c\u901a\u8fc7\u4f20\u9012\u7ed9\u7c7b\u578b\u6784\u9020\u51fd\u6570\u7684Scala\u6574\u6570\u6216\u5b57\u7b26\u4e32\u8868\u793a\uff1a <pre><code>1.U       // \u4eceScala Int\u5f97\u5230\u7684\u5341\u8fdb\u52361\u4f4d\u5b57\u9762\u503c\n\"ha\".U    // \u4ece\u5b57\u7b26\u4e32\u5f97\u5230\u7684\u5341\u516d\u8fdb\u52364\u4f4d\u5b57\u9762\u503c\n\"o12\".U   // \u4ece\u5b57\u7b26\u4e32\u5f97\u5230\u7684\u516b\u8fdb\u52364\u4f4d\u5b57\u9762\u503c\n\"b1010\".U // \u4ece\u5b57\u7b26\u4e32\u5f97\u5230\u7684\u4e8c\u8fdb\u52364\u4f4d\u5b57\u9762\u503c\n\n5.S    // \u6709\u7b26\u53f7\u5341\u8fdb\u52364\u4f4d\u5b57\u9762\u503c\uff0c\u6765\u81eaScala Int\n-8.S   // \u8d1f\u5341\u8fdb\u52364\u4f4d\u5b57\u9762\u503c\uff0c\u6765\u81eaScala Int\n5.U    // \u65e0\u7b26\u53f7\u5341\u8fdb\u52363\u4f4d\u5b57\u9762\u503c\uff0c\u6765\u81eaScala Int\n\n8.U(4.W) // 4\u4f4d\u65e0\u7b26\u53f7\u5341\u8fdb\u5236\uff0c\u503c\u4e3a8\n-152.S(32.W) // 32\u4f4d\u6709\u7b26\u53f7\u5341\u8fdb\u5236\uff0c\u503c\u4e3a-152\n\ntrue.B // \u4eceScala\u5b57\u9762\u503c\u5f97\u5230\u7684Bool\u5b57\u9762\u503c\nfalse.B\n</code></pre> \u4e0b\u5212\u7ebf\u53ef\u4ee5\u7528\u4f5c\u957f\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u4e2d\u7684\u5206\u9694\u7b26\u4ee5\u63d0\u9ad8\u53ef\u8bfb\u6027\uff0c\u4f46\u5728\u521b\u5efa\u503c\u65f6\u4f1a\u88ab\u5ffd\u7565\uff0c\u4f8b\u5982\uff1a <pre><code>\"h_dead_beef\".U   // 32\u4f4dUInt\u7c7b\u578b\u7684\u5b57\u9762\u503c\n</code></pre></p> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cChisel\u7f16\u8bd1\u5668\u4f1a\u5c06\u6bcf\u4e2a\u5e38\u91cf\u7684\u5927\u5c0f\u8c03\u6574\u4e3a\u4fdd\u5b58\u8be5\u5e38\u91cf\u6240\u9700\u7684\u6700\u5c0f\u4f4d\u6570\uff0c\u5bf9\u4e8e\u6709\u7b26\u53f7\u7c7b\u578b\u8fd8\u5305\u62ec\u4e00\u4e2a\u7b26\u53f7\u4f4d\u3002\u4f4d\u5bbd\u4e5f\u53ef\u4ee5\u5728\u5b57\u9762\u503c\u4e0a\u663e\u5f0f\u6307\u5b9a\uff0c\u5982\u4e0b\u6240\u793a\u3002\u6ce8\u610f\uff08<code>.W</code>\u7528\u4e8e\u5c06Scala Int\u8f6c\u6362\u4e3aChisel\u5bbd\u5ea6\uff09 <pre><code>\"ha\".asUInt(8.W)     // \u5341\u516d\u8fdb\u52368\u4f4dUInt\u7c7b\u578b\u7684\u5b57\u9762\u503c\n\"o12\".asUInt(6.W)    // \u516b\u8fdb\u52366\u4f4dUInt\u7c7b\u578b\u7684\u5b57\u9762\u503c\n\"b1010\".asUInt(12.W) // \u4e8c\u8fdb\u523612\u4f4dUInt\u7c7b\u578b\u7684\u5b57\u9762\u503c\n\n5.asSInt(7.W) // \u6709\u7b26\u53f7\u5341\u8fdb\u52367\u4f4dSInt\u5b57\u9762\u503c\n5.asUInt(8.W) // \u65e0\u7b26\u53f7\u5341\u8fdb\u52368\u4f4dUInt\u5b57\u9762\u503c\n</code></pre></p> <p>\u5bf9\u4e8e<code>UInt</code>\u7c7b\u578b\u7684\u5b57\u9762\u503c\uff0c\u503c\u4f1a\u88ab\u96f6\u6269\u5c55\u5230\u6240\u9700\u7684\u4f4d\u5bbd\u3002\u5bf9\u4e8e<code>SInt</code>\u7c7b\u578b\u7684\u5b57\u9762\u503c\uff0c\u503c\u4f1a\u88ab\u7b26\u53f7\u6269\u5c55\u4ee5\u586b\u5145\u6240\u9700\u7684\u4f4d\u5bbd\u3002\u5982\u679c\u7ed9\u5b9a\u7684\u4f4d\u5bbd\u592a\u5c0f\u800c\u65e0\u6cd5\u5bb9\u7eb3\u53c2\u6570\u503c\uff0c\u5219\u4f1a\u751f\u6210Chisel\u9519\u8bef\u3002</p> <p>\u6211\u4eec\u6b63\u5728\u4e3aChisel\u5f00\u53d1\u4e00\u79cd\u66f4\u7b80\u6d01\u7684\u5b57\u9762\u503c\u8bed\u6cd5\uff0c\u4f7f\u7528\u7b26\u53f7\u524d\u7f00\u8fd0\u7b97\u7b26\uff0c\u4f46\u53d7\u5230Scala\u8fd0\u7b97\u7b26\u91cd\u8f7d\u9650\u5236\u7684\u963b\u788d\uff0c\u5c1a\u672a\u786e\u5b9a\u4e00\u79cd\u6bd4\u63a5\u53d7\u5b57\u7b26\u4e32\u7684\u6784\u9020\u51fd\u6570\u66f4\u53ef\u8bfb\u7684\u8bed\u6cd5\u3002</p> <p>\u6211\u4eec\u8fd8\u8003\u8651\u8fc7\u5141\u8bb8Scala\u5b57\u9762\u503c\u81ea\u52a8\u8f6c\u6362\u4e3aChisel\u7c7b\u578b\uff0c\u4f46\u8fd9\u53ef\u80fd\u5bfc\u81f4\u7c7b\u578b\u6b67\u4e49\uff0c\u5e76\u9700\u8981\u989d\u5916\u7684\u5bfc\u5165\u3002</p> <p>SInt\u548cUInt\u7c7b\u578b\u4ee5\u540e\u8fd8\u5c06\u652f\u6301\u53ef\u9009\u7684\u6307\u6570\u5b57\u6bb5\uff0c\u4ee5\u5141\u8bb8Chisel\u81ea\u52a8\u751f\u6210\u4f18\u5316\u7684\u5b9a\u70b9\u7b97\u672f\u7535\u8def\u3002</p>"},{"location":"chisel_explanation/data-types/#_1","title":"\u7c7b\u578b\u8f6c\u6362","text":"<p>\u6211\u4eec\u4e5f\u53ef\u4ee5\u5728Chisel\u4e2d\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362\uff1a</p> <pre><code>val sint = 3.S(4.W)             // 4\u4f4dSInt\n\nval uint = sint.asUInt          // \u5c06SInt\u8f6c\u6362\u4e3aUInt\nuint.asSInt                     // \u5c06UInt\u8f6c\u6362\u4e3aSInt\n</code></pre> <p>\u6ce8\u610f\uff1a\u5e26\u6709\u663e\u5f0f\u5bbd\u5ea6\u7684<code>asUInt</code>/<code>asSInt</code>\u4e0d\u80fd\u7528\u4e8e\u5728Chisel\u6570\u636e\u7c7b\u578b\u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\u3002 \u4e0d\u63a5\u53d7\u5bbd\u5ea6\u53c2\u6570\uff0c\u56e0\u4e3a\u5f53\u5bf9\u8c61\u8fde\u63a5\u65f6\uff0cChisel\u4f1a\u81ea\u52a8\u8fdb\u884c\u586b\u5145\u6216\u622a\u65ad\u3002</p> <p>\u6211\u4eec\u4e5f\u53ef\u4ee5\u5bf9\u65f6\u949f\u8fdb\u884c\u8f6c\u6362\uff0c\u4e0d\u8fc7\u4f60\u5e94\u8be5\u5bf9\u6b64\u4fdd\u6301\u8c28\u614e\uff0c\u56e0\u4e3a\u65f6\u949f\uff08\u5c24\u5176\u662f\u5728ASIC\u4e2d\uff09\u9700\u8981\u7279\u522b\u6ce8\u610f\uff1a</p> <pre><code>val bool: Bool = false.B        // \u59cb\u7ec8\u4e3a\u4f4e\u7535\u5e73\u7684\u7ebf\nval clock = bool.asClock        // \u59cb\u7ec8\u4e3a\u4f4e\u7535\u5e73\u7684\u65f6\u949f\n\nclock.asUInt                    // \u5c06\u65f6\u949f\u8f6c\u6362\u4e3aUInt\uff08\u5bbd\u5ea6\u4e3a1\uff09\nclock.asUInt.asBool             // \u5c06\u65f6\u949f\u8f6c\u6362\u4e3aBool\uff08Chisel 3.2+\uff09\nclock.asUInt.toBool             // \u5c06\u65f6\u949f\u8f6c\u6362\u4e3aBool\uff08\u4ec5Chisel 3.0\u548c3.1\uff09\n</code></pre>"},{"location":"chisel_explanation/data-types/#analogblackbox","title":"Analog/BlackBox\u7c7b\u578b","text":"<p>\uff08\u5b9e\u9a8c\u6027\u529f\u80fd\uff0cChisel 3.1+\uff09</p> <p>Chisel\u652f\u6301<code>Analog</code>\u7c7b\u578b\uff08\u7b49\u540c\u4e8eVerilog\u7684<code>inout</code>\uff09\uff0c\u53ef\u7528\u4e8e\u652f\u6301Chisel\u4e2d\u7684\u4efb\u610f\u7f51\u7edc\u3002\u8fd9\u5305\u62ec\u6a21\u62df\u7ebf\u8def\u3001\u4e09\u6001/\u53cc\u5411\u7ebf\u8def\u548c\u7535\u6e90\u7f51\u7edc\uff08\u4f7f\u7528\u9002\u5f53\u7684\u6ce8\u89e3\uff09\u3002</p> <p><code>Analog</code>\u662f\u4e00\u4e2a\u65e0\u65b9\u5411\u7c7b\u578b\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528<code>attach</code>\u8fd0\u7b97\u7b26\u5c06\u591a\u4e2a<code>Analog</code>\u7f51\u7edc\u8fde\u63a5\u5728\u4e00\u8d77\u3002\u53ef\u4ee5\u4f7f\u7528<code>&lt;&gt;</code>\u4e00\u6b21\u8fde\u63a5<code>Analog</code>\uff0c\u4f46\u591a\u6b21\u8fde\u63a5\u662f\u975e\u6cd5\u7684\u3002</p> <pre><code>val a = IO(Analog(1.W))\nval b = IO(Analog(1.W))\nval c = IO(Analog(1.W))\n\n// \u5408\u6cd5\nattach(a, b)\nattach(a, c)\n\n// \u5408\u6cd5\na &lt;&gt; b\n\n// \u975e\u6cd5 - \u591a\u6b21\u8fde\u63a5'a'\na &lt;&gt; b\na &lt;&gt; c\n</code></pre>"},{"location":"chisel_explanation/dataview/","title":"DataView","text":"<p>Chisel 3.5 \u4e2d\u7684\u65b0\u529f\u80fd</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\nimport chisel3._\n</code></pre>"},{"location":"chisel_explanation/dataview/#_1","title":"\u7b80\u4ecb","text":"<p>DataView \u662f\u4e00\u79cd\u5c06 Scala \u5bf9\u8c61\u89c6\u4e3a <code>chisel3.Data</code> \u5b50\u7c7b\u578b\u7684\u673a\u5236\u3002 \u901a\u5e38\uff0c\u8fd9\u5bf9\u4e8e\u5c06 <code>chisel3.Data</code> \u7684\u4e00\u4e2a\u5b50\u7c7b\u578b\u89c6\u4e3a\u53e6\u4e00\u4e2a\u5b50\u7c7b\u578b\u5f88\u6709\u7528\u3002 \u53ef\u4ee5\u5c06 <code>DataView</code> \u89c6\u4e3a\u4ece \u76ee\u6807 \u7c7b\u578b <code>T</code> \u5230 \u89c6\u56fe \u7c7b\u578b <code>V</code> \u7684\u6620\u5c04\u3002 \u8fd9\u7c7b\u4f3c\u4e8e\u7c7b\u578b\u8f6c\u6362\uff08\u5982 <code>.asTypeOf</code>\uff09\uff0c\u4f46\u6709\u51e0\u4e2a\u533a\u522b\uff1a 1. \u89c6\u56fe\u662f \u53ef\u8fde\u63a5\u7684 \u2014\u5bf9\u89c6\u56fe\u7684\u8fde\u63a5\u5c06\u53d1\u751f\u5728\u76ee\u6807\u4e0a 2. \u4e0e\u7ed3\u6784\u6027\u7684\u7c7b\u578b\u8f6c\u6362\uff08\u5bf9\u5e95\u5c42\u4f4d\u7684\u91cd\u65b0\u89e3\u91ca\uff09\u4e0d\u540c\uff0cDataView \u662f\u4e00\u79cd\u53ef\u5b9a\u5236\u7684\u6620\u5c04 3. \u89c6\u56fe\u53ef\u4ee5\u662f \u90e8\u5206\u7684 \u2014\u76ee\u6807\u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bb5\u4e0d\u5fc5\u90fd\u5305\u542b\u5728\u6620\u5c04\u4e2d</p>"},{"location":"chisel_explanation/dataview/#axi4","title":"\u4e00\u4e2a\u6fc0\u52b1\u6027\u793a\u4f8b (AXI4)","text":"<p>AXI4 \u662f\u6570\u5b57\u8bbe\u8ba1\u4e2d\u5e38\u89c1\u7684\u63a5\u53e3\u3002 \u4f7f\u7528 AXI4 \u7684\u5178\u578b Verilog \u5916\u8bbe\u5c06\u5b9a\u4e49\u5199\u901a\u9053\uff0c\u5982\u4e0b\u6240\u793a\uff1a <pre><code>module my_module(\n  // Write Channel\n  input        AXI_AWVALID,\n  output       AXI_AWREADY,\n  input [3:0]  AXI_AWID,\n  input [19:0] AXI_AWADDR,\n  input [1:0]  AXI_AWLEN,\n  input [1:0]  AXI_AWSIZE,\n  // ...\n);\n</code></pre></p> <p>\u8fd9\u5c06\u5bf9\u5e94\u4e8e\u4ee5\u4e0b Chisel Bundle\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nclass VerilogAXIBundle(val addrWidth: Int) extends Bundle {\n  val AWVALID = Output(Bool())\n  val AWREADY = Input(Bool())\n  val AWID = Output(UInt(4.W))\n  val AWADDR = Output(UInt(addrWidth.W))\n  val AWLEN = Output(UInt(2.W))\n  val AWSIZE = Output(UInt(2.W))\n  // The rest of AW and other AXI channels here\n}\n\n// Instantiated as\nclass my_module extends RawModule {\n  val AXI = IO(new VerilogAXIBundle(20))\n}\n</code></pre> <p>\u5728 Chisel \u8bbe\u8ba1\u4e2d\u5c06 Verilog \u6a21\u5757\u5b9e\u4f8b\u5316\u4e3a <code>BlackBoxes</code> \u65f6\uff0c\u8868\u793a\u4e0e\u6807\u51c6 Verilog \u63a5\u53e3\u5339\u914d\u7684\u5185\u5bb9\u975e\u5e38\u91cd\u8981\u3002 \u7136\u800c\uff0cChisel \u5f00\u53d1\u4eba\u5458\u901a\u5e38\u66f4\u559c\u6b22\u901a\u8fc7\u50cf <code>Decoupled</code> \u8fd9\u6837\u7684\u5b9e\u7528\u5de5\u5177\u4f7f\u7528\u7ec4\u5408\uff0c\u800c\u4e0d\u662f\u50cf\u4e0a\u9762\u90a3\u6837\u5e73\u9762\u5730\u5904\u7406 <code>ready</code> \u548c <code>valid</code>\u3002 \u8fd9\u4e2a\u63a5\u53e3\u7684\u66f4 \"Chisel \u5316\" \u5b9e\u73b0\u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\n// Note that both the AW and AR channels look similar and could use the same Bundle definition\nclass AXIAddressChannel(val addrWidth: Int) extends Bundle {\n  val id = UInt(4.W)\n  val addr = UInt(addrWidth.W)\n  val len = UInt(2.W)\n  val size = UInt(2.W)\n  // ...\n}\nimport chisel3.util.Decoupled\n// We can compose the various AXI channels together\nclass AXIBundle(val addrWidth: Int) extends Bundle {\n  val aw = Decoupled(new AXIAddressChannel(addrWidth))\n  // val ar = new AXIAddressChannel\n  // ... Other channels here ...\n}\n// Instantiated as\nclass MyModule extends RawModule {\n  val axi = IO(new AXIBundle(20))\n}\n</code></pre> <p>\u5f53\u7136\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u770b\u8d77\u6765\u975e\u5e38\u4e0d\u540c\u7684 Verilog\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new MyModule {\n  override def desiredName = \"MyModule\"\n  axi := DontCare // Just to generate Verilog in this stub\n})\n</code></pre> <p>\u90a3\u4e48\uff0c\u6211\u4eec\u5982\u4f55\u4f7f\u7528\u66f4\u7ed3\u6784\u5316\u7684\u7c7b\u578b\u540c\u65f6\u4fdd\u6301\u9884\u671f\u7684 Verilog \u63a5\u53e3\u5462\uff1f \u8ba4\u8bc6\u4e00\u4e0b DataView\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nimport chisel3.experimental.dataview._\n\n// We recommend putting DataViews in a companion object of one of the involved types\nobject AXIBundle {\n  // Don't be afraid of the use of implicits, we will discuss this pattern in more detail later\n  implicit val axiView: DataView[VerilogAXIBundle, AXIBundle] = DataView(\n    // The first argument is a function constructing an object of View type (AXIBundle)\n    // from an object of the Target type (VerilogAXIBundle)\n    vab =&gt; new AXIBundle(vab.addrWidth),\n    // The remaining arguments are a mapping of the corresponding fields of the two types\n    _.AWVALID -&gt; _.aw.valid,\n    _.AWREADY -&gt; _.aw.ready,\n    _.AWID -&gt; _.aw.bits.id,\n    _.AWADDR -&gt; _.aw.bits.addr,\n    _.AWLEN -&gt; _.aw.bits.len,\n    _.AWSIZE -&gt; _.aw.bits.size,\n    // ...\n  )\n}\n</code></pre> <p>\u8fd9\u4e2a <code>DataView</code> \u662f\u4ece\u6211\u4eec\u5e73\u5766\u7684\u3001Verilog \u98ce\u683c\u7684 AXI Bundle \u5230\u66f4\u5177\u7ec4\u5408\u6027\u7684 Chisel \u98ce\u683c\u7684 AXI Bundle \u7684\u6620\u5c04\u3002 \u5b83\u5141\u8bb8\u6211\u4eec\u5b9a\u4e49\u4e0e\u9884\u671f\u7684 Verilog \u63a5\u53e3\u5339\u914d\u7684\u7aef\u53e3\uff0c\u540c\u65f6\u64cd\u4f5c\u5b83\u5c31\u50cf\u5b83\u662f\u66f4\u7ed3\u6784\u5316\u7684\u7c7b\u578b\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nclass AXIStub extends RawModule {\n  val AXI = IO(new VerilogAXIBundle(20))\n  val view = AXI.viewAs[AXIBundle]\n\n  // We can now manipulate `AXI` via `view`\n  view.aw.bits := 0.U.asTypeOf(new AXIAddressChannel(20)) // zero everything out by default\n  view.aw.valid := true.B\n  when (view.aw.ready) {\n    view.aw.bits.id := 5.U\n    view.aw.bits.addr := 1234.U\n    // We can still manipulate AXI as well\n    AXI.AWLEN := 1.U\n  }\n}\n</code></pre> <p>\u8fd9\u5c06\u751f\u6210\u4e0e\u6807\u51c6\u547d\u540d\u7ea6\u5b9a\u5339\u914d\u7684 Verilog\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new AXIStub)\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u5982\u679c \u76ee\u6807 \u548c \u89c6\u56fe \u7c7b\u578b\u90fd\u662f <code>Data</code> \u7684\u5b50\u7c7b\u578b\uff08\u5982\u672c\u4f8b\u4e2d\u6240\u793a\uff09\uff0c \u5219 <code>DataView</code> \u662f \u53ef\u9006\u7684\u3002 \u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u5730\u4ece\u73b0\u6709\u7684 <code>DataView[VerilogAXIBundle, AXIBundle]</code> \u521b\u5efa\u4e00\u4e2a <code>DataView[AXIBundle, VerilogAXIBundle]</code>\uff0c\u6211\u4eec\u53ea\u9700\u8981\u63d0\u4f9b\u4e00\u4e2a\u51fd\u6570\uff0c\u4ece <code>AXIBundle</code> \u7684\u5b9e\u4f8b\u6784\u9020\u4e00\u4e2a <code>VerilogAXIBundle</code>\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\n// Note that typically you should define these together (eg. inside object AXIBundle)\nimplicit val axiView2: DataView[AXIBundle, VerilogAXIBundle] = AXIBundle.axiView.invert(ab =&gt; new VerilogAXIBundle(ab.addrWidth))\n</code></pre> <p>\u4ee5\u4e0b\u793a\u4f8b\u5c55\u793a\u4e86\u8fd9\u4e00\u70b9\uff0c\u5e76\u8bf4\u660e\u4e86 <code>DataView</code> \u7684\u53e6\u4e00\u4e2a\u7528\u4f8b \u2014 \u8fde\u63a5\u4e0d\u76f8\u5173\u7684\u7c7b\u578b\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nclass ConnectionExample extends RawModule {\n  val in = IO(new AXIBundle(20))\n  val out = IO(Flipped(new VerilogAXIBundle(20)))\n  out.viewAs[AXIBundle] &lt;&gt; in\n}\n</code></pre> <p>\u8fd9\u5bfc\u81f4\u76f8\u5e94\u7684\u5b57\u6bb5\u5728\u751f\u6210\u7684 Verilog \u4e2d\u8fde\u63a5\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new ConnectionExample)\n</code></pre>"},{"location":"chisel_explanation/dataview/#_2","title":"\u5176\u4ed6\u7528\u4f8b","text":"<p>\u867d\u7136\u5728 AXI4 \u793a\u4f8b\u4e2d\u6620\u5c04 <code>Bundle</code> \u7c7b\u578b\u7684\u80fd\u529b\u975e\u5e38\u5f15\u4eba\u6ce8\u76ee\uff0c \u4f46 DataView \u8fd8\u6709\u8bb8\u591a\u5176\u4ed6\u5e94\u7528\u3002 \u91cd\u8981\u7684\u662f\uff0c\u7531\u4e8e <code>DataView</code> \u7684 \u76ee\u6807 \u4e0d\u5fc5\u662f <code>Data</code>\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u79cd\u4f7f\u7528 <code>\u975e Data</code> \u5bf9\u8c61\u4e0e\u9700\u8981 <code>Data</code> \u7684 API \u7684\u65b9\u6cd5\u3002</p>"},{"location":"chisel_explanation/dataview/#_3","title":"\u5143\u7ec4","text":"<p>\u5bf9\u4e8e <code>\u975e Data</code> \u7c7b\u578b\u6765\u8bf4\uff0c<code>DataView</code> \u6700\u6709\u7528\u7684\u7528\u9014\u4e4b\u4e00\u5c31\u662f\u5c06 Scala \u5143\u7ec4\u89c6\u4e3a <code>Bundles</code>\u3002 \u4f8b\u5982\uff0c\u5728\u5f15\u5165 <code>DataView</code> \u4e4b\u524d\u7684 Chisel \u4e2d\uff0c\u6709\u4eba\u53ef\u80fd\u5c1d\u8bd5\u5bf9\u5143\u7ec4\u4f7f\u7528 <code>Mux</code>\uff0c \u5e76\u770b\u5230\u5982\u4e0b\u9519\u8bef\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:fail\nclass TupleExample extends RawModule {\n  val a, b, c, d = IO(Input(UInt(8.W)))\n  val cond = IO(Input(Bool()))\n  val x, y = IO(Output(UInt(8.W)))\n  (x, y) := Mux(cond, (a, b), (c, d))\n}\n</code></pre> <p>\u95ee\u9898\u662f\uff0c\u50cf <code>Mux</code> \u548c <code>:=</code> \u8fd9\u6837\u7684 Chisel \u539f\u8bed\u53ea\u5bf9 <code>Data</code> \u7684\u5b50\u7c7b\u578b\u8fdb\u884c\u64cd\u4f5c\uff0c \u800c\u5143\u7ec4\uff08\u4f5c\u4e3a Scala \u6807\u51c6\u5e93\u7684\u6210\u5458\uff09\u4e0d\u662f <code>Data</code> \u7684\u5b50\u7c7b\u3002 <code>DataView</code> \u63d0\u4f9b\u4e86\u4e00\u79cd\u673a\u5236\uff0c\u53ef\u4ee5 \u67e5\u770b <code>Tuple</code> \u5c31\u50cf\u5b83\u662f\u4e00\u4e2a <code>Data</code>\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\n// We need a type to represent the Tuple\nclass HWTuple2[A &lt;: Data, B &lt;: Data](val _1: A, val _2: B) extends Bundle\n\n// Provide DataView between Tuple and HWTuple\nimplicit def view[A &lt;: Data, B &lt;: Data]: DataView[(A, B), HWTuple2[A, B]] =\n  DataView(tup =&gt; new HWTuple2(tup._1.cloneType, tup._2.cloneType),\n           _._1 -&gt; _._1, _._2 -&gt; _._2)\n</code></pre> <p>\u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>.viewAs</code> \u5c06\u5143\u7ec4\u89c6\u4e3a <code>Data</code> \u7684\u5b50\u7c7b\u578b\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nclass TupleVerboseExample extends RawModule {\n  val a, b, c, d = IO(Input(UInt(8.W)))\n  val cond = IO(Input(Bool()))\n  val x, y = IO(Output(UInt(8.W)))\n  (x, y).viewAs[HWTuple2[UInt, UInt]] := Mux(cond, (a, b).viewAs[HWTuple2[UInt, UInt]], (c, d).viewAs[HWTuple2[UInt, UInt]])\n}\n</code></pre> <p>\u8fd9\u6bd4\u76f4\u63a5\u4f7f\u7528\u5143\u7ec4\u5c31\u50cf\u5b83\u4eec\u662f <code>Data</code> \u4e00\u6837\u7684\u539f\u59cb\u60f3\u6cd5\u8981\u5197\u957f\u5f97\u591a\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9b\u4e00\u4e2a\u9690\u5f0f\u8f6c\u6362\u6765\u6539\u8fdb\u5b83\uff0c\u8be5\u8f6c\u6362\u5c06 <code>Tuple</code> \u89c6\u4e3a <code>HWTuple2</code>\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nimport scala.language.implicitConversions\nimplicit def tuple2hwtuple[A &lt;: Data, B &lt;: Data](tup: (A, B)): HWTuple2[A, B] =\n  tup.viewAs[HWTuple2[A, B]]\n</code></pre> <p>\u73b0\u5728\uff0c\u539f\u59cb\u4ee3\u7801\u5c31\u53ef\u4ee5\u5de5\u4f5c\u4e86\uff01</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nclass TupleExample extends RawModule {\n  val a, b, c, d = IO(Input(UInt(8.W)))\n  val cond = IO(Input(Bool()))\n  val x, y = IO(Output(UInt(8.W)))\n  (x, y) := Mux(cond, (a, b), (c, d))\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\n// Always emit Verilog to make sure it actually works\nchisel3.docs.emitSystemVerilog(new TupleExample)\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e2a\u4f8b\u5b50\u5ffd\u7565\u4e86 <code>DataProduct</code>\uff0c\u5b83\u662f\u53e6\u4e00\u4e2a\u5fc5\u9700\u7684\u90e8\u5206\uff08\u53c2\u89c1\u4e0b\u9762\u5173\u4e8e\u5b83\u7684\u6587\u6863\uff09\u3002</p> <p>\u6240\u6709\u8fd9\u4e9b\u901a\u8fc7\u5355\u4e2a\u5bfc\u5165\u5373\u53ef\u4f9b\u7528\u6237\u4f7f\u7528\uff1a <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:reset\nimport chisel3.experimental.conversions._\n</code></pre></p>"},{"location":"chisel_explanation/dataview/#partialdataview","title":"\u5168\u9762\u6027\u548c PartialDataView","text":"<pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:reset:invisible\nimport chisel3._\nimport chisel3.experimental.dataview._\n</code></pre> <p>\u5982\u679c \u76ee\u6807 \u7c7b\u578b\u7684\u6240\u6709\u5b57\u6bb5\u548c \u89c6\u56fe \u7c7b\u578b\u7684\u6240\u6709\u5b57\u6bb5\u90fd\u5305\u542b\u5728\u6620\u5c04\u4e2d\uff0c\u5219 <code>DataView</code> \u662f \u5168\u9762\u7684\u3002 \u5982\u679c\u4e0d\u5c0f\u5fc3\u9057\u6f0f\u4e86 <code>DataView</code> \u4e2d\u7684\u5b57\u6bb5\uff0cChisel \u5c06\u62a5\u9519\u3002 \u4f8b\u5982\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nclass BundleA extends Bundle {\n  val foo = UInt(8.W)\n  val bar = UInt(8.W)\n}\nclass BundleB extends Bundle {\n  val fizz = UInt(8.W)\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:crash\n// We forgot BundleA.foo in the mapping!\nimplicit val myView: DataView[BundleA, BundleB] = DataView(_ =&gt; new BundleB, _.bar -&gt; _.fizz)\nclass BadMapping extends Module {\n   val in = IO(Input(new BundleA))\n   val out = IO(Output(new BundleB))\n   out := in.viewAs[BundleB]\n}\n// We must run Chisel to see the error\ngetVerilogString(new BadMapping)\n</code></pre> <p>\u6b63\u5982\u8be5\u9519\u8bef\u6240\u6697\u793a\u7684\uff0c\u5982\u679c\u6211\u4eec \u60f3\u8981 \u89c6\u56fe\u662f\u975e\u5168\u9762\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>PartialDataView</code>\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\n// A PartialDataView does not have to be total for the Target\nimplicit val myView: DataView[BundleA, BundleB] = PartialDataView[BundleA, BundleB](_ =&gt; new BundleB, _.bar -&gt; _.fizz)\nclass PartialDataViewModule extends Module {\n   val in = IO(Input(new BundleA))\n   val out = IO(Output(new BundleB))\n   out := in.viewAs[BundleB]\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new PartialDataViewModule)\n</code></pre> <p>\u867d\u7136 <code>PartialDataViews</code> \u5bf9\u4e8e \u76ee\u6807 \u4e0d\u5fc5\u662f\u5168\u9762\u7684\uff0c\u4f46 <code>PartialDataViews</code> \u548c <code>DataViews</code> \u5fc5\u987b\u59cb\u7ec8\u5bf9 \u89c6\u56fe \u662f\u5168\u9762\u7684\u3002 \u8fd9\u5bfc\u81f4 <code>PartialDataViews</code> \u4e0d\u80fd \u4ee5\u4e0e <code>DataViews</code> \u76f8\u540c\u7684\u65b9\u5f0f\u8fdb\u884c\u53cd\u8f6c\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:crash\nimplicit val myView2 = myView.invert(_ =&gt; new BundleA)\nclass PartialDataViewModule2 extends Module {\n   val in = IO(Input(new BundleA))\n   val out = IO(Output(new BundleB))\n   // Using the inverted version of the mapping\n   out.viewAs[BundleA] := in\n}\n// We must run Chisel to see the error\ngetVerilogString(new PartialDataViewModule2)\n</code></pre> <p>\u5982\u524d\u6240\u8ff0\uff0c\u6620\u5c04\u59cb\u7ec8\u5fc5\u987b\u5bf9 <code>\u89c6\u56fe</code> \u662f\u5168\u9762\u7684\u3002</p>"},{"location":"chisel_explanation/dataview/#_4","title":"\u9ad8\u7ea7\u8be6\u60c5","text":"<p><code>DataView</code> \u5229\u7528\u4e86 Scala \u7684\u7279\u6027\uff0c\u8fd9\u4e9b\u7279\u6027\u5bf9\u8bb8\u591a Chisel \u7528\u6237\u6765\u8bf4\u53ef\u80fd\u662f\u65b0\u7684\u2014\u2014\u7279\u522b\u662f \u7c7b\u578b\u7c7b\u3002</p>"},{"location":"chisel_explanation/dataview/#_5","title":"\u7c7b\u578b\u7c7b","text":"<p>\u7c7b\u578b\u7c7b\u662f\u7f16\u5199\u591a\u6001\u4ee3\u7801\u7684\u5f3a\u5927\u8bed\u8a00\u7279\u6027\u3002 \u5b83\u4eec\u662f \"\u73b0\u4ee3\u7f16\u7a0b\u8bed\u8a00\" \u5982 Scala\u3001 Swift\uff08\u53c2\u89c1\u534f\u8bae\uff09 \u548c Rust\uff08\u53c2\u89c1\u7279\u8d28\uff09\u4e2d\u7684\u5e38\u89c1\u7279\u6027\u3002 \u7c7b\u578b\u7c7b\u53ef\u80fd\u770b\u8d77\u6765\u7c7b\u4f3c\u4e8e\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u4e2d\u7684\u7ee7\u627f\uff0c\u4f46\u6709\u4e00\u4e9b \u91cd\u8981\u7684\u533a\u522b\uff1a</p> <ol> <li>\u4f60\u53ef\u4ee5\u4e3a\u4f60\u4e0d\u62e5\u6709\u7684\u7c7b\u578b\u63d0\u4f9b\u7c7b\u578b\u7c7b\uff08\u4f8b\u5982\uff0c\u5728\u7b2c\u4e09\u65b9\u5e93\u4e2d\u5b9a\u4e49\u7684\u7c7b\u578b\uff0c   Scala \u6807\u51c6\u5e93\u6216 Chisel \u672c\u8eab\uff09</li> <li>\u4f60\u53ef\u4ee5\u4e3a\u6ca1\u6709\u5b50\u7c7b\u578b\u5173\u7cfb\u7684\u591a\u79cd\u7c7b\u578b\u7f16\u5199\u5355\u4e2a\u7c7b\u578b\u7c7b</li> <li>\u4f60\u53ef\u4ee5\u4e3a\u540c\u4e00\u7c7b\u578b\u63d0\u4f9b\u591a\u4e2a\u4e0d\u540c\u7684\u7c7b\u578b\u7c7b</li> </ol> <p>\u5bf9\u4e8e <code>DataView</code>\uff0c\uff081\uff09\u662f\u81f3\u5173\u91cd\u8981\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u5b9e\u73b0\u5185\u7f6e Scala \u7c7b\u578b\uff08\u5982\u5143\u7ec4\u548c <code>Seqs</code>\uff09\u7684 <code>DataViews</code>\u3002\u6b64\u5916\uff0c<code>DataView</code> \u6709\u4e24\u4e2a\u7c7b\u578b\u53c2\u6570\uff08\u76ee\u6807 \u548c \u89c6\u56fe \u7c7b\u578b\uff09\uff0c\u6240\u4ee5\u7ee7\u627f\u5e76\u4e0d\u771f\u6b63\u6709\u610f\u4e49\u2014\u2014\u54ea\u79cd\u7c7b\u578b\u4f1a <code>\u6269\u5c55</code> <code>DataView</code>\uff1f</p> <p>\u5728 Scala 2 \u4e2d\uff0c\u7c7b\u578b\u7c7b\u4e0d\u662f\u5185\u7f6e\u7684\u8bed\u8a00\u7279\u6027\uff0c\u800c\u662f\u4f7f\u7528 implicits \u5b9e\u73b0\u7684\u3002 \u6709\u5174\u8da3\u7684\u8bfb\u8005\u53ef\u4ee5\u53c2\u8003\u8fd9\u4e9b\u5f88\u597d\u7684\u8d44\u6e90\uff1a * \u57fa\u672c\u6559\u7a0b * StackOverflow \u4e0a\u7684\u7cbe\u5f69\u89e3\u91ca</p> <p>\u8bf7\u6ce8\u610f\uff0cScala 3 \u5df2\u7ecf\u6dfb\u52a0\u4e86\u5185\u7f6e\u7684\u7c7b\u578b\u7c7b\u8bed\u6cd5\uff0c\u4f46\u8fd9\u4e0d\u9002\u7528\u4e8e Chisel 3\uff0c Chisel 3 \u76ee\u524d\u53ea\u652f\u6301 Scala 2\u3002</p>"},{"location":"chisel_explanation/dataview/#_6","title":"\u9690\u5f0f\u89e3\u6790","text":"<p>\u9274\u4e8e <code>DataView</code> \u662f\u4f7f\u7528\u9690\u5f0f\u5b9e\u73b0\u7684\uff0c\u4e86\u89e3\u9690\u5f0f\u89e3\u6790\u5f88\u91cd\u8981\u3002 \u6bcf\u5f53\u7f16\u8bd1\u5668\u770b\u5230\u9700\u8981\u9690\u5f0f\u53c2\u6570\u65f6\uff0c\u5b83\u9996\u5148\u5728 \u5f53\u524d\u4f5c\u7528\u57df \u4e2d\u67e5\u627e \u7136\u540e\u5728 \u9690\u5f0f\u4f5c\u7528\u57df \u4e2d\u67e5\u627e\u3002</p> <ol> <li>\u5f53\u524d\u4f5c\u7528\u57df<ul> <li>\u5728\u5f53\u524d\u4f5c\u7528\u57df\u4e2d\u5b9a\u4e49\u7684\u503c</li> <li>\u663e\u5f0f\u5bfc\u5165</li> <li>\u901a\u914d\u7b26\u5bfc\u5165</li> </ul> </li> <li>\u9690\u5f0f\u4f5c\u7528\u57df<ul> <li>\u7c7b\u578b\u7684\u4f34\u751f\u5bf9\u8c61</li> <li>\u53c2\u6570\u7c7b\u578b\u7684\u9690\u5f0f\u4f5c\u7528\u57df</li> <li>\u7c7b\u578b\u53c2\u6570\u7684\u9690\u5f0f\u4f5c\u7528\u57df</li> </ul> </li> </ol> <p>\u5982\u679c\u5728\u4efb\u4e00\u9636\u6bb5\u627e\u5230\u591a\u4e2a\u9690\u5f0f\uff0c\u5219\u4f7f\u7528\u9759\u6001\u91cd\u8f7d\u89c4\u5219\u6765\u89e3\u51b3\u5b83\u3002 \u7b80\u5355\u6765\u8bf4\uff0c\u5982\u679c\u4e00\u4e2a\u9690\u5f0f\u9002\u7528\u4e8e\u6bd4\u53e6\u4e00\u4e2a\u66f4\u7279\u5b9a\u7684\u7c7b\u578b\uff0c\u5219\u4f1a\u9009\u62e9\u66f4\u7279\u5b9a\u7684\u9690\u5f0f\u3002 \u5982\u679c\u5728\u7ed9\u5b9a\u9636\u6bb5\u5185\u591a\u4e2a\u9690\u5f0f\u9002\u7528\uff0c\u5219\u7f16\u8bd1\u5668\u4f1a\u629b\u51fa\u6a21\u7cca\u7684\u9690\u5f0f\u89e3\u6790\u9519\u8bef\u3002</p> <p>\u672c\u8282\u5927\u91cf\u501f\u9274\u4e86 [1] \u548c [2]\u3002 \u7279\u522b\u662f\uff0c\u53c2\u89c1 [1] \u4e2d\u7684\u793a\u4f8b\u3002</p>"},{"location":"chisel_explanation/dataview/#_7","title":"\u9690\u5f0f\u89e3\u6790\u793a\u4f8b","text":"<p>\u4e3a\u4e86\u5e2e\u52a9\u6f84\u6e05\u4e00\u70b9\uff0c\u8ba9\u6211\u4eec\u8003\u8651\u9690\u5f0f\u89e3\u6790\u5982\u4f55\u4e3a <code>DataView</code> \u5de5\u4f5c\u3002 \u8003\u8651 <code>viewAs</code> \u7684\u5b9a\u4e49\uff1a</p> <pre><code>def viewAs[V &lt;: Data](implicit dataView: DataView[T, V]): V\n</code></pre> <p>\u501f\u52a9\u524d\u4e00\u8282\u7684\u77e5\u8bc6\uff0c\u6211\u4eec\u77e5\u9053\u6bcf\u5f53\u6211\u4eec\u8c03\u7528 <code>.viewAs</code> \u65f6\uff0c Scala \u7f16\u8bd1\u5668\u9996\u5148\u4f1a\u5728\u5f53\u524d\u4f5c\u7528\u57df\uff08\u5b9a\u4e49\u7684\u6216\u5bfc\u5165\u7684\uff09\u4e2d\u67e5\u627e <code>DataView[T, V]</code>\uff0c \u7136\u540e\u5728 <code>DataView</code>\u3001<code>T</code> \u548c <code>V</code> \u7684\u4f34\u751f\u5bf9\u8c61\u4e2d\u67e5\u627e\u3002 \u8fd9\u5b9e\u73b0\u4e86\u4e00\u4e2a\u76f8\u5f53\u5f3a\u5927\u7684\u6a21\u5f0f\uff0c\u5373 <code>DataView</code> \u7684\u9ed8\u8ba4\u6216\u5178\u578b\u5b9e\u73b0 \u5e94\u8be5\u5b9a\u4e49\u5728\u4e24\u79cd\u7c7b\u578b\u4e4b\u4e00\u7684\u4f34\u751f\u5bf9\u8c61\u4e2d\u3002 \u6211\u4eec\u53ef\u4ee5\u5c06\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u5b9a\u4e49\u7684 <code>DataViews</code> \u89c6\u4e3a \"\u4f4e\u4f18\u5148\u7ea7\u9ed8\u8ba4\u503c\"\u3002 \u5982\u679c\u7ed9\u5b9a\u7528\u6237\u60f3\u8981\u4e0d\u540c\u7684\u884c\u4e3a\uff0c\u5b83\u4eec\u53ef\u4ee5\u88ab\u7279\u5b9a\u5bfc\u5165\u8986\u76d6\u3002 \u4f8b\u5982\uff1a</p> <p>\u7ed9\u5b9a\u4ee5\u4e0b\u7c7b\u578b\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nclass Foo extends Bundle {\n  val a = UInt(8.W)\n  val b = UInt(8.W)\n}\nclass Bar extends Bundle {\n  val c = UInt(8.W)\n  val d = UInt(8.W)\n}\nobject Foo {\n  implicit val f2b: DataView[Foo, Bar] = DataView(_ =&gt; new Bar, _.a -&gt; _.c, _.b -&gt; _.d)\n  implicit val b2f: DataView[Bar, Foo] = f2b.invert(_ =&gt; new Foo)\n}\n</code></pre> <p>\u8fd9\u5728 \u9690\u5f0f\u4f5c\u7528\u57df \u4e2d\u63d0\u4f9b\u4e86 <code>DataView</code> \u7684\u5b9e\u73b0\uff0c\u4f5c\u4e3a <code>Foo</code> \u548c <code>Bar</code> \u4e4b\u95f4\u7684 \"\u9ed8\u8ba4\" \u6620\u5c04\uff08\u751a\u81f3\u4e0d\u9700\u8981\u5bfc\u5165\uff01\uff09\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nclass FooToBar extends Module {\n  val foo = IO(Input(new Foo))\n  val bar = IO(Output(new Bar))\n  bar := foo.viewAs[Bar]\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new FooToBar)\n</code></pre> <p>\u7136\u800c\uff0c<code>Foo</code> \u548c <code>Bar</code> \u7684\u67d0\u4e9b\u7528\u6237\u53ef\u80fd\u5e0c\u671b\u4e0d\u540c\u7684\u884c\u4e3a\uff0c \u4e5f\u8bb8\u4ed6\u4eec\u66f4\u559c\u6b22 \"\u4ea4\u6362\" \u884c\u4e3a\u800c\u4e0d\u662f\u76f4\u63a5\u6620\u5c04\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nobject Swizzle {\n  implicit val swizzle: DataView[Foo, Bar] = DataView(_ =&gt; new Bar, _.a -&gt; _.d, _.b -&gt; _.c)\n}\n// Current scope always wins over implicit scope\nimport Swizzle._\nclass FooToBarSwizzled extends Module {\n  val foo = IO(Input(new Foo))\n  val bar = IO(Output(new Bar))\n  bar := foo.viewAs[Bar]\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nchisel3.docs.emitSystemVerilog(new FooToBarSwizzled)\n</code></pre>"},{"location":"chisel_explanation/dataview/#dataproduct","title":"DataProduct","text":"<p><code>DataProduct</code> \u662f <code>DataView</code> \u7528\u6765\u9a8c\u8bc1\u7528\u6237\u63d0\u4f9b\u7684\u6620\u5c04\u6b63\u786e\u6027\u7684\u7c7b\u578b\u7c7b\u3002 \u4e3a\u4e86\u4f7f\u7c7b\u578b \"\u53ef\u89c6\"\uff08\u5373 <code>DataView</code> \u7684 <code>\u76ee\u6807</code> \u7c7b\u578b\uff09\uff0c\u5b83\u5fc5\u987b\u6709\u4e00\u4e2a <code>DataProduct</code> \u7684\u5b9e\u73b0\u3002</p> <p>\u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e9b\u975e Bundle \u7c7b\u578b\uff1a <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\n// Loosely based on chisel3.util.Counter\nclass MyCounter(val width: Int) {\n  /** Indicates if the Counter is incrementing this cycle */\n  val active = WireDefault(false.B)\n  val value = RegInit(0.U(width.W))\n  def inc(): Unit = {\n    active := true.B\n    value := value + 1.U\n  }\n  def reset(): Unit = {\n    value := 0.U\n  }\n}\n</code></pre></p> <p>\u5047\u8bbe\u6211\u4eec\u60f3\u5c06 <code>MyCounter</code> \u89c6\u4e3a <code>Valid[UInt]</code>\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:fail\nimport chisel3.util.Valid\nimplicit val counterView = DataView[MyCounter, Valid[UInt]](c =&gt; Valid(UInt(c.width.W)), _.value -&gt; _.bits, _.active -&gt; _.valid)\n</code></pre> <p>\u5982\u4f60\u6240\u89c1\uff0c\u8fd9\u5728 Scala \u7f16\u8bd1\u65f6\u5931\u8d25\u4e86\u3002 \u6211\u4eec\u9700\u8981\u63d0\u4f9b <code>DataProduct[MyCounter]</code> \u7684\u5b9e\u73b0\uff0c\u5b83\u4e3a Chisel \u63d0\u4f9b\u4e86\u4e00\u79cd\u65b9\u6cd5\u6765\u8bbf\u95ee <code>MyCounter</code> \u5185\u90e8\u7c7b\u578b\u4e3a <code>Data</code> \u7684\u5bf9\u8c61\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3.util.Valid\nimplicit val counterProduct: DataProduct[MyCounter] = new DataProduct[MyCounter] {\n  // The String part of the tuple is a String path to the object to help in debugging\n  def dataIterator(a: MyCounter, path: String): Iterator[(Data, String)] =\n    List(a.value -&gt; s\"$path.value\", a.active -&gt; s\"$path.active\").iterator\n}\n// Now this works\nimplicit val counterView: DataView[MyCounter, Valid[UInt]] = DataView(c =&gt; Valid(UInt(c.width.W)), _.value -&gt; _.bits, _.active -&gt; _.valid)\n</code></pre> <p>\u4e3a\u4ec0\u4e48\u8fd9\u5f88\u6709\u7528\uff1f \u8fd9\u5c31\u662f Chisel \u5982\u4f55\u80fd\u591f\u68c0\u67e5\u4e0a\u9762\u63cf\u8ff0\u7684\u5168\u9762\u6027\u7684\u65b9\u6cd5\u3002 \u9664\u4e86\u68c0\u67e5\u7528\u6237\u662f\u5426\u5728\u6620\u5c04\u4e2d\u9057\u6f0f\u4e86\u4e00\u4e2a\u5b57\u6bb5\u5916\uff0c\u5b83\u8fd8\u5141\u8bb8 Chisel \u68c0\u67e5 \u7528\u6237\u662f\u5426\u5728\u6620\u5c04\u4e2d\u5305\u542b\u4e86\u4e00\u4e2a <code>Data</code>\uff0c\u800c\u8fd9\u4e2a <code>Data</code> \u5b9e\u9645\u4e0a\u4e0d\u662f \u76ee\u6807 \u4e5f\u4e0d\u662f \u89c6\u56fe \u7684\u4e00\u90e8\u5206\u3002</p>"},{"location":"chisel_explanation/decoder/","title":"\u89e3\u7801\u5668","text":"<p>\u5728\u590d\u6742\u8bbe\u8ba1\u4e2d\uff0c\u4ece\u6570\u636e\u603b\u7ebf\u6765\u7684\u5927\u578b<code>UInt</code>\u8bc6\u522b\u7279\u5b9a\u6a21\u5f0f\u5e76\u57fa\u4e8e\u8fd9\u79cd\u89c2\u5bdf\u5c06\u52a8\u4f5c\u5206\u6d3e\u5230\u4e0b\u4e00\u4e2a\u6d41\u6c34\u7ebf\u9636\u6bb5\u662f\u5f88\u5e38\u89c1\u7684\u3002\u6267\u884c\u6b64\u64cd\u4f5c\u7684\u7535\u8def\u53ef\u4ee5\u79f0\u4e3a\"\u89e3\u7801\u5668\"\uff0c\u4f8b\u5982\u603b\u7ebf\u4ea4\u53c9\u5f00\u5173\u4e2d\u7684\u5730\u5740\u89e3\u7801\u5668\u6216CPU\u524d\u7aef\u7684\u6307\u4ee4\u89e3\u7801\u5668\u3002Chisel\u5728<code>util.exprimental.decode</code>\u5305\u4e2d\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5b9e\u7528\u7c7b\u6765\u751f\u6210\u5b83\u4eec\u3002</p>"},{"location":"chisel_explanation/decoder/#_2","title":"\u57fa\u672c\u89e3\u7801\u5668","text":"<p><code>decoder</code>\u63d0\u4f9b\u7684\u6700\u7b80\u5355API\u672c\u8d28\u4e0a\u53ea\u662f\u4e00\u4e2a\u7f16\u7801\u60a8\u6240\u9700\u8f93\u5165\u548c\u8f93\u51fa\u7684<code>TruthTable</code>\u3002 <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3._\nimport chisel3.util.BitPat\nimport chisel3.util.experimental.decode._\n\nclass SimpleDecoder extends Module {\n  val table = TruthTable(\n    Map(\n      BitPat(\"b001\") -&gt; BitPat(\"b?\"),\n      BitPat(\"b010\") -&gt; BitPat(\"b?\"),\n      BitPat(\"b100\") -&gt; BitPat(\"b1\"),\n      BitPat(\"b101\") -&gt; BitPat(\"b1\"),\n      BitPat(\"b111\") -&gt; BitPat(\"b1\")\n    ),\n    BitPat(\"b0\"))\n  val input = IO(Input(UInt(3.W)))\n  val output = IO(Output(UInt(1.W)))\n  output := decoder(input, table)\n}\n</code></pre></p>"},{"location":"chisel_explanation/decoder/#decodertable","title":"DecoderTable","text":"<p>\u5f53\u89e3\u7801\u7ed3\u679c\u6d89\u53ca\u591a\u4e2a\u5b57\u6bb5\uff0c\u6bcf\u4e2a\u5b57\u6bb5\u5177\u6709\u81ea\u5df1\u7684\u8bed\u4e49\u65f6\uff0c<code>TruthTable</code>\u5f88\u5feb\u5c31\u4f1a\u53d8\u5f97\u96be\u4ee5\u7ef4\u62a4\u3002<code>DecoderTable</code> API\u65e8\u5728\u4ece\u7ed3\u6784\u5316\u5b9a\u4e49\u751f\u6210\u89e3\u7801\u5668\u8868\u3002</p> <p>\u4ece\u7ed3\u6784\u5316\u4fe1\u606f\u5230\u5176\u7f16\u7801\u7684\u6865\u6881\u662f<code>DecodePattern</code>\u7279\u8d28\u3002<code>bitPat</code>\u6210\u5458\u5b9a\u4e49\u4e86\u89e3\u7801\u771f\u503c\u8868\u4e2d\u7684\u8f93\u5165<code>BitPat</code>\uff0c\u5176\u4ed6\u6210\u5458\u53ef\u4ee5\u5b9a\u4e49\u4e3a\u5305\u542b\u7ed3\u6784\u5316\u4fe1\u606f\u3002</p> <p>\u8981\u751f\u6210\u89e3\u7801\u771f\u503c\u8868\u7684\u8f93\u51fa\u7aef\uff0c\u8981\u4f7f\u7528\u7684\u7279\u8d28\u662f<code>DecodeField</code>\u3002\u7ed9\u5b9a\u4e00\u4e2a\u5b9e\u73b0<code>DecodePattern</code>\u5bf9\u8c61\u7684\u5b9e\u4f8b\uff0c<code>genTable</code>\u65b9\u6cd5\u5e94\u8fd4\u56de\u6240\u9700\u7684\u8f93\u51fa\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3.util.BitPat\nimport chisel3.util.experimental.decode._\n\ncase class Pattern(val name: String, val code: BigInt) extends DecodePattern {\n  def bitPat: BitPat = BitPat(\"b\" + code.toString(2))\n}\n\nobject NameContainsAdd extends BoolDecodeField[Pattern] {\n  def name = \"name contains 'add'\"\n  def genTable(i: Pattern) = if (i.name.contains(\"add\")) y else n\n}\n</code></pre> <p>\u7136\u540e\u6240\u6709<code>DecodePattern</code>\u6848\u4f8b\u53ef\u4ee5\u4ece\u5916\u90e8\u6e90\u751f\u6210\u6216\u8bfb\u53d6\u3002\u6709\u4e86\u6240\u6709<code>DecodeField</code>\u5bf9\u8c61\uff0c\u89e3\u7801\u5668\u53ef\u4ee5\u8f7b\u677e\u751f\u6210\uff0c\u8f93\u51fa\u53ef\u4ee5\u7531\u76f8\u5e94\u7684<code>DecodeField</code>\u8bfb\u53d6\u3002 <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3._\nimport chisel3.util.experimental.decode._\n\nclass SimpleDecodeTable extends Module {\n  val allPossibleInputs = Seq(Pattern(\"addi\", BigInt(\"0x2\")) /* \u53ef\u4ee5\u751f\u6210 */)\n  val decodeTable = new DecodeTable(allPossibleInputs, Seq(NameContainsAdd))\n\n  val input = IO(Input(UInt(4.W)))\n  val isAddType = IO(Output(Bool()))\n  val decodeResult = decodeTable.decode(input)\n  isAddType := decodeResult(NameContainsAdd)\n}\n</code></pre></p>"},{"location":"chisel_explanation/functional-abstraction/","title":"\u51fd\u6570\u62bd\u8c61","text":"<p>\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u51fd\u6570\u6765\u63d0\u53d6\u8bbe\u8ba1\u4e2d\u591a\u6b21\u91cd\u7528\u7684\u91cd\u590d\u903b\u8f91\u7247\u6bb5\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u7b80\u5355\u7ec4\u5408\u903b\u8f91\u5757\u7684\u65e9\u671f\u793a\u4f8b\u5c01\u88c5\u5982\u4e0b\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\nimport chisel3._\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\ndef clb(a: UInt, b: UInt, c: UInt, d: UInt): UInt =\n  (a &amp; b) | (~c &amp; d)\n</code></pre> <p>\u5176\u4e2d<code>clb</code>\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u63a5\u53d7<code>a</code>\u3001<code>b</code>\u3001<code>c</code>\u3001<code>d</code>\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u8fde\u63a5\u5230\u5e03\u5c14\u7535\u8def\u8f93\u51fa\u7684\u7ebf\u3002<code>def</code>\u5173\u952e\u5b57\u662fScala\u7684\u4e00\u90e8\u5206\uff0c\u7528\u4e8e\u5f15\u5165\u51fd\u6570\u5b9a\u4e49\uff0c\u6bcf\u4e2a\u53c2\u6570\u540e\u9762\u8ddf\u7740\u5192\u53f7\u548c\u5b83\u7684\u7c7b\u578b\uff0c\u51fd\u6570\u8fd4\u56de\u7c7b\u578b\u5728\u53c2\u6570\u5217\u8868\u540e\u7684\u5192\u53f7\u4e4b\u540e\u7ed9\u51fa\u3002\u7b49\u53f7\uff08<code>=</code>\uff09\u5206\u9694\u51fd\u6570\u53c2\u6570\u5217\u8868\u548c\u51fd\u6570\u5b9a\u4e49\u3002</p> <p>\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5728\u53e6\u4e00\u4e2a\u7535\u8def\u4e2d\u5982\u4e0b\u4f7f\u7528\u8fd9\u4e2a\u5757\uff1a <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nval out = clb(a,b,c,d)\n</code></pre></p>"},{"location":"chisel_explanation/functional-module-creation/","title":"\u51fd\u6570\u5f0f\u6a21\u5757\u521b\u5efa","text":"<p>Scala\u4e2d\u7684\u5bf9\u8c61\u6709\u4e00\u4e2a\u9884\u5148\u5b58\u5728\u7684\u521b\u5efa\u51fd\u6570\uff08\u65b9\u6cd5\uff09\u79f0\u4e3a<code>apply</code>\u3002 \u5f53\u5bf9\u8c61\u5728\u8868\u8fbe\u5f0f\u4e2d\u7528\u4f5c\u503c\u65f6\uff08\u8fd9\u57fa\u672c\u4e0a\u610f\u5473\u7740\u6784\u9020\u51fd\u6570\u88ab\u8c03\u7528\uff09\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u51b3\u5b9a\u4e86\u8fd4\u56de\u7684\u503c\u3002 \u5904\u7406\u786c\u4ef6\u6a21\u5757\u65f6\uff0c\u4eba\u4eec\u671f\u671b\u6a21\u5757\u8f93\u51fa\u80fd\u4ee3\u8868\u786c\u4ef6\u6a21\u5757\u7684\u529f\u80fd\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u6709\u65f6\u5e0c\u671b\u5728\u8868\u8fbe\u5f0f\u4e2d\u4f7f\u7528\u5bf9\u8c61\u4f5c\u4e3a\u503c\u65f6\uff0c\u8fd4\u56de\u7684\u503c\u662f\u6a21\u5757\u7684\u8f93\u51fa\u3002 \u7531\u4e8e\u786c\u4ef6\u6a21\u5757\u8868\u793a\u4e3aScala\u5bf9\u8c61\uff0c\u53ef\u4ee5\u901a\u8fc7\u5b9a\u4e49\u5bf9\u8c61\u7684<code>apply</code>\u65b9\u6cd5\u6765\u8fd4\u56de\u6a21\u5757\u7684\u8f93\u51fa\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002 \u8fd9\u53ef\u4ee5\u88ab\u79f0\u4e3a\u4e3a\u6a21\u5757\u6784\u5efa\u521b\u5efa\u51fd\u6570\u5f0f\u63a5\u53e3\u3002 \u5982\u679c\u6211\u4eec\u5c06\u6b64\u5e94\u7528\u4e8e\u6807\u51c6mux2\u793a\u4f8b\uff0c\u6211\u4eec\u5e0c\u671b\u5728\u8868\u8fbe\u5f0f\u4e2d\u4f7f\u7528mux2\u65f6\u8fd4\u56demux2\u8f93\u51fa\u7aef\u53e3\u3002 \u5b9e\u73b0\u8fd9\u4e00\u70b9\u9700\u8981\u6784\u5efa\u4e00\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u5c06\u591a\u8def\u590d\u7528\u5668\u8f93\u5165\u4f5c\u4e3a\u53c2\u6570\u5e76\u8fd4\u56de\u591a\u8def\u590d\u7528\u5668\u8f93\u51fa\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3._\n\nclass Mux2 extends Module {\n  val io = IO(new Bundle {\n    val sel = Input(Bool())\n    val in0 = Input(UInt())\n    val in1 = Input(UInt())\n    val out = Output(UInt())\n  })\n  io.out := Mux(io.sel, io.in0, io.in1)\n}\n\nobject Mux2 {\n  def apply(sel: UInt, in0: UInt, in1: UInt) = {\n    val m = Module(new Mux2)\n    m.io.in0 := in0\n    m.io.in1 := in1\n    m.io.sel := sel\n    m.io.out\n  }\n}\n</code></pre> <p>\u6b63\u5982\u6211\u4eec\u5728\u4ee3\u7801\u793a\u4f8b\u4e2d\u770b\u5230\u7684\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86<code>apply</code>\u65b9\u6cd5\uff0c\u4ee5Mux2\u8f93\u5165\u4f5c\u4e3a\u65b9\u6cd5\u53c2\u6570\uff0c\u5e76\u5c06Mux2\u8f93\u51fa\u4f5c\u4e3a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u3002 \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u5b9a\u4e49\u6a21\u5757\uff0c\u4ee5\u540e\u5b9e\u73b0\u8fd9\u4e2a\u5e38\u89c4\u6a21\u5757\u7684\u66f4\u5927\u3001\u66f4\u590d\u6742\u7684\u7248\u672c\u4f1a\u66f4\u5bb9\u6613\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u4e4b\u524d\u662f\u8fd9\u6837\u5b9e\u73b0Mux4\u7684\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass Mux4 extends Module {\n  val io = IO(new Bundle {\n    val in0 = Input(UInt(1.W))\n    val in1 = Input(UInt(1.W))\n    val in2 = Input(UInt(1.W))\n    val in3 = Input(UInt(1.W))\n    val sel = Input(UInt(2.W))\n    val out = Output(UInt(1.W))\n  })\n  val m0 = Module(new Mux2)\n  m0.io.sel := io.sel(0)\n  m0.io.in0 := io.in0\n  m0.io.in1 := io.in1\n\n  val m1 = Module(new Mux2)\n  m1.io.sel := io.sel(0)\n  m1.io.in0 := io.in2\n  m1.io.in1 := io.in3\n\n  val m3 = Module(new Mux2)\n  m3.io.sel := io.sel(1)\n  m3.io.in0 := m0.io.out\n  m3.io.in1 := m1.io.out\n\n  io.out := m3.io.out\n}\n</code></pre> <p>\u7136\u800c\uff0c\u901a\u8fc7\u4f7f\u7528\u6211\u4eec\u4e3aMux2\u91cd\u65b0\u5b9a\u4e49\u7684\u521b\u5efa\u51fd\u6570\uff0c\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5728\u7f16\u5199Mux4\u8f93\u51fa\u8868\u8fbe\u5f0f\u65f6\u5c06Mux2\u8f93\u51fa\u7528\u4f5c\u6a21\u5757\u672c\u8eab\u7684\u503c\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible:reset\n// \u6211\u4eec\u9700\u8981\u91cd\u65b0\u6267\u884c\u6b64\u64cd\u4f5c\u4ee5\u5141\u8bb8\u6211\u4eec`reset`\n// \u7136\u540e\u91cd\u65b0\u5b9a\u4e49Mux4\nimport chisel3._\n\nclass Mux2 extends Module {\n  val io = IO(new Bundle {\n    val sel = Input(Bool())\n    val in0 = Input(UInt())\n    val in1 = Input(UInt())\n    val out = Output(UInt())\n  })\n  io.out := Mux(io.sel, io.in0, io.in1)\n}\n\nobject Mux2 {\n  def apply(sel: UInt, in0: UInt, in1: UInt) = {\n    val m = Module(new Mux2)\n    m.io.in0 := in0\n    m.io.in1 := in1\n    m.io.sel := sel\n    m.io.out\n  }\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass Mux4 extends Module {\n  val io = IO(new Bundle {\n    val in0 = Input(UInt(1.W))\n    val in1 = Input(UInt(1.W))\n    val in2 = Input(UInt(1.W))\n    val in3 = Input(UInt(1.W))\n    val sel = Input(UInt(2.W))\n    val out = Output(UInt(1.W))\n  })\n  io.out := Mux2(io.sel(1),\n                 Mux2(io.sel(0), io.in0, io.in1),\n                 Mux2(io.sel(0), io.in2, io.in3))\n}\n</code></pre> <p>\u8fd9\u4f7f\u6211\u4eec\u80fd\u591f\u7f16\u5199\u66f4\u76f4\u89c2\u53ef\u8bfb\u7684\u786c\u4ef6\u8fde\u63a5\u63cf\u8ff0\uff0c\u7c7b\u4f3c\u4e8e\u8f6f\u4ef6\u8868\u8fbe\u5f0f\u6c42\u503c\u3002</p>"},{"location":"chisel_explanation/instchoice/","title":"\u5b9e\u4f8b\u9009\u62e9","text":"<p><code>Instance Choice</code>\uff08\u5b9e\u4f8b\u9009\u62e9\uff09\u662f\u6a21\u5757\u7684\u5b9e\u4f8b\uff0c\u5176\u76ee\u6807\u53ef\u5728\u751f\u6210\u540e\u914d\u7f6e\u3002 \u5b83\u4eec\u5141\u8bb8\u901a\u8fc7ABI\u4e2d\u7684\u9009\u9879\u6216\u901a\u8fc7\u7f16\u8bd1\u5668\u4e2d\u7684\u4e13\u95e8\u5316\uff0c\u5728\u751f\u6210\u540e\u4ece\u9884\u5b9a\u4e49\u96c6\u5408\u4e2d\u9009\u62e9\u5b9e\u4f8b\u7684\u76ee\u6807\u3002</p> <p>\u5b9e\u4f8b\u9009\u62e9\u4f9d\u8d56\u4e8e\u9009\u9879\u7ec4\u6765\u6307\u5b9a\u9644\u52a0\u5230\u6bcf\u4e2a\u9009\u9879\u7684\u53ef\u7528\u76ee\u6807\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3.choice.{Case, Group}\n\nobject Platform extends Group {\n  object FPGA extends Case\n  object ASIC extends Case\n}\n</code></pre> <p><code>Platform</code>\u9009\u9879\u7ec4\u679a\u4e3e\u4e86\u8bbe\u8ba1\u53ef\u4ee5\u4e13\u95e8\u5316\u7684\u5e73\u53f0\u5217\u8868\uff0c\u4f8b\u5982<code>ASIC</code>\u6216<code>FPGA</code>\u3002\u4e13\u95e8\u5316\u4e0d\u662f\u5f3a\u5236\u6027\u7684\uff1a\u5982\u679c\u672a\u6307\u5b9a\u9009\u9879\uff0c\u5219\u9009\u62e9\u9ed8\u8ba4\u53d8\u4f53\u3002</p> <p>\u5b9e\u4f8b\u9009\u62e9\u5f15\u7528\u7684\u6a21\u5757\u5fc5\u987b\u90fd\u901a\u8fc7\u4ece<code>FixedIOBaseModule</code>\u6d3e\u751f\u6765\u6307\u5b9a\u76f8\u540c\u7684IO\u63a5\u53e3\u3002<code>ModuleChoice</code>\u8fd0\u7b97\u7b26\u63a5\u53d7\u9ed8\u8ba4\u9009\u9879\u548c\u6848\u4f8b-\u6a21\u5757\u6620\u5c04\u5217\u8868\uff0c\u5e76\u8fd4\u56de\u5bf9\u6a21\u5757IO\u7684\u7ed1\u5b9a\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3._\nimport chisel3.choice.ModuleChoice\n\nclass TargetIO extends Bundle {\n  val in = Flipped(UInt(8.W))\n  val out = UInt(8.W)\n}\n\nclass FPGATarget extends FixedIOExtModule[TargetIO](new TargetIO)\n\nclass ASICTarget extends FixedIOExtModule[TargetIO](new TargetIO)\n\nclass VerifTarget extends FixedIORawModule[TargetIO](new TargetIO)\n\nclass SomeModule extends RawModule {\n  val inst = ModuleChoice(new VerifTarget)(Seq(\n    Platform.FPGA -&gt; new FPGATarget,\n    Platform.ASIC -&gt; new ASICTarget\n  ))\n}\n</code></pre>"},{"location":"chisel_explanation/interfaces-and-connections/","title":"\u63a5\u53e3\u548c\u8fde\u63a5","text":"<p>\u5bf9\u4e8e\u66f4\u590d\u6742\u7684\u6a21\u5757\uff0c\u5728\u5b9a\u4e49\u6a21\u5757\u7684IO\u65f6\u5b9a\u4e49\u548c\u5b9e\u4f8b\u5316\u63a5\u53e3\u7c7b\u901a\u5e38\u5f88\u6709\u7528\u3002\u9996\u5148\uff0c\u63a5\u53e3\u7c7b\u4fc3\u8fdb\u4e86\u91cd\u7528\uff0c\u5141\u8bb8\u7528\u6237\u4e00\u6b21\u6027\u6355\u83b7\u5e38\u89c1\u63a5\u53e3\u5e76\u4ee5\u6709\u7528\u7684\u5f62\u5f0f\u8868\u793a\u3002</p> <p>\u5176\u6b21\uff0c\u63a5\u53e3\u5141\u8bb8\u7528\u6237\u901a\u8fc7\u652f\u6301\u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005\u6a21\u5757\u4e4b\u95f4\u7684\u6279\u91cf\u8fde\u63a5\u6765\u5927\u5e45\u51cf\u5c11\u5e03\u7ebf\u5de5\u4f5c\u3002\u6700\u540e\uff0c\u7528\u6237\u53ef\u4ee5\u5728\u4e00\u4e2a\u5730\u65b9\u5bf9\u5927\u578b\u63a5\u53e3\u8fdb\u884c\u66f4\u6539\uff0c\u51cf\u5c11\u6dfb\u52a0\u6216\u5220\u9664\u63a5\u53e3\u90e8\u5206\u65f6\u6240\u9700\u7684\u66f4\u65b0\u6b21\u6570\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0cChisel\u6709\u4e00\u4e9b\u5185\u7f6e\u7684\u6807\u51c6\u63a5\u53e3\uff0c\u5e94\u5c3d\u53ef\u80fd\u4f7f\u7528\u5b83\u4eec\u4ee5\u5b9e\u73b0\u4e92\u64cd\u4f5c\u6027\uff08\u4f8b\u5982Decoupled\uff09\u3002</p>"},{"location":"chisel_explanation/interfaces-and-connections/#_2","title":"\u7aef\u53e3\uff1a\u5b50\u7c7b\u548c\u5d4c\u5957","text":"<p>\u5982\u6211\u4eec\u4e4b\u524d\u6240\u89c1\uff0c\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u5b9a\u4e49\u7ee7\u627fBundle\u7684\u7c7b\u6765\u5b9a\u4e49\u81ea\u5df1\u7684\u63a5\u53e3\u3002\u4f8b\u5982\uff0c\u7528\u6237\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u7528\u4e8e\u6570\u636e\u63e1\u624b\u7684\u7b80\u5355\u94fe\u63a5\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\nimport chisel3._\nimport chisel3.docs.emitSystemVerilog\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass SimpleLink extends Bundle {\n  val data = Output(UInt(16.W))\n  val valid = Output(Bool())\n}\n</code></pre> <p>\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528bundle\u7ee7\u627f\u6765\u6dfb\u52a0\u5947\u5076\u6821\u9a8c\u4f4d\u6765\u6269\u5c55SimpleLink\uff1a <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass PLink extends SimpleLink {\n  val parity = Output(UInt(5.W))\n}\n</code></pre> \u4e00\u822c\u6765\u8bf4\uff0c\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u7ee7\u627f\u5c06\u63a5\u53e3\u7ec4\u7ec7\u6210\u5c42\u6b21\u7ed3\u6784\u3002</p> <p>\u4ece\u90a3\u91cc\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5c06\u4e24\u4e2aPLink\u5d4c\u5957\u5230\u4e00\u4e2a\u65b0\u7684FilterIO bundle\u4e2d\u6765\u5b9a\u4e49\u8fc7\u6ee4\u5668\u63a5\u53e3\uff1a <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass FilterIO extends Bundle {\n  val x = Flipped(new PLink)\n  val y = new PLink\n}\n</code></pre> \u5176\u4e2dflip\u9012\u5f52\u5730\u6539\u53d8bundle\u7684\u65b9\u5411\uff0c\u5c06\u8f93\u5165\u53d8\u4e3a\u8f93\u51fa\uff0c\u5c06\u8f93\u51fa\u53d8\u4e3a\u8f93\u5165\u3002</p> <p>\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u901a\u8fc7\u5b9a\u4e49\u6269\u5c55Module\u7684filter\u7c7b\u6765\u5b9a\u4e49\u8fc7\u6ee4\u5668\uff1a <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass Filter extends Module {\n  val io = IO(new FilterIO)\n  // ...\n}\n</code></pre> \u5176\u4e2dio\u5b57\u6bb5\u5305\u542bFilterIO\u3002</p>"},{"location":"chisel_explanation/interfaces-and-connections/#bundle","title":"Bundle\u5411\u91cf","text":"<p>\u9664\u4e86\u5355\u4e2a\u5143\u7d20\u5916\uff0c\u5143\u7d20\u5411\u91cf\u5f62\u6210\u4e86\u66f4\u4e30\u5bcc\u7684\u5c42\u6b21\u7ed3\u6784\u63a5\u53e3\u3002\u4f8b\u5982\uff0c\u4e3a\u4e86\u521b\u5efa\u4e00\u4e2a\u5177\u6709\u8f93\u5165\u5411\u91cf\u7684\u4ea4\u53c9\u5f00\u5173\uff0c\u4ea7\u751f\u8f93\u51fa\u5411\u91cf\uff0c\u5e76\u7531UInt\u8f93\u5165\u9009\u62e9\uff0c\u6211\u4eec\u4f7f\u7528Vec\u6784\u9020\u51fd\u6570\uff1a <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3.util.log2Ceil\nclass CrossbarIo(n: Int) extends Bundle {\n  val in = Vec(n, Flipped(new PLink))\n  val sel = Input(UInt(log2Ceil(n).W))\n  val out = Vec(n, new PLink)\n}\n</code></pre> \u5176\u4e2dVec\u5c06\u5927\u5c0f\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u5c06\u8fd4\u56de\u7aef\u53e3\u7684\u5757\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u3002</p>"},{"location":"chisel_explanation/interfaces-and-connections/#_3","title":"\u6279\u91cf\u8fde\u63a5","text":"<p>\u4e00\u65e6\u6211\u4eec\u5b9a\u4e49\u4e86\u63a5\u53e3\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7<code>MonoConnect</code>\u8fd0\u7b97\u7b26\uff08<code>:=</code>\uff09\u6216<code>BiConnect</code>\u8fd0\u7b97\u7b26\uff08<code>&lt;&gt;</code>\uff09\u8fde\u63a5\u5230\u5b83\u3002</p>"},{"location":"chisel_explanation/interfaces-and-connections/#monoconnect","title":"<code>MonoConnect</code>\u7b97\u6cd5","text":"<p><code>MonoConnect.connect</code>\uff0c\u6216<code>:=</code>\uff0c\u6309\u5143\u7d20\u6267\u884c\u5355\u5411\u8fde\u63a5\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e0d\u662f\u53ef\u4ea4\u6362\u7684\u3002\u5728\u8c03\u7528\u6b64\u51fd\u6570\u4e4b\u524d\u5df2\u7ecf\u786e\u5b9a\u4e86\u660e\u786e\u7684\u6e90\u548c\u63a5\u6536\u5668\u3002</p> <p>\u8fde\u63a5\u64cd\u4f5c\u5c06\u9012\u5f52\u5730\u904d\u5386\u5de6\u4fa7Data\uff08\u4e0e\u53f3\u4fa7Data\u4e00\u8d77\uff09\u3002 \u5982\u679c\u5728\u5de6\u4fa7\u7684\u79fb\u52a8\u65e0\u6cd5\u5728\u53f3\u4fa7\u5339\u914d\uff0c\u5c06\u629b\u51fa\u5f02\u5e38\u3002\u53f3\u4fa7\u5141\u8bb8\u6709\u989d\u5916\u7684\u5b57\u6bb5\u3002 Vec\u5fc5\u987b\u5177\u6709\u5b8c\u5168\u76f8\u540c\u7684\u5927\u5c0f\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0cLHS\u5143\u7d20\u5fc5\u987b\u662f\u53ef\u5199\u7684\uff0c\u56e0\u6b64\u5fc5\u987b\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u4e4b\u4e00\uff1a - \u662f\u5185\u90e8\u53ef\u5199\u8282\u70b9\uff08<code>Reg</code>\u6216<code>Wire</code>\uff09 - \u662f\u5f53\u524d\u6a21\u5757\u7684\u8f93\u51fa - \u662f\u5f53\u524d\u6a21\u5757\u7684\u5b50\u6a21\u5757\u7684\u8f93\u5165</p> <p>\u8bf7\u6ce8\u610f\uff0cRHS\u5143\u7d20\u5fc5\u987b\u662f\u53ef\u8bfb\u7684\uff0c\u56e0\u6b64\u5fc5\u987b\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u4e4b\u4e00\uff1a - \u662f\u5185\u90e8\u53ef\u8bfb\u8282\u70b9\uff08<code>Reg</code>\u3001<code>Wire</code>\u3001<code>Op</code>\uff09 - \u662f\u5b57\u9762\u503c - \u662f\u5f53\u524d\u6a21\u5757\u6216\u5f53\u524d\u6a21\u5757\u7684\u5b50\u6a21\u5757\u7684\u7aef\u53e3</p>"},{"location":"chisel_explanation/interfaces-and-connections/#biconnect","title":"<code>BiConnect</code>\u7b97\u6cd5","text":"<p><code>BiConnect.connect</code>\uff0c\u6216<code>&lt;&gt;</code>\uff0c\u6309\u5143\u7d20\u6267\u884c\u53cc\u5411\u8fde\u63a5\u3002\u8bf7\u6ce8\u610f\uff0c\u53c2\u6570\u662f\u5de6\u53f3\uff08\u800c\u4e0d\u662f\u6e90\u548c\u63a5\u6536\u5668\uff09\uff0c\u56e0\u6b64\u8be5\u64cd\u4f5c\u7684\u610f\u56fe\u662f\u53ef\u4ea4\u6362\u7684\u3002\u8fde\u63a5\u64cd\u4f5c\u5c06\u9012\u5f52\u5730\u904d\u5386\u5de6\u4fa7<code>Data</code>\uff08\u4e0e\u53f3\u4fa7<code>Data</code>\u4e00\u8d77\uff09\u3002\u5982\u679c\u5728\u5de6\u4fa7\u7684\u79fb\u52a8\u65e0\u6cd5\u5728\u53f3\u4fa7\u5339\u914d\uff0c\u6216\u8005\u53f3\u4fa7\u6709\u989d\u5916\u7684\u5b57\u6bb5\uff0c\u5c06\u629b\u51fa\u5f02\u5e38\u3002</p> <p>\u6ce8\u610f\uff1a\u6211\u4eec\u5f3a\u70c8\u9f13\u52b1\u4f7f\u7528<code>Connectable</code>\u8fd0\u7b97\u7b26\u800c\u4e0d\u662f<code>&lt;&gt;</code>\u8fd0\u7b97\u7b26\u7f16\u5199\u65b0\u4ee3\u7801\u3002</p> <p>\u4f7f\u7528\u53cc\u8fde\u63a5<code>&lt;&gt;</code>\u8fd0\u7b97\u7b26\uff0c\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u5c06\u4e24\u4e2a\u8fc7\u6ee4\u5668\u7ec4\u5408\u6210\u4e00\u4e2a\u8fc7\u6ee4\u5668\u5757\uff0c\u5982\u4e0b\u6240\u793a\uff1a <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass Block extends Module {\n  val io = IO(new FilterIO)\n  val f1 = Module(new Filter)\n  val f2 = Module(new Filter)\n  f1.io.x &lt;&gt; io.x\n  f1.io.y &lt;&gt; f2.io.x\n  f2.io.y &lt;&gt; io.y\n}\n</code></pre></p> <p>\u53cc\u5411\u6279\u91cf\u8fde\u63a5\u8fd0\u7b97\u7b26<code>&lt;&gt;</code>\u5c06\u540c\u540d\u7684\u53f6\u7aef\u53e3\u76f8\u4e92\u8fde\u63a5\u3002Bundle\u7684Scala\u7c7b\u578b\u4e0d\u9700\u8981\u5339\u914d\u3002\u5982\u679c\u4efb\u4e00\u4fa7\u7f3a\u5c11\u4e00\u4e2a\u547d\u540d\u4fe1\u53f7\uff0cChisel\u5c06\u7ed9\u51fa\u5982\u4e0b\u4f8b\u6240\u793a\u7684\u9519\u8bef\uff1a</p> <p><pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\n\nclass NotReallyAFilterIO extends Bundle {\n  val x = Flipped(new PLink)\n  val y = new PLink\n  val z = Output(new Bool())\n}\nclass Block2 extends Module {\n  val io1 = IO(new FilterIO)\n  val io2 = IO(Flipped(new NotReallyAFilterIO))\n\n  io1 &lt;&gt; io2\n}\n</code></pre> \u4e0b\u9762\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u8fd9\u4e2a\u4f8b\u5b50\u7684\u7ed3\u679c\u9519\u8bef\uff1a <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:crash\nemitSystemVerilog(new Block2)\n</code></pre> \u53cc\u5411\u8fde\u63a5\u5e94\u8be5\u53ea\u7528\u4e8e\u6709\u65b9\u5411\u7684\u5143\u7d20\uff08\u5982IO\uff09\uff0c\u4f8b\u5982\uff0c\u8fde\u63a5\u4e24\u4e2a\u7ebf\u4e0d\u53d7\u652f\u6301\uff0c\u56e0\u4e3aChisel\u4e0d\u4e00\u5b9a\u80fd\u81ea\u52a8\u786e\u5b9a\u65b9\u5411\u3002 \u4f8b\u5982\uff0c\u5373\u4f7f\u53ef\u4ee5\u4ece\u7aef\u70b9\u77e5\u9053\u65b9\u5411\uff0c\u5728\u6b64\u5904\u653e\u7f6e\u4e24\u4e2a\u4e34\u65f6\u7ebf\u5e76\u8fde\u63a5\u5b83\u4eec\u4e5f\u4e0d\u4f1a\u8d77\u4f5c\u7528\uff1a</p> <p><pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\n\nclass BlockWithTemporaryWires extends Module {\n  val io = IO(new FilterIO)\n  val f1 = Module(new Filter)\n  val f2 = Module(new Filter)\n  f1.io.x &lt;&gt; io.x\n val tmp1 = Wire(new FilterIO)\n val tmp2 = Wire(new FilterIO)\n  f1.io.y &lt;&gt; tmp1\n  tmp1 &lt;&gt; tmp2\n  tmp2 &lt;&gt; f2.io.x\n  f2.io.y &lt;&gt; io.y\n}\n</code></pre> \u4e0b\u9762\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u8fd9\u4e2a\u4f8b\u5b50\u7684\u7ed3\u679c\u9519\u8bef\uff1a <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:crash\nemitSystemVerilog(new BlockWithTemporaryWires)\n</code></pre> \u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1\u8fde\u63a5\u8fd0\u7b97\u7b26\u6df1\u5165\u63a2\u8ba8</p> <p>\u6ce8\u610f\uff1a\u5f53\u4f7f\u7528<code>Chisel._</code>\uff08\u517c\u5bb9\u6a21\u5f0f\uff09\u800c\u4e0d\u662f<code>chisel3._</code>\u65f6\uff0c<code>:=</code>\u8fd0\u7b97\u7b26\u4ee5\u7c7b\u4f3c\u4e8e<code>&lt;&gt;</code>\u7684\u53cc\u5411\u65b9\u5f0f\u5de5\u4f5c\uff0c\u4f46\u4e0d\u5b8c\u5168\u76f8\u540c\u3002</p>"},{"location":"chisel_explanation/interfaces-and-connections/#-readyvalidio-decoupled","title":"\u6807\u51c6\u5c31\u7eea-\u6709\u6548\u63a5\u53e3\uff08ReadyValidIO / Decoupled\uff09","text":"<p>Chisel\u4e3a\u5c31\u7eea-\u6709\u6548\u63a5\u53e3\u63d0\u4f9b\u4e86\u6807\u51c6\u63a5\u53e3\uff08\u4f8b\u5982\u5728AXI\u4e2d\u4f7f\u7528\uff09\u3002 \u5c31\u7eea-\u6709\u6548\u63a5\u53e3\u7531<code>ready</code>\u4fe1\u53f7\u3001<code>valid</code>\u4fe1\u53f7\u548c\u5b58\u50a8\u5728<code>bits</code>\u4e2d\u7684\u4e00\u4e9b\u6570\u636e\u7ec4\u6210\u3002 <code>ready</code>\u4f4d\u8868\u793a\u6d88\u8d39\u8005\u51c6\u5907\u597d\u6d88\u8d39\u6570\u636e\u3002 <code>valid</code>\u4f4d\u8868\u793a\u751f\u4ea7\u8005\u5728<code>bits</code>\u4e0a\u6709\u6709\u6548\u6570\u636e\u3002 \u5f53<code>ready</code>\u548c<code>valid</code>\u90fd\u88ab\u65ad\u8a00\u65f6\uff0c\u6570\u636e\u4ece\u751f\u4ea7\u8005\u4f20\u8f93\u5230\u6d88\u8d39\u8005\u3002 \u63d0\u4f9b\u4e86\u4e00\u4e2a\u4fbf\u5229\u65b9\u6cd5<code>fire</code>\uff0c\u5982\u679c<code>ready</code>\u548c<code>valid</code>\u90fd\u88ab\u65ad\u8a00\uff0c\u5219\u8be5\u65b9\u6cd5\u88ab\u65ad\u8a00\u3002</p> <p>\u901a\u5e38\uff0c\u6211\u4eec\u4f7f\u7528\u5b9e\u7528\u51fd\u6570<code>Decoupled()</code>\u5c06\u4efb\u4f55\u7c7b\u578b\u8f6c\u6362\u4e3a\u5c31\u7eea-\u6709\u6548\u63a5\u53e3\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u4f7f\u7528ReadyValidIO\u3002</p> <ul> <li><code>Decoupled(...)</code>\u521b\u5efa\u4e00\u4e2a\u751f\u4ea7\u8005/\u8f93\u51fa\u5c31\u7eea-\u6709\u6548\u63a5\u53e3\uff08\u5373bits\u662f\u8f93\u51fa\uff09\u3002</li> <li><code>Flipped(Decoupled(...))</code>\u521b\u5efa\u4e00\u4e2a\u6d88\u8d39\u8005/\u8f93\u5165\u5c31\u7eea-\u6709\u6548\u63a5\u53e3\uff08\u5373bits\u662f\u8f93\u5165\uff09\u3002</li> </ul> <p>\u67e5\u770b\u4ee5\u4e0b\u793a\u4f8bChisel\u4ee3\u7801\uff0c\u4ee5\u66f4\u597d\u5730\u7406\u89e3\u786e\u5207\u751f\u6210\u7684\u5185\u5bb9\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\nimport chisel3.util.Decoupled\n\n/**\n  * \u4f7f\u7528Decoupled(...)\u521b\u5efa\u4e00\u4e2a\u751f\u4ea7\u8005\u63a5\u53e3\u3002\n  * \u5373\uff0c\u5b83\u6709bits\u4f5c\u4e3a\u8f93\u51fa\u3002\n  * \u8fd9\u4f1a\u4ea7\u751f\u4ee5\u4e0b\u7aef\u53e3\uff1a\n  *   input         io_readyValid_ready,\n  *   output        io_readyValid_valid,\n  *   output [31:0] io_readyValid_bits\n  */\nclass ProducingData extends Module {\n  val io = IO(new Bundle {\n    val readyValid = Decoupled(UInt(32.W))\n  })\n  // \u5bf9io.readyValid.ready\u505a\u4e9b\u4ec0\u4e48\n  io.readyValid.valid := true.B\n  io.readyValid.bits := 5.U\n}\n\n/**\n  * \u4f7f\u7528Flipped(Decoupled(...))\u521b\u5efa\u4e00\u4e2a\u6d88\u8d39\u8005\u63a5\u53e3\u3002\n  * \u5373\uff0c\u5b83\u6709bits\u4f5c\u4e3a\u8f93\u5165\u3002\n  * \u8fd9\u4f1a\u4ea7\u751f\u4ee5\u4e0b\u7aef\u53e3\uff1a\n  *   output        io_readyValid_ready,\n  *   input         io_readyValid_valid,\n  *   input  [31:0] io_readyValid_bits\n  */\nclass ConsumingData extends Module {\n  val io = IO(new Bundle {\n    val readyValid = Flipped(Decoupled(UInt(32.W)))\n  })\n  io.readyValid.ready := false.B\n  // \u5bf9io.readyValid.valid\u505a\u4e9b\u4ec0\u4e48\n  // \u5bf9io.readyValid.bits\u505a\u4e9b\u4ec0\u4e48\n}\n</code></pre> <p><code>DecoupledIO</code>\u662f\u4e00\u4e2a\u5c31\u7eea-\u6709\u6548\u63a5\u53e3\uff0c\u5176\u7ea6\u5b9a\u662f\u4e0d\u5bf9\u53d6\u6d88\u65ad\u8a00<code>ready</code>\u6216<code>valid</code>\u6216<code>bits</code>\u7684\u7a33\u5b9a\u6027\u505a\u4efb\u4f55\u4fdd\u8bc1\u3002 \u8fd9\u610f\u5473\u7740<code>ready</code>\u548c<code>valid</code>\u4e5f\u53ef\u4ee5\u5728\u6ca1\u6709\u6570\u636e\u4f20\u8f93\u7684\u60c5\u51b5\u4e0b\u53d6\u6d88\u65ad\u8a00\u3002</p> <p><code>IrrevocableIO</code>\u662f\u4e00\u4e2a\u5c31\u7eea-\u6709\u6548\u63a5\u53e3\uff0c\u5176\u7ea6\u5b9a\u662f\u5728<code>valid</code>\u88ab\u65ad\u8a00\u4e14<code>ready</code>\u88ab\u53d6\u6d88\u65ad\u8a00\u65f6\uff0c<code>bits</code>\u7684\u503c\u4e0d\u4f1a\u6539\u53d8\u3002 \u6b64\u5916\uff0c\u6d88\u8d39\u8005\u5728<code>ready</code>\u4e3a\u9ad8\u800c<code>valid</code>\u4e3a\u4f4e\u7684\u5468\u671f\u540e\u5e94\u4fdd\u6301<code>ready</code>\u88ab\u65ad\u8a00\u3002 \u8bf7\u6ce8\u610f\uff0c\u4e0d\u53ef\u64a4\u9500\u7ea6\u675f\u4ec5\u662f\u4e00\u4e2a\u7ea6\u5b9a\uff0c\u65e0\u6cd5\u901a\u8fc7\u63a5\u53e3\u5f3a\u5236\u6267\u884c\u3002 Chisel\u4e0d\u4f1a\u81ea\u52a8\u751f\u6210\u68c0\u67e5\u5668\u6216\u65ad\u8a00\u6765\u5f3a\u5236\u6267\u884c\u4e0d\u53ef\u64a4\u9500\u7ea6\u5b9a\u3002</p>"},{"location":"chisel_explanation/intrinsics/","title":"\u5185\u90e8\u51fd\u6570","text":"<p>Chisel \u5185\u90e8\u51fd\u6570\uff08Intrinsics\uff09\u7528\u4e8e\u8868\u8fbe\u5b9e\u73b0\u5b9a\u4e49\u7684\u529f\u80fd\u3002 \u5185\u90e8\u51fd\u6570\u4e3a\u7279\u5b9a\u7f16\u8bd1\u5668\u63d0\u4f9b\u4e86\u4e00\u79cd\u65b9\u5f0f\uff0c\u53ef\u4ee5\u6269\u5c55\u8bed\u8a00\u7684\u529f\u80fd\uff0c\u800c\u8fd9\u4e9b\u529f\u80fd\u65e0\u6cd5\u901a\u8fc7\u5e93\u4ee3\u7801\u5b9e\u73b0\u3002</p> <p>\u5185\u90e8\u51fd\u6570\u5c06\u7531\u5b9e\u73b0\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\u3002\u53ef\u7528\u7684\u5185\u90e8\u51fd\u6570\u7531\u5b9e\u73b0\u6587\u6863\u8bb0\u5f55\u3002</p> <p><code>Intrinsic</code>\u548c<code>IntrinsicExpr</code>\u53ef\u7528\u4e8e\u521b\u5efa\u5185\u90e8\u51fd\u6570\u8bed\u53e5\u548c\u8868\u8fbe\u5f0f\u3002</p>"},{"location":"chisel_explanation/intrinsics/#_2","title":"\u53c2\u6570\u5316","text":"<p>\u53c2\u6570\u53ef\u4ee5\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9IntModule\u6784\u9020\u51fd\u6570\u3002</p>"},{"location":"chisel_explanation/intrinsics/#_3","title":"\u5185\u90e8\u51fd\u6570\u8868\u8fbe\u5f0f\u793a\u4f8b","text":"<p>\u4ee5\u4e0b\u4ee3\u7801\u4e3a\u540d\u4e3a\"MyIntrinsic\"\u7684\u5185\u90e8\u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u5185\u90e8\u51fd\u6570\u3002 \u5b83\u63a5\u53d7\u4e00\u4e2a\u540d\u4e3a\"STRING\"\u7684\u53c2\u6570\uff0c\u5e76\u6709\u51e0\u4e2a\u8f93\u5165\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\nimport chisel3._\n// Below is required for scala 3 migration\nimport chisel3.experimental.fromStringToStringParam\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:compile-only\nclass Foo extends RawModule {\n  val myresult = IntrinsicExpr(\"MyIntrinsic\", UInt(32.W), \"STRING\" -&gt; \"test\")(3.U, 5.U)\n}\n</code></pre>"},{"location":"chisel_explanation/layers/","title":"\u5c42","text":"<p>\u5c42\u63cf\u8ff0\u4e86\u7528\u6237\u5e0c\u671b\u5728Verilog\u751f\u6210\u65f6_\u53ef\u9009_\u5305\u542b\u7684Chisel\u751f\u6210\u5668\u529f\u80fd\u3002\u5b9e\u9645\u4e0a\uff0c\u5b83\u4eec\u662f\u4e00\u79cd\u8bbf\u95eeSystemVerilog\u7684<code>bind</code>\u6784\u9020\u548c<code>`ifdef</code>\u9884\u5904\u7406\u5668\u5b8f\u7684\u529f\u80fd\u3002\u6309\u7167\u8bbe\u8ba1\uff0c\u5c42\u7684\u53ef\u9009\u529f\u80fd\u4e0d\u5141\u8bb8\u5f71\u54cd\u5c42\u5916\u7684\u903b\u8f91\u3002</p> <p>\u5c42\u901a\u5e38\u7528\u4e8e\u63cf\u8ff0\u8bbe\u8ba1\u9a8c\u8bc1\u4ee3\u7801\u6216\u8c03\u8bd5\u903b\u8f91\uff0c\u7528\u6237\u5e0c\u671b\u80fd\u591f\u7a0d\u540e\u7981\u7528\uff08\u51fa\u4e8e\u6027\u80fd\u3001\u8be6\u7ec6\u7a0b\u5ea6\u6216\u6574\u6d01\u539f\u56e0\uff09\u6216\u5185\u90e8\u4f7f\u7528\uff0c\u4f46\u4ece\u4ea4\u4ed8\u7ed9\u5ba2\u6237\u7684\u7248\u672c\u4e2d\u6392\u9664\u3002</p>"},{"location":"chisel_explanation/layers/#_2","title":"\u6982\u8ff0","text":"<p>\u4e00\u4e2a\u5c42\u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff1a</p> <ol> <li>\u4e00\u4e2a\u5c42_\u58f0\u660e_\uff0c\u4ee5\u53ca</li> <li>Chisel\u6a21\u5757\u5185\u7684\u4e00\u4e2a\u6216\u591a\u4e2a_\u5c42\u5757_\u3002</li> </ol> <p>\u58f0\u660e\u8868\u793a\u53ef\u4ee5\u5b58\u5728\u53ef\u9009\u529f\u80fd\u3002\u5c42\u5757\u5305\u542b\u53ef\u9009\u529f\u80fd\u3002</p> <p>\u6709\u4e24\u79cd\u7c7b\u578b\u7684\u5c42\u3002\u5c42\u7c7b\u578b\u51b3\u5b9a\u4e86_\u7ea6\u5b9a_\uff0c\u5373\u5c42\u7684\u5c42\u5757\u5728Verilog\u4e2d\u5982\u4f55\u8868\u793a\u4ee5\u53ca\u542f\u7528\u5c42\u7684\u673a\u5236\u3002\u53ef\u7528\u7684\u5c42\u7c7b\u578b\u6709\uff1a</p> <ol> <li>\"\u63d0\u53d6\"\u5c42\uff1a\u5176\u5757\u88ab\u964d\u7ea7\u4e3a\u4f7f\u7528<code>bind</code>\u5b9e\u4f8b\u5316\u7684\u6a21\u5757\uff0c\u53ef\u4ee5\u901a\u8fc7\u5728Verilog\u751f\u6210\u671f\u95f4\u5305\u542b\u6587\u4ef6\u6765\u542f\u7528\uff0c\u4ee5\u53ca</li> <li>\"\u5185\u8054\"\u5c42\uff1a\u5176\u5757\u5c06\u88ab<code>`ifdef</code>\u5b8f\u4fdd\u62a4\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6eVerilog\u9884\u5904\u7406\u5668\u5b9a\u4e49\u6765\u542f\u7528\u3002</li> </ol> <p>\u63d0\u53d6\u5c42\u8fd8\u53ef\u4ee5\u6307\u5b9a\u5199\u5165\u5176\u9644\u5c5e\u7269\u7684\u76ee\u5f55\u3002</p> <p>:::info</p> <p>\u5173\u4e8e\u8fd9\u4e9bSystemVerilog\u6982\u5ff5\u7684\u66f4\u591a\u4fe1\u606f\uff0cIEEE 1800-2023\u6807\u51c6\u5728\u7b2c23.11\u8282\u8ba8\u8bba\u4e86<code>bind</code>\uff0c\u5728\u7b2c23.6\u8282\u8ba8\u8bba\u4e86<code>`ifdef</code>\u3002</p> <p>:::</p> <p>\u8981\u58f0\u660e\u4e00\u4e2a\u5c42\uff0c\u5728scala\u4e2d\u521b\u5efa\u4e00\u4e2a\u7ee7\u627f\u62bd\u8c61\u7c7b<code>chisel3.layer.Layer</code>\u7684\u5355\u4f8b<code>object</code>\uff0c\u5411\u5c42\u6784\u9020\u51fd\u6570\u4f20\u9012<code>chisel3.layer.LayerConfig.Extract</code>\u7c7b\u7684\u5bf9\u8c61\uff08\u7528\u4e8e\u63d0\u53d6\u5c42\uff09\uff0c\u6216\u8005\u5bf9\u8c61<code>chisel3.layer.LayerConfig.Inline</code>\uff08\u7528\u4e8e\u5185\u8054\u5c42\uff09\u3002</p> <p>\u4e0b\u9762\uff0c\u58f0\u660e\u4e86\u4e00\u4e2a\u63d0\u53d6\u5c42\u548c\u4e00\u4e2a\u5185\u8054\u5c42\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3.layer.{Layer, LayerConfig}\n\nobject A extends Layer(LayerConfig.Extract())\n\nobject B extends Layer(LayerConfig.Inline)\n</code></pre> <p>\u5c42\u53ef\u4ee5\u5d4c\u5957\u3002\u5728\u7236\u5c42\u4e0b\u5d4c\u5957\u5b50\u5c42\u610f\u5473\u7740\u5b50\u5c42\u53ef\u4ee5\u8bbf\u95ee\u7236\u5c42\u4e2d\u7684\u6784\u9020\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u53ea\u6709\u5728\u7236\u5c42\u5df2\u542f\u7528\u7684\u60c5\u51b5\u4e0b\uff0c\u5b50\u5c42\u624d\u4f1a\u88ab\u542f\u7528\u3002\u8981\u58f0\u660e\u5d4c\u5957\u5c42\uff0c\u8bf7\u5728\u53e6\u4e00\u4e2a\u58f0\u660e\u5185\u6269\u5c55<code>chisel3.layer.Layer</code>\u62bd\u8c61\u7c7b\u3002</p> <p>\u4ee5\u4e0b\u793a\u4f8b\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5305\u542b\u4e24\u4e2a\u5d4c\u5957\u5c42\u7684\u63d0\u53d6\u5c42\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nobject C extends Layer(LayerConfig.Extract()) {\n  object D extends Layer(LayerConfig.Extract())\n  object E extends Layer(LayerConfig.Inline) {\n    object F extends Layer(LayerConfig.Inline)\n  }\n}\n</code></pre> <p>:::info</p> <p>SystemVerilog\u7981\u6b62\u5728\u53e6\u4e00\u4e2a<code>bind</code>\u5b9e\u4f8b\u5316\u4e0b\u8fdb\u884c<code>bind</code>\u5b9e\u4f8b\u5316\u3002\u7136\u800c\uff0cChisel\u5141\u8bb8\u5d4c\u5957\u63d0\u53d6\u5c42\u3002FIRRTL\u7f16\u8bd1\u5668\u4f1a\u91cd\u6784\u5d4c\u5957\u7684\u63d0\u53d6\u5c42\uff0c\u4f7f\u5176\u6210\u4e3a\u901a\u8fc7\u7aef\u53e3\u901a\u4fe1\u7684\u5144\u5f1f\u6a21\u5757\u3002</p> <p>:::</p> <p>:::warning</p> <p>\u63d0\u53d6\u5c42\u4e0d\u80fd\u5d4c\u5957\u5728\u5185\u8054\u5c42\u4e0b\u3002\u7136\u800c\uff0c\u5185\u8054\u5c42\u53ef\u4ee5\u5d4c\u5957\u5728\u63d0\u53d6\u5c42\u4e0b\u3002</p> <p>\u4efb\u4f55\u5305\u542b\u5c42\u5757\u6216\u4f20\u9012\u6027\u5730\u5728\u5176\u5b50\u6a21\u5757\u4e2d\u5305\u542b\u5c42\u5757\u7684\u6a21\u5757\u90fd\u4e0d\u80fd\u5728\u5c42\u5757\u4e0b\u5b9e\u4f8b\u5316\u3002</p> <p>:::</p> <p>\u4e0e\u4e00\u4e2a\u5c42\u76f8\u5173\u8054\u7684_\u5c42\u5757_\uff0c\u5411\u6a21\u5757\u6dfb\u52a0\u53ef\u9009\u529f\u80fd\uff0c\u5982\u679c\u8be5\u5c42\u542f\u7528\uff0c\u5219\u542f\u7528\u8be5\u529f\u80fd\u3002\u8981\u5b9a\u4e49\u4e00\u4e2a\u5c42\u5757\uff0c\u8bf7\u5728Chisel\u6a21\u5757\u5185\u4f7f\u7528<code>chisel3.layer.block</code>\u5e76\u4f20\u9012\u5b83\u5e94\u8be5\u5173\u8054\u7684\u5c42\u3002</p> <p>\u5728\u5c42\u5757\u5185\u90e8\uff0c\u53ef\u4ee5\u4f7f\u7528\u8bcd\u6cd5\u8303\u56f4\u5185\u53ef\u89c1\u7684\u4efb\u4f55Chisel\u6216Scala\u503c\u3002\u5c42\u5757\u4e0d\u80fd\u8fd4\u56de\u503c\u3002\u5c42\u5757\u5185\u521b\u5efa\u7684\u4efb\u4f55\u503c\u5728\u5c42\u5757\u5916\u90fd\u4e0d\u53ef\u8bbf\u95ee\uff0c\u9664\u975e\u4f7f\u7528\u5c42\u7740\u8272\u63a2\u9488\u3002</p> <p>\u4ee5\u4e0b\u793a\u4f8b\u5728\u6a21\u5757<code>Foo</code>\u5185\u5b9a\u4e49\u5c42\u5757\u3002\u6bcf\u4e2a\u5c42\u5757\u5305\u542b\u4e00\u4e2a\u6355\u83b7\u5176\u53ef\u89c1\u8bcd\u6cd5\u8303\u56f4\u4e2d\u7684\u503c\u7684\u7ebf\u3002\uff08\u5bf9\u4e8e\u5d4c\u5957\u5c42\u5757\uff0c\u6b64\u8303\u56f4\u5305\u62ec\u5176\u7236\u5c42\u5757\u3002\uff09\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3._\nimport chisel3.layer.block\n\nclass Foo extends RawModule {\n  val port = IO(Input(Bool()))\n\n  block(A) {\n    val a = WireInit(port)\n  }\n\n  block(B) {\n    val b = WireInit(port)\n  }\n\n  block(C) {\n    val c = WireInit(port)\n    block(C.D) {\n      val d = WireInit(port | c)\n    }\n    block(C.E) {\n      val e = WireInit(port ^ c)\n      block (C.E.F) {\n        val f = WireInit(port &amp; e)\n      }\n    }\n  }\n}\n</code></pre> <p>\u5982\u679c\u53ef\u80fd\uff0c\u5c42\u5757API\u4f1a\u81ea\u52a8\u4e3a\u60a8\u521b\u5efa\u7236\u5c42\u5757\u3002\u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c\u76f4\u63a5\u5728\u6a21\u5757\u4e2d\u521b\u5efa<code>C.D</code>\u7684\u5c42\u5757\u662f\u5408\u6cd5\u7684\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass Bar extends RawModule {\n  block (C.D) {}\n}\n</code></pre> <p>\u5f62\u5f0f\u4e0a\uff0c\u53ea\u8981\u5f53\u524d\u4f5c\u7528\u57df\u662f\u8bf7\u6c42\u5c42\u7684_\u7956\u5148_\uff0c\u5c31\u53ef\u4ee5\u521b\u5efa\u4e0e\u5c42\u5173\u8054\u7684\u5c42\u5757\u3002</p> <p>:::info</p> <p>\u8fd9\u4e2a\u8981\u6c42\u662f\u4e00\u4e2a_\u7956\u5148_\u5173\u7cfb\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a_\u4e25\u683c\u7956\u5148_\u5173\u7cfb\u3002\u8fd9\u610f\u5473\u7740\u5728\u540c\u4e00\u5c42\u7684\u5c42\u5757\u4e0b\u5d4c\u5957\u4e00\u4e2a\u5c42\u5757\u662f\u5408\u6cd5\u7684\uff0c\u5982\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass Baz extends RawModule {\n  block(A) {\n    block(A) {}\n  }\n}\n</code></pre> <p>:::</p>"},{"location":"chisel_explanation/layers/#verilog-abi","title":"Verilog ABI","text":"<p>\u5c42\u4f7f\u7528FIRRTL ABI\u7f16\u8bd1\u4e3aSystemVerilog\u3002\u8fd9\u4e2aABI\u5b9a\u4e49\u4e86Chisel\u8bbe\u8ba1\u4e2d\u5c42\u5757\u7684\u884c\u4e3a\u4ee5\u53ca\u5982\u4f55\u5728\u8bbe\u8ba1\u7f16\u8bd1\u4e3aSystemVerilog\u540e\u542f\u7528\u5c42\u3002</p> <p>:::info</p> <p>\u6709\u5173\u5c42\u7684FIRRTL ABI\u7684\u786e\u5207\u5b9a\u4e49\uff0c\u8bf7\u53c2\u9605FIRRTL ABI\u89c4\u8303\u3002</p> <p>:::</p>"},{"location":"chisel_explanation/layers/#_3","title":"\u63d0\u53d6\u5c42","text":"<p>\u63d0\u53d6\u5c42\u7684\u5c42\u5757\u4ece\u8bbe\u8ba1\u4e2d\u79fb\u9664\u3002\u8981\u542f\u7528\u4e00\u4e2a\u5c42\uff0c\u5e94\u8be5\u5728\u8bbe\u8ba1\u4e2d\u5305\u542b\u4e00\u4e2a\u7279\u5b9a\u540d\u79f0\u7684\u6587\u4ef6\u3002\u8fd9\u4e2a\u6587\u4ef6\u4ee5<code>layers-</code>\u5f00\u5934\uff0c\u7136\u540e\u5305\u62ec\u7535\u8def\u540d\u79f0\u548c\u6240\u6709\u5c42\u540d\u79f0\uff0c\u7528\u7834\u6298\u53f7\uff08<code>-</code>\uff09\u5206\u9694\u3002</p> <p>\u4f8b\u5982\uff0c\u5bf9\u4e8e\u4e0a\u9762\u58f0\u660e\u7684\u6a21\u5757<code>Foo</code>\uff0c\u8fd9\u5c06\u4ea7\u751f\u4e09\u4e2a\u6587\u4ef6\uff0c\u6bcf\u4e2a\u63d0\u53d6\u5c42\u4e00\u4e2a\uff1a</p> <pre><code>layers-Foo-A.sv\nlayers-Foo-C.sv\nlayers-Foo-C-D.sv\n</code></pre> <p>\u8981\u5728\u7f16\u8bd1\u65f6\u542f\u7528\u8fd9\u4e9b\u5c42\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\uff0c\u5e94\u8be5\u5728\u6784\u5efa\u4e2d\u5305\u542b\u9002\u5f53\u7684\u6587\u4ef6\u3002\u53ef\u4ee5\u5305\u542b\u4efb\u610f\u6587\u4ef6\u7ec4\u5408\u3002\u53ea\u5305\u542b\u5b50\u5c42\u7684\u6587\u4ef6\u5c06\u81ea\u52a8\u5305\u542b\u5176\u7236\u5c42\u7684\u6587\u4ef6\u3002</p>"},{"location":"chisel_explanation/layers/#_4","title":"\u5185\u8054\u5c42","text":"<p>\u5185\u8054\u5c42\u7684\u5c42\u5757\u7528\u6761\u4ef6\u7f16\u8bd1\u6307\u4ee4\u4fdd\u62a4\u3002\u8981\u542f\u7528\u5185\u8054\u5c42\uff0c\u5728\u7f16\u8bd1\u8bbe\u8ba1\u65f6\u8bbe\u7f6e\u9884\u5904\u7406\u5668\u5b9a\u4e49\u3002\u9884\u5904\u7406\u5668\u5b9a\u4e49\u4ee5<code>layer_</code>\u5f00\u5934\uff0c\u7136\u540e\u5305\u62ec\u7535\u8def\u540d\u79f0\u548c\u6240\u6709\u5c42\u540d\u79f0\uff0c\u7528\u7f8e\u5143\u7b26\u53f7\uff08<code>$</code>\uff09\u5206\u9694\u3002\u7236\u63d0\u53d6\u5c42\u540d\u79f0\u51fa\u73b0\u5728\u5b8f\u4e2d\u3002</p> <p>\u4f8b\u5982\uff0c\u5bf9\u4e8e\u4e0a\u9762\u58f0\u660e\u7684\u6a21\u5757<code>Foo</code>\uff0c\u8fd9\u5c06\u5bf9\u4e09\u4e2a\u5b8f\u654f\u611f\uff0c\u6bcf\u4e2a\u5185\u8054\u5c42\u4e00\u4e2a\uff1a</p> <pre><code>layer_Foo$B\nlayer_Foo$C$E\nlayer_Foo$C$E$F\n</code></pre>"},{"location":"chisel_explanation/layers/#_5","title":"\u7528\u6237\u5b9a\u4e49\u7684\u5c42","text":"<p>\u7528\u6237\u53ef\u4ee5\u81ea\u7531\u5b9a\u4e49\u4efb\u610f\u6570\u91cf\u7684\u5c42\u3002\u4e4b\u524d\u663e\u793a\u7684\u6240\u6709\u5c42\u90fd\u662f\u7528\u6237\u5b9a\u4e49\u7684\uff0c\u4f8b\u5982\uff0c<code>A</code>\u548c<code>C.E</code>\u662f\u7528\u6237\u5b9a\u4e49\u7684\u5c42\u3002\u53ea\u6709\u5f53\u7528\u6237\u5b9a\u4e49\u7684\u5c42\u6709\u5c42\u5757\u7528\u6237\u65f6\uff0c\u5b83\u4eec\u624d\u4f1a\u88ab\u53d1\u9001\u5230FIRRTL\u3002\u8981\u66f4\u6539\u6b64\u884c\u4e3a\u5e76\u65e0\u6761\u4ef6\u5730\u53d1\u51fa\u7528\u6237\u5b9a\u4e49\u7684\u5c42\uff0c\u8bf7\u4f7f\u7528<code>chisel3.layer.addLayer</code> API\u3002</p> <p>:::tip</p> <p>\u5728\u521b\u5efa\u65b0\u7684\u7528\u6237\u5b9a\u4e49\u5c42\u4e4b\u524d\uff0c\u8bf7\u8003\u8651\u4f7f\u7528\u4e0b\u9762\u5b9a\u4e49\u7684\u5185\u7f6e\u5c42\u3002\u6b64\u5916\uff0c\u5982\u679c\u5728\u4e00\u4e2a\u66f4\u5927\u7684\u9879\u76ee\u4e2d\u5de5\u4f5c\uff0c\u8be5\u9879\u76ee\u53ef\u80fd\u6709\u81ea\u5df1\u7684\u7528\u6237\u5b9a\u4e49\u5c42\uff0c\u60a8\u5e94\u8be5\u4f7f\u7528\u8fd9\u4e9b\u5c42\u3002\u8fd9\u662f\u56e0\u4e3aABI\u4f1a\u5f71\u54cd\u6784\u5efa\u7cfb\u7edf\u3002\u8bf7\u54a8\u8be2\u9879\u76ee\u7684\u6280\u672f\u8d1f\u8d23\u4eba\uff0c\u770b\u770b\u662f\u5426\u662f\u8fd9\u79cd\u60c5\u51b5\u3002</p> <p>:::</p>"},{"location":"chisel_explanation/layers/#_6","title":"\u5185\u7f6e\u5c42","text":"<p>Chisel\u63d0\u4f9b\u4e86\u51e0\u4e2a\u5185\u7f6e\u5c42\u3002\u8fd9\u4e9b\u5c42\u7684\u5b8c\u6574Scala\u8def\u5f84\u5982\u4e0b\u6240\u793a\u3002\u6240\u6709\u5185\u7f6e\u5c42\u90fd\u662f\u63d0\u53d6\u5c42\uff1a</p> <pre><code>chisel3.layers.Verification\n\u251c\u2500\u2500 chisel3.layers.Verification.Assert\n\u251c\u2500\u2500 chisel3.layers.Verification.Assume\n\u2514\u2500\u2500 chisel3.layers.Verification.Cover\n</code></pre> <p>\u8fd9\u4e9b\u5185\u7f6e\u5c42\u5177\u6709\u53cc\u91cd\u76ee\u7684\u3002\u9996\u5148\uff0c\u8fd9\u4e9b\u5c42\u4e0e\u5c06\u9a8c\u8bc1\u4ee3\u7801\u9694\u79bb\u7684\u5e38\u89c1\u7528\u4f8b\u76f8\u5339\u914d\u3002<code>Verification</code>\u5c42\u7528\u4e8e\u5e38\u89c1\u7684\u9a8c\u8bc1\u9644\u5c5e\u7269\u3002<code>Assert</code>\u3001<code>Assume</code>\u548c<code>Cover</code>\u5c42\u5206\u522b\u7528\u4e8e\u65ad\u8a00\u3001\u5047\u8bbe\u548c\u8986\u76d6\u8bed\u53e5\u3002\u5176\u6b21\uff0cChisel\u6807\u51c6\u5e93\u5728\u5176\u8bb8\u591aAPI\u4e2d\u4f7f\u7528\u5b83\u4eec\u3002\u9664\u975e\u53e6\u5916\u5305\u88c5\u5728\u4e0d\u540c\u7684\u5c42\u5757\u4e2d\uff0c\u5426\u5219\u4ee5\u4e0b\u64cd\u4f5c\u4f1a\u81ea\u52a8\u653e\u7f6e\u5728\u5c42\u4e2d\uff1a</p> <ul> <li>\u6253\u5370\u88ab\u653e\u7f6e\u5728<code>Verification</code>\u5c42\u4e2d</li> <li>\u65ad\u8a00\u88ab\u653e\u7f6e\u5728<code>Verification.Assert</code>\u5c42\u4e2d</li> <li>\u5047\u8bbe\u88ab\u653e\u7f6e\u5728<code>Verification.Assume</code>\u5c42\u4e2d</li> <li>\u8986\u76d6\u88ab\u653e\u7f6e\u5728<code>Verification.Cover</code>\u5c42\u4e2d</li> </ul> <p>\u4e3a\u4e86\u8f93\u51fa\u7684\u53ef\u9884\u6d4b\u6027\uff0c\u8fd9\u4e9b\u5c42\u5c06\u59cb\u7ec8\u51fa\u73b0\u5728Chisel\u53d1\u51fa\u7684FIRRTL\u4e2d\u3002\u8981\u66f4\u6539\u6b64\u884c\u4e3a\uff0c\u8bf7\u4f7f\u7528<code>firtool</code>\u547d\u4ee4\u884c\u9009\u9879_\u4e13\u95e8\u5316_\u8fd9\u4e9b\u5c42\uff08\u901a\u8fc7\u4f7f\u5b83\u4eec\u59cb\u7ec8\u542f\u7528\u6216\u7981\u7528\u6765\u79fb\u9664\u5b83\u4eec\u7684\u53ef\u9009\u6027\uff09\u3002\u4f7f\u7528<code>-enable-layers</code>\u542f\u7528\u4e00\u4e2a\u5c42\uff0c<code>-disable-layers</code>\u7981\u7528\u4e00\u4e2a\u5c42\uff0c\u6216\u8005<code>-default-layer-specialization</code>\u8bbe\u7f6e\u9ed8\u8ba4\u4e13\u95e8\u5316\u3002</p> <p>:::tip</p> <p>\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u9ad8\u7ea7API\u7528\u7528\u6237\u5b9a\u4e49\u7684\u5c42\u6269\u5c55\u5185\u7f6e\u5c42\u3002\u4e3a\u6b64\uff0c\u5fc5\u987b\u5c06\u5c42\u7236\u7ea7\u6307\u5b9a\u4e3a\u9690\u5f0f\u503c\u3002</p> <p>\u4ee5\u4e0b\u793a\u4f8b\u5c06\u5c42<code>Debug</code>\u5d4c\u5957\u5230<code>Verification</code>\u5c42\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nobject UserDefined {\n  // Define an implicit val `root` of type `Layer` to cause layers which can see\n  // this to use `root` as their parent layer.  This allows us to nest the\n  // user-defined `Debug` layer under the built-in `Verification` layer.\n  implicit val root: Layer = chisel3.layers.Verification\n  object Debug extends Layer(LayerConfig.Inline)\n}\n</code></pre> <p>:::</p>"},{"location":"chisel_explanation/layers/#_7","title":"\u5c42\u7740\u8272","text":"<p>\u867d\u7136\u5c42\u4e0d\u5141\u8bb8\u5f71\u54cd\u8bbe\u8ba1\u6216\u5176\u7236\u5c42\uff0c\u4f46\u901a\u5e38\u5141\u8bb8\u5c42\u5757\u5c06\u4fe1\u606f\u4ece\u5176\u5305\u542b\u6a21\u5757\u53d1\u9001\u51fa\u53bb\uff0c\u4ee5\u4fbf\u540c\u4e00\u5c42\u6216\u5b50\u5c42\u7684\u5c42\u5757\u8bfb\u53d6\u662f\u6709\u7528\u4e14\u5fc5\u8981\u7684\u3002\u5177\u6709\u8fd9\u79cd\u53ef\u9009\u5c5e\u6027\u7684\u786c\u4ef6\u88ab\u79f0\u4e3a_\u5c42\u7740\u8272_\u3002\u63a2\u9488\u548c\u7ebf\u90fd\u53ef\u4ee5\u8fdb\u884c\u5c42\u7740\u8272\u3002</p>"},{"location":"chisel_explanation/layers/#_8","title":"\u5c42\u7740\u8272\u63a2\u9488\u548c\u7ebf","text":"<p>\u5c42\u7740\u8272\u63a2\u9488\u662f\u4e00\u79cd\u5728\u7528\u6237\u5728Verilog\u751f\u6210\u671f\u95f4\u542f\u7528\u5176\u76f8\u5e94\u5c42\u65f6\u5b58\u5728\u7684\u63a2\u9488\u3002\u5c42\u7740\u8272\u63a2\u9488\u7528\u4e8e\u63cf\u8ff0\u53ef\u9009\u7684\u9a8c\u8bc1\u3001\u8c03\u8bd5\u6216\u65e5\u5fd7\u63a5\u53e3\u3002</p> <p>\u5c42\u7740\u8272\u7ebf\u7528\u4f5c\u5df2\u5b9a\u4e49\u63a2\u9488\u503c\u7684\u4e34\u65f6\u5b58\u50a8\u3002\u5b83\u4eec\u7528\u4e8e\u540c\u4e00\u6a21\u5757\u4e2d\u540c\u4e00\u5c42\u7684\u5c42\u5757\u4e4b\u95f4\u7684\u901a\u4fe1\uff0c\u6216\u8005\u5728\u5c06\u63a2\u9488\u8f6c\u53d1\u5230\u7aef\u53e3\u65f6\u4f5c\u4e3a\u4e34\u65f6\u5b58\u50a8\u3002</p> <p>\u5982\u679c\u5728\u542f\u7528\u63a2\u9488\u6216\u7ebf\u7684\u989c\u8272\u65f6\u542f\u7528\u4e86<code>define</code>\uff0c\u5219\u5c42\u7740\u8272\u63a2\u9488\u6216\u7ebf\u53ef\u4ee5\u662f<code>define</code>\u7684\u76ee\u6807\u3002\u5982\u679c\u5728\u542f\u7528<code>read</code>\u65f6\u542f\u7528\u4e86\u63a2\u9488\u6216\u7ebf\u7684\u989c\u8272\uff0c\u5219\u53ef\u4ee5\u4ece\u5c42\u7740\u8272\u63a2\u9488\u6216\u7ebf\u4e2d<code>read</code>\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u60a8\u53ef\u4ee5\u5199\u5165\u60a8\u7684\u5c42\u6216\u5b50\u5c42\uff0c\u60a8\u53ef\u4ee5\u4ece\u60a8\u7684\u5c42\u6216\u7236\u5c42\u8bfb\u53d6\u3002</p> <p>:::info</p> <p>\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605FIRRTL\u89c4\u8303\u7684\u5c42\u7740\u8272\u90e8\u5206\u3002</p> <p>:::</p> <p>\u4e0b\u9762\u7684\u793a\u4f8b\u663e\u793a\u4e86\u4e24\u4e2a\u5c42\u7740\u8272\u63a2\u9488\u7aef\u53e3\u548c\u4e00\u4e2a\u4ee5\u5408\u6cd5\u65b9\u5f0f\u9a71\u52a8\u7684\u5c42\u7740\u8272\u63a2\u9488\u7ebf\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:reset\nimport chisel3._\nimport chisel3.layer.{Layer, LayerConfig}\nimport chisel3.probe.{Probe, ProbeValue, define}\n\nobject A extends Layer(LayerConfig.Extract())\nobject B extends Layer(LayerConfig.Extract())\n\nclass Foo extends RawModule {\n  val a = IO(Output(Probe(Bool(), A)))\n  val b = IO(Output(Probe(Bool(), B)))\n\n  layer.block(A) {\n    val a_wire = WireInit(false.B)\n    define(a, ProbeValue(a_wire))\n  }\n\n  val b_wire_probe = Wire(Probe(Bool(), B))\n  define(b, b_wire_probe)\n\n  layer.block(B) {\n    val b_wire = WireInit(false.B)\n    define(b_wire_probe, ProbeValue(b_wire))\n  }\n\n}\n</code></pre> <p>\u6b64\u5916\uff0c\u7531\u4e8e\u4ece\u5c42\u5757\u5185\u9a71\u52a8\u5c42\u7740\u8272\u63a2\u9488\u7ebf\u7684\u6a21\u5f0f\u5f88\u5e38\u89c1\uff0c\u5c42\u5757\u4e5f\u80fd\u591f\u76f4\u63a5\u8fd4\u56de\u5c42\u7740\u8272\u7ebf\u3002\u4e3a\u6b64\uff0c\u5c42\u5757\u7684\u8fd4\u56de\u503c\u5fc5\u987b\u662f<code>Data</code>\u7684\u5b50\u7c7b\u578b\u3002</p> <p>\u4f7f\u7528\u6b64\u529f\u80fd\uff0c\u53ef\u4ee5\u6309\u5982\u4e0b\u65b9\u5f0f\u91cd\u5199\u7b2c\u4e8c\u4e2a\u5c42\u5757\uff1a</p> <p>``` scala mdoc:silent class Bar extends RawModule {   val b = IO(Output(Probe(Bool(), B)))</p> <p>val b_wire_probe = layer.block(B) {     val b_wire = WireInit(false.B)     define(b_wire_probe, ProbeValue(b_wire))   }</p> <p>define(b, b_wire_probe) } <pre><code>:::info\n\n\u5728\u5b9e\u73b0\u4e2d\uff0c\u4ece\u5c42\u5757\u8fd4\u56de\u7684\u503c\u5c06\u5bfc\u81f4\u5728\u5c42\u5757\u4e4b\u524d\u521b\u5efa\u4e00\u4e2a\u7ebf\u3002\u5373\uff0c\u6a21\u5757`Bar`\u4e2d\u663e\u793a\u7684\u5185\u5bb9\u53ea\u662f`Foo`\u4e2d\u7f16\u5199\u5185\u5bb9\u7684Chisel\u7b80\u5199\u3002\u5982FIRRTL\u89c4\u8303\u4e2d\u6240\u8ff0\uff0c\u5c42\u5757\u6ca1\u6709\u8fd4\u56de\u503c\u7684\u80fd\u529b\u3002\n\n:::\n\n### \u542f\u7528\u5c42\n\n\u5728\u4f7f\u7528\u5c42\u7740\u8272\u63a2\u9488\u65f6\uff0c\u901a\u5e38\u65b9\u4fbf\u5730\u6388\u4e88\u5bf9\u4e00\u4e2a\u6216\u591a\u4e2a\u989c\u8272\u7684\u63a2\u9488\u7684\u8bbf\u95ee\u6743\u9650\u3002\u4f8b\u5982\uff0c\u6d4b\u8bd5\u53f0\u901a\u5e38\u5e0c\u671b_\u542f\u7528_\u88ab\u6d4b\u8bbe\u8ba1\u4e2d\u7684\u6240\u6709\u5c42\uff0c\u4ee5\u4fbf\u83b7\u5f97\u5bf9\u5c42\u7740\u8272\u63a2\u9488\u7aef\u53e3\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u8fd9\u5bf9\u4e8e\u9ad8\u7ea7\u8bbe\u8ba1\u9a8c\u8bc1\u662f\u5fc5\u8981\u7684\u3002\u5982\u679c\u6ca1\u6709\u989d\u5916\u7684\u529f\u80fd\uff0c\u8fd9\u79cd\u7528\u4f8b\u4ec5\u4f7f\u7528\u5c42\u7740\u8272\u5c31\u5f97\u4e0d\u5230\u5f88\u597d\u7684\u652f\u6301\u3002\u9996\u5148\uff0c\u5728\u6d4b\u8bd5\u53f0\u4e2d\u5c01\u88c5\u6240\u6709\u4ee3\u7801\u5230\u5c42\u5757\u4e2d\u662f\u4e4f\u5473\u7684\u3002\u5176\u6b21\uff0c\u6d4b\u8bd5\u53f0\u53ef\u80fd\u9700\u8981\u8bfb\u53d6\u6ca1\u6709\u7236\u5b50\u5173\u7cfb\u7684\u4e0d\u540c\u989c\u8272\u7684\u63a2\u9488\u3002\u6ca1\u6709\u5c42\u5757\u80fd\u591f\u540c\u65f6\u5408\u6cd5\u5730\u4ece\u4e0d\u540c\u7684\u63a2\u9488\u8bfb\u53d6\u5e76\u7ec4\u5408\u7ed3\u679c\u3002\n\n\u4e3a\u4e86\u652f\u6301\u8fd9\u79cd\u7528\u4f8b\uff0cChisel\u63d0\u4f9b\u4e86`layer.enable` API\u3002\u6b64API\u6388\u4e88\u5bf9\u5b9e\u4f8b\u5316\u6a21\u5757\u7684\u5df2\u542f\u7528\u5c42\u7684\u4efb\u4f55\u5c42\u7740\u8272\u63a2\u9488\u7684\u8bbf\u95ee\u6743\u9650\u3002\u53ef\u4ee5\u591a\u6b21\u4f7f\u7528\u6b64API\u4ee5\u542f\u7528\u591a\u4e2a\u5c42\u3002\n\n\u4e0b\u9762\u7684\u793a\u4f8b\u5b9e\u4f8b\u5316\u4e86\u524d\u4e00\u8282\u4e2d\u7684\u6a21\u5757`Foo`\u3002\u5728\u542f\u7528\u5c42`A`\u548c`B`\u540e\uff0c\u6a21\u5757\u53ef\u4ee5\u4ece\u989c\u8272\u4e3a`A`\u548c`B`\u7684\u63a2\u9488\u8bfb\u53d6\uff0c\u5e76\u5728\u5355\u4e2a\u64cd\u4f5c\u4e2d\u4f7f\u7528\u5b83\u4eec\u7684\u7ed3\u679c\uff1a\n\n```scala\n// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3.layer.enable\nimport chisel3.probe.read\n\nclass Bar extends RawModule {\n\n  enable(A)\n  enable(B)\n\n  val foo = Module(new Foo)\n\n  val c = read(foo.a) ^ read(foo.b)\n\n}\n</code></pre></p>"},{"location":"chisel_explanation/layers/#_9","title":"\u793a\u4f8b","text":""},{"location":"chisel_explanation/layers/#_10","title":"\u7b80\u5355\u63d0\u53d6\u5c42","text":"<p>\u4e0b\u9762\u7684\u8bbe\u8ba1\u6709\u4e00\u4e2a\u5355\u4e00\u7684\u63d0\u53d6\u5c42\uff0c\u542f\u7528\u540e\uff0c\u5c06\u6dfb\u52a0\u4e00\u4e2a\u68c0\u67e5\u6ea2\u51fa\u7684\u65ad\u8a00\u3002\u6839\u636eFIRRTL ABI\uff0c\u6211\u4eec\u53ef\u4ee5\u9884\u671f\u5728\u7f16\u8bd1\u65f6\u5c06\u751f\u6210\u4e00\u4e2a\u540d\u4e3a<code>layers-Foo-A.sv</code>\u7684\u6587\u4ef6\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:reset:silent\nimport chisel3._\nimport chisel3.layer.{Layer, LayerConfig, block}\nimport chisel3.ltl.AssertProperty\n\nobject A extends Layer(LayerConfig.Extract())\n\nclass Foo extends Module {\n  val a, b = IO(Input(UInt(4.W)))\n  val sum = IO(Output(UInt(4.W)))\n\n  sum :&lt;= a +% b\n\n  block(A) {\n    withDisable(Disable.Never) {\n      AssertProperty(!(a +&amp; b)(4), \"overflow occurred\")\n    }\n  }\n\n}\n</code></pre> <p>\u7f16\u8bd1\u540e\uff0c\u6211\u4eec\u5f97\u5230\u4ee5\u4e0bSystemVerilog\u3002\u5305\u542b<code>FILE</code>\u7684\u6ce8\u91ca\u8868\u793a\u65b0\u6587\u4ef6\u7684\u5f00\u59cb\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\ncirct.stage.ChiselStage.emitSystemVerilog(\n  new Foo,\n  firtoolOpts = Array(\n    \"-strip-debug-info\",\n    \"-disable-all-randomization\",\n    \"-enable-layers=Verification\",\n    \"-enable-layers=Verification.Assert\",\n    \"-enable-layers=Verification.Assume\",\n    \"-enable-layers=Verification.Cover\"\n  )\n)\n</code></pre> <p>:::info</p> <p>\u4e0a\u9762\u7684\u793a\u4f8b\u662f\u4f7f\u7528firtool\u9009\u9879<code>-enable-layers=Verification</code>\u3001<code>-enable-layers=Verification.Assert</code>\u3001<code>-enable-layers=Verification.Assume</code>\u548c<code>-enable-layers=Verification.Cover</code>\u7f16\u8bd1\u7684\uff0c\u4ee5\u4f7f\u8f93\u51fa\u66f4\u7b80\u6d01\u3002\u901a\u5e38\uff0c\u8fd9\u4e9b\u5185\u7f6e\u5c42\u7684\u7ed1\u5b9a\u6587\u4ef6\u4f1a\u663e\u793a\u3002</p> <p>:::</p> <p>:::info</p> <p>\u6ce8\u610f\uff1a\u751f\u6210\u7684\u6a21\u5757<code>Foo_A</code>\u53ca\u5176\u6587\u4ef6<code>Foo_A.sv</code>\u4e0d\u662fABI\u7684\u4e00\u90e8\u5206\u3002\u9664\u4e86\u7ed1\u5b9a\u6587\u4ef6<code>layers-Foo-A.sv</code>\u5916\uff0c\u60a8\u4e0d\u5e94\u4f9d\u8d56\u4efb\u4f55\u751f\u6210\u7684\u6a21\u5757\u540d\u79f0\u6216\u6587\u4ef6\u3002</p> <p>:::</p>"},{"location":"chisel_explanation/layers/#_11","title":"\u7b80\u5355\u5185\u8054\u5c42","text":"<p>\u4e0b\u9762\u7684\u8bbe\u8ba1\u4e0e\u524d\u4e00\u4e2a\u793a\u4f8b\u76f8\u540c\uff0c\u4f46\u4f7f\u7528\u5185\u8054\u5c42\u3002\u6839\u636eFIRRTL ABI\uff0c\u6211\u4eec\u53ef\u4ee5\u9884\u671f\u5c42\u5757\u7684\u4e3b\u4f53\u5c06\u88ab<code>`ifdef</code>\u4fdd\u62a4\uff0c\u5bf9\u9884\u5904\u7406\u5668\u5b8f<code>layer_Foo$A</code>\u654f\u611f\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:reset:silent\nimport chisel3._\nimport chisel3.layer.{Layer, LayerConfig, block}\nimport chisel3.ltl.AssertProperty\n\nobject A extends Layer(LayerConfig.Inline)\n\nclass Foo extends Module {\n  val a, b = IO(Input(UInt(4.W)))\n  val sum = IO(Output(UInt(4.W)))\n\n  sum :&lt;= a +% b\n\n  block(A) {\n    withDisable(Disable.Never) {\n      AssertProperty(!(a +&amp; b)(4), \"overflow occurred\")\n    }\n  }\n\n}\n</code></pre> <p>\u7f16\u8bd1\u540e\uff0c\u6211\u4eec\u5f97\u5230\u4ee5\u4e0bSystemVerilog\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\ncirct.stage.ChiselStage.emitSystemVerilog(\n  new Foo,\n  firtoolOpts = Array(\n    \"-strip-debug-info\",\n    \"-disable-all-randomization\",\n    \"-enable-layers=Verification,Verification.Assert,Verification.Assume,Verification.Cover\"\n  )\n)\n</code></pre>"},{"location":"chisel_explanation/layers/#_12","title":"\u8bbe\u8ba1\u9a8c\u8bc1\u793a\u4f8b","text":"<p>\u8003\u8651\u8fd9\u6837\u4e00\u4e2a\u7528\u4f8b\uff0c\u8bbe\u8ba1\u6216\u8bbe\u8ba1\u9a8c\u8bc1\u5de5\u7a0b\u5e08\u5e0c\u671b\u5411\u6a21\u5757\u6dfb\u52a0\u4e00\u4e9b\u65ad\u8a00\u548c\u8c03\u8bd5\u6253\u5370\u3002\u65ad\u8a00\u548c\u8c03\u8bd5\u6253\u5370\u6240\u9700\u7684\u903b\u8f91\u9700\u8981\u989d\u5916\u7684\u8ba1\u7b97\u3002\u6240\u6709\u8fd9\u4e9b\u4ee3\u7801\u5e94\u8be5\u53ef\u4ee5\u5728Verilog\u751f\u6210\u65f6\uff08\u800c\u4e0d\u662f\u5728Chisel\u751f\u6210\u65f6\uff09\u9009\u62e9\u6027\u5730\u5305\u542b\u3002\u5de5\u7a0b\u5e08\u53ef\u4ee5\u4f7f\u7528\u4e09\u4e2a\u5c42\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002</p> <p>\u672c\u793a\u4f8b\u4e2d\u4f7f\u7528\u4e86\u4e09\u4e2a\u5c42\uff1a</p> <ol> <li>\u5185\u7f6e\u7684<code>Verification</code>\u5c42</li> <li>\u5185\u7f6e\u7684<code>Assert</code>\u5c42\uff0c\u5d4c\u5957\u5728\u5185\u7f6e\u7684<code>Verification</code>\u5c42\u4e0b</li> <li>\u7528\u6237\u5b9a\u4e49\u7684<code>Debug</code>\u5c42\uff0c\u4e5f\u5d4c\u5957\u5728\u5185\u7f6e\u7684<code>Verification</code>\u5c42\u4e0b</li> </ol> <p><code>Verification</code>\u5c42\u53ef\u7528\u4e8e\u5b58\u50a8<code>Assert</code>\u548c<code>Debug</code>\u5c42\u5171\u7528\u7684\u5e38\u89c1\u903b\u8f91\u3002\u540e\u4e24\u4e2a\u5c42\u5141\u8bb8\u5206\u79bb\u65ad\u8a00\u548c\u6253\u5370\u3002</p> <p>\u5728Scala\u4e2d\u7f16\u5199\u8fd9\u4e2a\u7684\u4e00\u79cd\u65b9\u5f0f\u5982\u4e0b\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:reset:silent\nimport chisel3._\nimport chisel3.layer.{Layer, LayerConfig, block}\nimport chisel3.layers.Verification\n\n// User-defined layers are declared here.  Built-in layers do not need to be declared.\nobject UserDefined {\n  implicit val root: Layer = Verification\n  object Debug extends Layer(LayerConfig.Inline)\n}\n\nclass Foo extends Module {\n  val a = IO(Input(UInt(32.W)))\n  val b = IO(Output(UInt(32.W)))\n\n  b := a +% 1.U\n\n  // This adds a `Verification` layer block inside Foo.\n  block(Verification) {\n\n    // Some common logic added here.  The input port `a` is \"captured\" and\n    // used here.\n    val a_d0 = RegNext(a)\n\n    // This adds an `Assert` layer block.\n    block(Verification.Assert) {\n      chisel3.assert(a &gt;= a_d0, \"a must always increment\")\n    }\n\n    // This adds a `Debug` layer block.\n    block(UserDefined.Debug) {\n      printf(\"a: %x, a_d0: %x\", a, a_d0)\n    }\n\n  }\n\n}\n</code></pre> <p>\u7f16\u8bd1\u540e\uff0c\u8fd9\u5c06\u751f\u6210\u5177\u6709\u4ee5\u4e0b\u6587\u4ef6\u540d\u7684\u4e24\u4e2a\u5c42\u5305\u542b\u6587\u4ef6\u3002\u4e3a\u6bcf\u4e2a\u63d0\u53d6\u5c42\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6\uff1a</p> <ol> <li><code>layers_Foo_Verification.sv</code></li> <li><code>layers_Foo_Verification_Assert.sv</code></li> </ol> <p>\u6b64\u5916\uff0c\u7531\u4e8e\u6211\u4eec\u6dfb\u52a0\u7684\u4e00\u4e2a\u5185\u8054\u5c42\uff0c\u751f\u6210\u7684SystemVerilog\u5c06\u5bf9\u9884\u5904\u7406\u5668\u5b9a\u4e49<code>layer_Foo$Verification$Debug</code>\u654f\u611f\u3002</p> <p>\u7528\u6237\u7136\u540e\u53ef\u4ee5\u5728\u5176\u8bbe\u8ba1\u4e2d\u5305\u542b\u8fd9\u4e9b\u6587\u4ef6\u7684\u4efb\u610f\u7ec4\u5408\uff0c\u4ee5\u5305\u542b\u7531<code>Verification</code>\u6216<code>Verification.Assert</code>\u5c42\u63cf\u8ff0\u7684\u53ef\u9009\u529f\u80fd\uff0c\u5e76\u901a\u8fc7\u8bbe\u7f6e\u9884\u5904\u7406\u5668\u5b8f\u542f\u7528\u8c03\u8bd5\u3002<code>Verification.Assert</code>\u7ed1\u5b9a\u6587\u4ef6\u81ea\u52a8\u4e3a\u7528\u6237\u5305\u542b<code>Verification</code>\u7ed1\u5b9a\u6587\u4ef6\u3002</p>"},{"location":"chisel_explanation/layers/#_13","title":"\u5b9e\u73b0\u8bf4\u660e","text":"<p>:::warning</p> <p>\u672c\u8282\u63cf\u8ff0\u4e86\u5c42\u5982\u4f55\u7f16\u8bd1\u7684\u5b9e\u73b0\u3002\u9664\u4e86\u7ed1\u5b9a\u6587\u4ef6\u540d\u6216\u9884\u5904\u7406\u5668\u5b8f\u4e4b\u5916\u7684\u4efb\u4f55\u5185\u5bb9\u90fd\u4e0d\u5e94\u8be5\u88ab\u4f9d\u8d56\uff01FIRRTL\u7f16\u8bd1\u5668\u53ef\u80fd\u4f1a\u4ee5\u4e0d\u540c\u65b9\u5f0f\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u6216\u8005\u53ef\u80fd\u4f1a\u4ee5\u4efb\u4f55\u5408\u6cd5\u65b9\u5f0f\u4f18\u5316\u5c42\u5757\u3002\u4f8b\u5982\uff0c\u4e0e\u540c\u4e00\u5c42\u5173\u8054\u7684\u5c42\u5757\u53ef\u80fd\u4f1a\u5408\u5e76\uff0c\u5c42\u5757\u53ef\u80fd\u4f1a\u5728\u5c42\u6b21\u7ed3\u6784\u4e2d\u4e0a\u79fb\u6216\u4e0b\u79fb\uff0c\u53ea\u5411\u5c42\u5757\u6247\u51fa\u7684\u4ee3\u7801\u53ef\u80fd\u4f1a\u6c89\u5165\u5176\u4e2d\uff0c\u672a\u4f7f\u7528\u7684\u5c42\u5757\u53ef\u80fd\u4f1a\u88ab\u5220\u9664\u3002</p> <p>\u4ee5\u4e0b\u4fe1\u606f\u4ec5\u4f9b\u7528\u6237\u7406\u89e3\u548c\u5174\u8da3\u3002</p> <p>:::</p> <p>\u5728\u5b9e\u73b0\u4e2d\uff0cFIRRTL\u7f16\u8bd1\u5668\u4e3a\u4e0a\u8ff0\u7535\u8def\u521b\u5efa\u4e09\u4e2aVerilog\u6a21\u5757\uff08\u4e00\u4e2a\u7528\u4e8e<code>Foo</code>\uff0c\u4e00\u4e2a\u7528\u4e8e\u4e0e\u6a21\u5757<code>Foo</code>\u4e2d\u7684\u63d0\u53d6\u5c42\u5173\u8054\u7684\u6bcf\u4e2a\u5c42\u5757\uff09\uff1a</p> <ol> <li><code>Foo</code></li> <li><code>Foo_Verification</code></li> <li><code>Foo_Verification_Assert</code></li> </ol> <p>\u8fd9\u4e9b\u901a\u5e38\u4f1a\u5728\u540d\u79f0\u4e0e\u6a21\u5757\u5339\u914d\u7684\u5355\u72ec\u6587\u4ef6\u4e2d\u521b\u5efa\uff0c\u5373<code>Foo.sv</code>\u3001<code>Foo_Verification.sv</code>\u548c<code>Foo_Verification_Assert.sv</code>\u3002</p> <p>\u4ece\u5c42\u5757\u521b\u5efa\u7684\u6bcf\u4e2a\u6a21\u5757\u7684\u7aef\u53e3\u5c06\u6839\u636e\u8be5\u5c42\u5757\u4ece\u5c42\u5757\u5916\u90e8\u6355\u83b7\u7684\u5185\u5bb9\u81ea\u52a8\u786e\u5b9a\u3002\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c<code>Verification</code>\u5c42\u5757\u6355\u83b7\u4e86\u7aef\u53e3<code>a</code>\u3002<code>Assert</code>\u5c42\u5757\u6355\u83b7\u4e86<code>a</code>\u548c<code>a_d0</code>\u3002</p> <p>:::info</p> <p>\u5373\u4f7f\u6ca1\u6709\u4f7f\u7528<code>Verification.Assume</code>\u6216<code>Verification.Cover</code>\u5c42\u7684\u5c42\u5757\uff0c\u8f93\u51fa\u4e2d\u4e5f\u4f1a\u751f\u6210\u6ca1\u6709\u6548\u679c\u7684\u7ed1\u5b9a\u6587\u4ef6\u3002\u8fd9\u662f\u7531\u4e8eABI\u8981\u6c42\u5728FIRRTL\u4e2d\u5b9a\u4e49\u7684\u5c42\u5fc5\u987b\u751f\u6210\u8fd9\u4e9b\u6587\u4ef6\u3002</p> <p>:::</p>"},{"location":"chisel_explanation/layers/#verilog","title":"Verilog\u8f93\u51fa","text":"<p>\u6b64\u793a\u4f8b\u7684\u5b8c\u6574Verilog\u8f93\u51fa\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\n// Use ChiselStage instead of chisel3.docs.emitSystemVerilog because we want layers printed here (obviously)\nimport circt.stage.ChiselStage\nChiselStage.emitSystemVerilog(new Foo, firtoolOpts=Array(\"-strip-debug-info\", \"-disable-all-randomization\"))\n</code></pre>"},{"location":"chisel_explanation/memories/","title":"\u5185\u5b58","text":"<p>Chisel\u63d0\u4f9b\u4e86\u521b\u5efa\u53ea\u8bfb\u548c\u8bfb\u5199\u5185\u5b58\u7684\u529f\u80fd\u3002</p>"},{"location":"chisel_explanation/memories/#rom","title":"ROM","text":"<p>\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528<code>VecInit</code>\u6784\u9020<code>Vec</code>\u6765\u5b9a\u4e49\u53ea\u8bfb\u5185\u5b58\u3002 <code>VecInit</code>\u53ef\u4ee5\u63a5\u53d7\u53ef\u53d8\u6570\u91cf\u7684<code>Data</code>\u5b57\u9762\u91cf\u53c2\u6570\u6216<code>Seq[Data]</code>\u5b57\u9762\u91cf\u6765\u521d\u59cb\u5316ROM\u3002</p> <p>\u4f8b\u5982\uff0c\u7528\u6237\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u521d\u59cb\u5316\u4e3a1\u30012\u30014\u30018\u7684\u5c0f\u578bROM\uff0c\u5e76\u4f7f\u7528\u8ba1\u6570\u5668\u4f5c\u4e3a\u5730\u5740\u751f\u6210\u5668\u904d\u5386\u6240\u6709\u503c\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:compile-only\nimport chisel3._\nimport chisel3.util.Counter\nval m = VecInit(1.U, 2.U, 4.U, 8.U)\nval c = Counter(m.length)\nc.inc()\nval r = m(c.value)\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2an\u503c\u6b63\u5f26\u67e5\u627e\u8868\u751f\u6210\u5668\uff0c\u4f7f\u7528\u5982\u4e0b\u65b9\u5f0f\u521d\u59cb\u5316ROM\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:compile-only\nimport chisel3._\n\nval Pi = math.Pi\ndef sinTable(amp: Double, n: Int) = {\n  val times =\n    (0 until n).map(i =&gt; (i*2*Pi)/(n.toDouble-1) - Pi)\n  val inits =\n    times.map(t =&gt; Math.round(amp * math.sin(t)).asSInt(32.W))\n  VecInit(inits)\n}\n</code></pre> <p>\u5176\u4e2d<code>amp</code>\u7528\u4e8e\u7f29\u653e\u5b58\u50a8\u5728ROM\u4e2d\u7684\u5b9a\u70b9\u503c\u3002</p>"},{"location":"chisel_explanation/memories/#_2","title":"\u8bfb\u5199\u5185\u5b58","text":"<p>\u7531\u4e8e\u786c\u4ef6\u5185\u5b58\u7684\u5b9e\u73b0\u5dee\u5f02\u5f88\u5927\uff0cChisel\u4e2d\u5bf9\u5185\u5b58\u8fdb\u884c\u4e86\u7279\u6b8a\u5904\u7406\u3002\u4f8b\u5982\uff0cFPGA\u5185\u5b58\u7684\u5b9e\u4f8b\u5316\u65b9\u5f0f\u4e0eASIC\u5185\u5b58\u5b8c\u5168\u4e0d\u540c\u3002Chisel\u5b9a\u4e49\u4e86\u4e00\u79cd\u5185\u5b58\u62bd\u8c61\uff0c\u53ef\u4ee5\u6620\u5c04\u5230\u7b80\u5355\u7684Verilog\u884c\u4e3a\u63cf\u8ff0\uff0c\u6216\u8005\u6620\u5c04\u5230\u53ef\u4ece\u6676\u5706\u5382\u6216IP\u4f9b\u5e94\u5546\u63d0\u4f9b\u7684\u5916\u90e8\u5185\u5b58\u751f\u6210\u5668\u83b7\u5f97\u7684\u5185\u5b58\u6a21\u5757\u5b9e\u4f8b\u3002</p>"},{"location":"chisel_explanation/memories/#syncreadmem","title":"<code>SyncReadMem</code>\uff1a\u987a\u5e8f/\u540c\u6b65\u8bfb\u53d6\uff0c\u987a\u5e8f/\u540c\u6b65\u5199\u5165","text":"<p>Chisel\u6709\u4e00\u4e2a\u79f0\u4e3a<code>SyncReadMem</code>\u7684\u6784\u9020\uff0c\u7528\u4e8e\u987a\u5e8f/\u540c\u6b65\u8bfb\u53d6\u3001\u987a\u5e8f/\u540c\u6b65\u5199\u5165\u7684\u5185\u5b58\u3002\u8fd9\u4e9b<code>SyncReadMem</code>\u53ef\u80fd\u4f1a\u88ab\u5408\u6210\u4e3a\u6280\u672fSRAM\uff08\u800c\u4e0d\u662f\u5bc4\u5b58\u5668\u7ec4\uff09\u3002</p> <p>\u5982\u679c\u5728\u540c\u4e00\u65f6\u949f\u8fb9\u6cbf\u4e0a\u5bf9\u540c\u4e00\u5185\u5b58\u5730\u5740\u8fdb\u884c\u5199\u5165\u548c\u987a\u5e8f\u8bfb\u53d6\uff0c\u6216\u8005\u5982\u679c\u987a\u5e8f\u8bfb\u53d6\u4f7f\u80fd\u88ab\u6e05\u9664\uff0c\u5219\u8bfb\u53d6\u6570\u636e\u662f\u672a\u5b9a\u4e49\u7684\u3002</p> <p>\u8bfb\u6570\u636e\u7aef\u53e3\u4e0a\u7684\u503c\u4e0d\u4fdd\u8bc1\u4fdd\u6301\u5230\u4e0b\u4e00\u4e2a\u8bfb\u53d6\u5468\u671f\u3002\u5982\u679c\u9700\u8981\u8fd9\u79cd\u884c\u4e3a\uff0c\u5fc5\u987b\u6dfb\u52a0\u5916\u90e8\u903b\u8f91\u6765\u4fdd\u6301\u6700\u540e\u8bfb\u53d6\u7684\u503c\u3002</p>"},{"location":"chisel_explanation/memories/#_3","title":"\u8bfb\u7aef\u53e3/\u5199\u7aef\u53e3","text":"<p>\u901a\u8fc7\u5e94\u7528<code>UInt</code>\u7d22\u5f15\u521b\u5efa<code>SyncReadMem</code>\u7684\u7aef\u53e3\u3002\u5177\u6709\u4e00\u4e2a\u5199\u7aef\u53e3\u548c\u4e00\u4e2a\u8bfb\u7aef\u53e3\u76841024\u6761\u76eeSRAM\u53ef\u80fd\u8868\u793a\u5982\u4e0b\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3._\nclass ReadWriteSmem extends Module {\n  val width: Int = 32\n  val io = IO(new Bundle {\n    val enable = Input(Bool())\n    val write = Input(Bool())\n    val addr = Input(UInt(10.W))\n    val dataIn = Input(UInt(width.W))\n    val dataOut = Output(UInt(width.W))\n  })\n\n  val mem = SyncReadMem(1024, UInt(width.W))\n  // Create one write port and one read port\n  mem.write(io.addr, io.dataIn)\n  io.dataOut := mem.read(io.addr, io.enable)\n}\n</code></pre> <p>\u4e0b\u9762\u662f\u5e26\u6709\u63a9\u7801\u7684\u4e00\u4e2a\u5199\u7aef\u53e3/\u4e00\u4e2a\u8bfb\u7aef\u53e3<code>SyncReadMem</code>\u7684\u793a\u4f8b\u6ce2\u5f62\u3002\u8bf7\u6ce8\u610f\uff0c\u4fe1\u53f7\u540d\u79f0\u4e0e\u4e3a<code>SyncReadMem</code>\u751f\u6210\u7684\u786e\u5207\u7ebf\u540d\u79f0\u4e0d\u540c\u3002\u4f7f\u7528\u63a9\u7801\u65f6\uff0c\u4e5f\u53ef\u80fd\u751f\u6210\u5177\u6709\u4ee5\u4e0b\u884c\u4e3a\u7684\u591a\u4e2aRTL\u6570\u7ec4\u3002</p> <p> </p>"},{"location":"chisel_explanation/memories/#_4","title":"\u5355\u7aef\u53e3","text":"<p>\u5f53\u8bfb\u53d6\u548c\u5199\u5165\u6761\u4ef6\u5728\u540c\u4e00\u4e2a<code>when</code>\u94fe\u4e2d\u4e92\u65a5\u65f6\uff0c\u53ef\u4ee5\u63a8\u65ad\u5355\u7aef\u53e3SRAM\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3._\nclass RWSmem extends Module {\n  val width: Int = 32\n  val io = IO(new Bundle {\n    val enable = Input(Bool())\n    val write = Input(Bool())\n    val addr = Input(UInt(10.W))\n    val dataIn = Input(UInt(width.W))\n    val dataOut = Output(UInt(width.W))\n  })\n\n  val mem = SyncReadMem(1024, UInt(width.W))\n  io.dataOut := DontCare\n  when(io.enable) {\n    val rdwrPort = mem(io.addr)\n    when (io.write) { rdwrPort := io.dataIn }\n      .otherwise    { io.dataOut := rdwrPort }\n  }\n}\n</code></pre> <p>\uff08\u8fd9\u91cc\u7684<code>DontCare</code>\u662f\u4e3a\u4e86\u8ba9Chisel\u7684\u672a\u8fde\u63a5\u7ebf\u68c0\u6d4b\u610f\u8bc6\u5230\u5728\u5199\u5165\u65f6\u8bfb\u53d6\u662f\u672a\u5b9a\u4e49\u7684\u3002\uff09</p> <p>\u8fd9\u662f\u4e00\u4e2a\u5e26\u6709\u63a9\u7801\u7684\u5355\u4e00\u8bfb/\u5199\u7aef\u53e3\u6ce2\u5f62\u793a\u4f8b\uff08\u540c\u6837\uff0c\u751f\u6210\u7684\u4fe1\u53f7\u540d\u79f0\u548c\u6570\u7ec4\u6570\u91cf\u53ef\u80fd\u4e0d\u540c\uff09\uff1a</p> <p></p> <p>\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528<code>readWrite</code>\u8c03\u7528\u6765\u663e\u5f0f\u751f\u6210\u5355\u7aef\u53e3SRAM\uff0c\u8be5\u8c03\u7528\u4f1a\u751f\u6210\u5355\u4e2a\u8bfb/\u5199\u8bbf\u95ee\u5668\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass RDWR_Smem extends Module {\n  val width: Int = 32\n  val io = IO(new Bundle {\n    val enable = Input(Bool())\n    val write = Input(Bool())\n    val addr = Input(UInt(10.W))\n    val dataIn = Input(UInt(width.W))\n    val dataOut = Output(UInt(width.W))\n  })\n\n  val mem = SyncReadMem(1024, UInt(width.W))\n  io.dataOut := mem.readWrite(io.addr, io.dataIn, io.enable, io.write)\n}\n</code></pre>"},{"location":"chisel_explanation/memories/#mem","title":"<code>Mem</code>\uff1a\u7ec4\u5408/\u5f02\u6b65\u8bfb\u53d6\uff0c\u987a\u5e8f/\u540c\u6b65\u5199\u5165","text":"<p>Chisel\u901a\u8fc7<code>Mem</code>\u6784\u9020\u652f\u6301\u968f\u673a\u8bbf\u95ee\u5185\u5b58\u3002\u5bf9<code>Mem</code>\u7684\u5199\u5165\u662f\u7ec4\u5408/\u5f02\u6b65\u8bfb\u53d6\uff0c\u987a\u5e8f/\u540c\u6b65\u5199\u5165\u7684\u3002\u8fd9\u4e9b<code>Mem</code>\u53ef\u80fd\u4f1a\u88ab\u5408\u6210\u4e3a\u5bc4\u5b58\u5668\u7ec4\uff0c\u56e0\u4e3a\u73b0\u4ee3\u6280\u672f\uff08FPGA\u3001ASIC\uff09\u4e2d\u7684\u5927\u591a\u6570SRAM\u5df2\u4e0d\u518d\u652f\u6301\u7ec4\u5408\uff08\u5f02\u6b65\uff09\u8bfb\u53d6\u3002</p> <p>\u521b\u5efa\u4e0a\u8ff0\u793a\u4f8b\u7684\u5f02\u6b65\u8bfb\u53d6\u7248\u672c\u53ea\u9700\u5c06<code>SyncReadMem</code>\u66ff\u6362\u4e3a<code>Mem</code>\u5373\u53ef\u3002</p>"},{"location":"chisel_explanation/memories/#_5","title":"\u63a9\u7801","text":"<p>Chisel\u5185\u5b58\u8fd8\u652f\u6301\u7528\u4e8e\u5b50\u5b57\u5199\u5165\u7684\u5199\u63a9\u7801\u3002\u5982\u679c\u5185\u5b58\u7684\u6570\u636e\u7c7b\u578b\u662f\u5411\u91cf\uff0cChisel\u5c06\u63a8\u65ad\u63a9\u7801\u3002\u8981\u63a8\u65ad\u63a9\u7801\uff0c\u8bf7\u6307\u5b9a\u521b\u5efa\u5199\u7aef\u53e3\u7684<code>write</code>\u51fd\u6570\u7684<code>mask</code>\u53c2\u6570\u3002\u5982\u679c\u76f8\u5e94\u7684\u63a9\u7801\u4f4d\u88ab\u8bbe\u7f6e\uff0c\u5219\u5199\u5165\u7ed9\u5b9a\u7684\u63a9\u7801\u957f\u5ea6\u3002\u4f8b\u5982\uff0c\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u5982\u679c\u63a9\u7801\u7684\u7b2c0\u4f4d\u4e3a\u771f\uff0c\u5b83\u5c06\u5728\u76f8\u5e94\u5730\u5740\u5199\u5165\u6570\u636e\u7684\u4f4e\u4f4d\u5b57\u8282\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3._\nclass MaskedReadWriteSmem extends Module {\n  val width: Int = 8\n  val io = IO(new Bundle {\n    val enable = Input(Bool())\n    val write = Input(Bool())\n    val addr = Input(UInt(10.W))\n    val mask = Input(Vec(4, Bool()))\n    val dataIn = Input(Vec(4, UInt(width.W)))\n    val dataOut = Output(Vec(4, UInt(width.W)))\n  })\n\n  // Create a 32-bit wide memory that is byte-masked\n  val mem = SyncReadMem(1024, Vec(4, UInt(width.W)))\n  // Write with mask\n  mem.write(io.addr, io.dataIn, io.mask)\n  io.dataOut := mem.read(io.addr, io.enable)\n}\n</code></pre> <p>\u8fd9\u662f\u4e00\u4e2a\u5e26\u6709\u8bfb\u5199\u7aef\u53e3\u7684\u63a9\u7801\u793a\u4f8b\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3._\nclass MaskedRWSmem extends Module {\n  val width: Int = 32\n  val io = IO(new Bundle {\n    val enable = Input(Bool())\n    val write = Input(Bool())\n    val mask = Input(Vec(2, Bool()))\n    val addr = Input(UInt(10.W))\n    val dataIn = Input(Vec(2, UInt(width.W)))\n    val dataOut = Output(Vec(2, UInt(width.W)))\n  })\n\n  val mem = SyncReadMem(1024, Vec(2, UInt(width.W)))\n  io.dataOut := DontCare\n  when(io.enable) {\n    val rdwrPort = mem(io.addr)\n    when (io.write) {\n      when(io.mask(0)) {\n        rdwrPort(0) := io.dataIn(0)\n      }\n      when(io.mask(1)) {\n        rdwrPort(1) := io.dataIn(1)\n      }\n    }.otherwise { io.dataOut := rdwrPort }\n  }\n}\n</code></pre>"},{"location":"chisel_explanation/memories/#_6","title":"\u5185\u5b58\u521d\u59cb\u5316","text":"<p>Chisel\u5185\u5b58\u53ef\u4ee5\u4ece\u5916\u90e8<code>binary</code>\u6216<code>hex</code>\u6587\u4ef6\u521d\u59cb\u5316\uff0c\u4e3a\u5408\u6210\u6216\u4eff\u771f\u751f\u6210\u9002\u5f53\u7684Verilog\u3002\u6709\u591a\u79cd\u521d\u59cb\u5316\u6a21\u5f0f\u3002</p> <p>\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u67e5\u770b\u52a0\u8f7d\u5185\u5b58\u529f\u80fd\u7684\u5b9e\u9a8c\u6027\u6587\u6863\u3002</p>"},{"location":"chisel_explanation/memories/#sram","title":"SRAM","text":"<p>Chisel\u63d0\u4f9b\u4e86\u4e00\u4e2aAPI\u6765\u751f\u6210<code>SRAM</code>\uff0c\u8fd9\u662f<code>SyncReadMem</code>\u7684\u53e6\u4e00\u79cdAPI\u3002</p> <p><code>SRAM</code>\u548c<code>SyncReadMem</code> API\u4e4b\u95f4\u7684\u5173\u952e\u533a\u522b\u5728\u4e8e\u524d\u8005\u80fd\u591f\u58f0\u660e\u7279\u5b9a\u6570\u91cf\u7684\u8bfb\u3001\u5199\u548c\u8bfb\u5199\u5185\u5b58\u7aef\u53e3\uff0c\u8fd9\u4e9b\u7aef\u53e3\u901a\u8fc7\u663e\u5f0f\u675f\u8fdb\u884c\u4ea4\u4e92\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3.util._\n\nclass ModuleWithSRAM(numReadPorts: Int, numWritePorts: Int, numReadwritePorts: Int) extends Module {\n  val width: Int = 8\n\n  val io = IO(new SRAMInterface(1024, UInt(width.W), numReadPorts, numWritePorts, numReadwritePorts))\n\n  // Generate a SyncReadMem representing an SRAM with an explicit number of read, write, and read-write ports\n  io :&lt;&gt;= SRAM(1024, UInt(width.W), numReadPorts, numWritePorts, numReadwritePorts)\n}\n</code></pre> <p>\u8981\u4e0e\u6240\u9700\u7684\u7aef\u53e3\u4ea4\u4e92\uff0c\u8bf7\u4f7f\u7528<code>readPorts</code>\u3001<code>writePorts</code>\u548c<code>readwritePorts</code>\u5b57\u6bb5\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass TopModule extends Module {\n  // Declare a 2 read, 2 write, 2 read-write ported SRAM with 8-bit UInt data members\n  val mem = SRAM(1024, UInt(8.W), 2, 2, 2)\n\n  // Whenever we want to read from the first read port\n  mem.readPorts(0).address := 100.U\n  mem.readPorts(0).enable := true.B\n\n  // Read data is returned one cycle after enable is driven\n  val foo = WireInit(UInt(8.W), mem.readPorts(0).data)\n\n  // Whenever we want to write to the second write port\n  mem.writePorts(1).address := 5.U\n  mem.writePorts(1).enable := true.B\n  mem.writePorts(1).data := 12.U\n\n  // Whenever we want to read or write to the third read-write port\n  // Write:\n  mem.readwritePorts(2).address := 5.U\n  mem.readwritePorts(2).enable := true.B\n  mem.readwritePorts(2).isWrite := true.B\n  mem.readwritePorts(2).writeData := 100.U\n\n  // Read:\n  mem.readwritePorts(2).address := 5.U\n  mem.readwritePorts(2).enable := true.B\n  mem.readwritePorts(2).isWrite := false.B\n  val bar = WireInit(UInt(8.W), mem.readwritePorts(2).readData)\n}\n</code></pre>"},{"location":"chisel_explanation/moduleprefix/","title":"\u6a21\u5757\u524d\u7f00","text":"<p>Chisel\u652f\u6301\u4e00\u79cd\u79f0\u4e3a\u6a21\u5757\u524d\u7f00\u7684\u529f\u80fd\u3002 \u6a21\u5757\u524d\u7f00\u5141\u8bb8\u60a8\u5728\u8bbe\u8ba1\u7684Verilog\u8f93\u51fa\u4e2d\u521b\u5efa\u547d\u540d\u7a7a\u95f4\u3002 \u5b83\u4eec\u7279\u522b\u9002\u7528\u4e8e\u5f53\u60a8\u60f3\u8981\u547d\u540d\u8bbe\u8ba1\u7684\u7279\u5b9a\u5b50\u7cfb\u7edf\u65f6\uff0c \u5e76\u4e14\u60a8\u5e0c\u671b\u901a\u8fc7\u6587\u4ef6\u540d\u8f7b\u677e\u8bc6\u522b\u6587\u4ef6\u5c5e\u4e8e\u54ea\u4e2a\u5b50\u7cfb\u7edf\u3002</p>"},{"location":"chisel_explanation/moduleprefix/#withmoduleprefix","title":"withModulePrefix","text":"<p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528<code>withModulePrefix</code>\u6253\u5f00\u4e00\u4e2a\u6a21\u5757\u524d\u7f00\u5757\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3._\n\nclass Top extends Module {\n  withModulePrefix(\"Foo\") {\n    // ...\n  }\n}\n</code></pre> <p>\u6b64\u5757\u5185\u5b9a\u4e49\u7684\u6240\u6709\u6a21\u5757\uff0c\u65e0\u8bba\u662f\u76f4\u63a5\u5b50\u6a21\u5757\u8fd8\u662f\u540e\u4ee3\uff0c\u90fd\u5c06\u88ab\u8d4b\u4e88\u524d\u7f00<code>Foo</code>\u3002 \uff08\u524d\u7f00\u7528\u4e0b\u5212\u7ebf<code>_</code>\u5206\u9694\uff09\u3002</p> <p>\u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u7f16\u5199\u4ee5\u4e0b\u5185\u5bb9\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\n\nclass Top extends Module {\n  val sub = withModulePrefix(\"Foo\") {\n    Module(new Sub)\n  }\n}\n\nclass Sub extends Module {\n  // ..\n}\n</code></pre> <p>\u7ed3\u679c\u5c06\u662f\u4e00\u4e2a\u5305\u542b\u4e24\u4e2a\u6a21\u5757\u5b9a\u4e49\u7684\u8bbe\u8ba1\uff1a<code>Top</code>\u548c<code>Foo_Sub</code>\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c<code>val sub =</code>\u90e8\u5206\u5fc5\u987b\u653e\u5728<code>withModulePrefix</code>\u5757\u4e4b\u5916\uff0c \u5426\u5219\u6a21\u5757\u5c06\u65e0\u6cd5\u88ab<code>Top</code>\u6a21\u5757\u7684\u5176\u4f59\u90e8\u5206\u8bbf\u95ee\u3002</p> <p>\u60a8\u53ef\u4ee5\u901a\u8fc7\u5c06\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4f20\u9012\u4e3a<code>false</code>\u6765\u7701\u7565\u524d\u7f00\u5206\u9694\u7b26\uff08<code>_</code>\uff09\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\n\nclass Top extends Module {\n  val sub = withModulePrefix(\"Foo\", false) {\n    Module(new Sub)\n  }\n}\n\nclass Sub extends Module {\n  // ..\n}\n</code></pre> <p>\u8fd9\u5c06\u4ea7\u751f\u4e24\u4e2a\u6a21\u5757\u5b9a\u4e49\uff1a<code>Top</code>\u548c<code>FooSub</code>\u3002</p>"},{"location":"chisel_explanation/moduleprefix/#localmoduleprefix","title":"localModulePrefix","text":"<p>\u6211\u4eec\u8fd8\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199<code>localModulePrefix</code>\u65b9\u6cd5\u6765\u8bbe\u7f6e\u6a21\u5757\u7684\u524d\u7f00\u3002 \u5982\u679c\u60a8\u60f3\u4e3a\u6a21\u5757\u7684\u6240\u6709\u5b9e\u4f8b\u8bbe\u7f6e\u524d\u7f00\uff0c\u8fd9\u5f88\u6709\u7528\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\n\nclass Top extends Module {\n  override def localModulePrefix = Some(\"Foo\")\n  val sub = Module(new Sub)\n}\n\nclass Sub extends Module {\n  // ..\n}\n</code></pre> <p>\u8fd9\u5c06\u4ea7\u751f\u4e24\u4e2a\u6a21\u5757\u5b9a\u4e49\uff1a<code>Foo_Top</code>\u548c<code>Foo_Sub</code>\u3002</p> <p>\u60a8\u8fd8\u53ef\u4ee5\u5c06<code>localModulePrefixAppliesToSelf</code>\u91cd\u5199\u4e3a<code>false</code>\uff0c\u4f7f\u524d\u7f00\u4ec5\u5e94\u7528\u4e8e\u5b50\u6a21\u5757\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\n\nclass Top extends Module {\n  override def localModulePrefix = Some(\"Foo\")\n  override def localModulePrefixAppliesToSelf = false\n  val sub = Module(new Sub)\n}\n\nclass Sub extends Module {\n  // ..\n}\n</code></pre> <p>\u8fd9\u5c06\u4ea7\u751f\u4e24\u4e2a\u6a21\u5757\u5b9a\u4e49\uff1a<code>Top</code>\u548c<code>Foo_Sub</code>\u3002</p> <p>\u60a8\u8fd8\u53ef\u4ee5\u5c06<code>localModulePrefixUseSeparator</code>\u91cd\u5199\u4e3a<code>false</code>\u4ee5\u7701\u7565\u5206\u9694\u7b26\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\n\nclass Top extends Module {\n  override def localModulePrefix = Some(\"Foo\")\n  override def localModulePrefixUseSeparator = false\n  val sub = Module(new Sub)\n}\n\nclass Sub extends Module {\n  // ..\n}\n</code></pre> <p>\u8fd9\u5c06\u4ea7\u751f\u4e24\u4e2a\u6a21\u5757\u5b9a\u4e49\uff1a<code>FooTop</code>\u548c<code>FooSub</code>\u3002</p>"},{"location":"chisel_explanation/moduleprefix/#_2","title":"\u591a\u4e2a\u524d\u7f00","text":"<p>\u5982\u679c\u5728\u591a\u4e2a\u524d\u7f00\u5757\u4e2d\u8fd0\u884c\u751f\u6210\u5668\uff0c\u7ed3\u679c\u662f\u591a\u4e2a\u76f8\u540c\u7684\u6a21\u5757\u5b9a\u4e49\u526f\u672c\uff0c \u6bcf\u4e2a\u90fd\u6709\u81ea\u5df1\u7684\u4e0d\u540c\u524d\u7f00\u3002 \u4f8b\u5982\uff0c\u8003\u8651\u5982\u679c\u6211\u4eec\u50cf\u8fd9\u6837\u521b\u5efa<code>Sub</code>\u7684\u4e24\u4e2a\u5b9e\u4f8b\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\n\nclass Top extends Module {\n  val foo_sub = withModulePrefix(\"Foo\") {\n    Module(new Sub)\n  }\n\n  val bar_sub = withModulePrefix(\"Bar\") {\n    Module(new Sub)\n  }\n}\n\nclass Sub extends Module {\n  // ..\n}\n</code></pre> <p>\u90a3\u4e48\uff0c\u751f\u6210\u7684Verilog\u5c06\u6709\u4e09\u4e2a\u6a21\u5757\u5b9a\u4e49\uff1a<code>Top</code>\u3001<code>Foo_Sub</code>\u548c<code>Bar_Sub</code>\u3002 <code>Foo_Sub</code>\u548c<code>Bar_Sub</code>\u5c06\u5f7c\u6b64\u5b8c\u5168\u76f8\u540c\u3002</p>"},{"location":"chisel_explanation/moduleprefix/#_3","title":"\u5d4c\u5957\u524d\u7f00","text":"<p>\u6a21\u5757\u524d\u7f00\u4e5f\u53ef\u4ee5\u5d4c\u5957\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\n\nclass Top extends Module {\n  val mid = withModulePrefix(\"Foo\") {\n    Module(new Mid)\n  }\n}\n\nclass Mid extends Module {\n  // You can mix withModulePrefix and localModulePrefix.\n  override def localModulePrefix = Some(\"Bar\")\n  override def localModulePrefixAppliesToSelf = false\n  val sub = Module(new Sub)\n}\n\nclass Sub extends Module {\n  // ..\n}\n</code></pre> <p>\u8fd9\u5c06\u4ea7\u751f\u4e09\u4e2a\u6a21\u5757\u5b9a\u4e49\uff1a<code>Top</code>\u3001<code>Foo_Mid</code>\u548c<code>Foo_Bar_Sub</code>\u3002</p>"},{"location":"chisel_explanation/moduleprefix/#instantiate","title":"Instantiate","text":"<p><code>withModulePrefix</code>\u5757\u4e5f\u9002\u7528\u4e8e<code>Instantiate</code> API\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\nimport chisel3.experimental.hierarchy.{instantiable, Instantiate}\n\n@instantiable\nclass Sub extends Module {\n  // ...\n}\n\nclass Top extends Module {\n  val foo_sub = withModulePrefix(\"Foo\") {\n    Instantiate(new Sub)\n  }\n\n  val bar_sub = withModulePrefix(\"Bar\") {\n    Instantiate(new Sub)\n  }\n\n  val noprefix_sub = Instantiate(new Sub)\n}\n</code></pre> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u6700\u7ec8\u5f97\u5230\u56db\u4e2a\u6a21\u5757\uff1a<code>Top</code>\u3001<code>Foo_Sub</code>\u3001<code>Bar_Sub</code>\u548c<code>Sub</code>\u3002</p> <p>\u4f7f\u7528<code>Definition</code>\u548c<code>Instance</code>\u65f6\uff0c\u6240\u6709<code>Definition</code>\u8c03\u7528\u90fd\u5c06\u53d7\u5230<code>withModulePrefix</code>\u7684\u5f71\u54cd\u3002 \u7136\u800c\uff0c<code>Instance</code>\u4e0d\u4f1a\u53d7\u5230\u5f71\u54cd\uff0c\u56e0\u4e3a\u5b83\u603b\u662f\u521b\u5efa\u6355\u83b7\u5b9a\u4e49\u7684\u5b9e\u4f8b\u3002</p>"},{"location":"chisel_explanation/moduleprefix/#_4","title":"\u5916\u90e8\u6a21\u5757","text":"<p><code>BlackBox</code>\u548c<code>ExtModule</code>\u4e0d\u53d7<code>withModulePrefix</code>\u7684\u5f71\u54cd\u3002 \u5982\u679c\u60a8\u5e0c\u671b\u6709\u4e00\u4e2a\u5bf9\u6a21\u5757\u524d\u7f00\u654f\u611f\u7684\u6a21\u5757\uff0c \u60a8\u53ef\u4ee5\u50cf\u8fd9\u6837\u663e\u5f0f\u547d\u540d\u6a21\u5757\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\nimport chisel3.experimental.hierarchy.{instantiable, Instantiate}\nimport chisel3.experimental.ExtModule\n\nclass Sub extends ExtModule {\n  override def desiredName = modulePrefix + \"Sub\"\n}\n</code></pre>"},{"location":"chisel_explanation/modules/","title":"\u6a21\u5757","text":"<p>Chisel\u7684\u6a21\u5757\u5728\u5b9a\u4e49\u751f\u6210\u7535\u8def\u7684\u5c42\u6b21\u7ed3\u6784\u65b9\u9762\u4e0eVerilog\u7684\u6a21\u5757\u975e\u5e38\u76f8\u4f3c\u3002</p> <p>\u5c42\u6b21\u6a21\u5757\u547d\u540d\u7a7a\u95f4\u5728\u4e0b\u6e38\u5de5\u5177\u4e2d\u662f\u53ef\u8bbf\u95ee\u7684\uff0c\u6709\u52a9\u4e8e\u8c03\u8bd5\u548c\u7269\u7406\u5e03\u5c40\u3002\u7528\u6237\u5b9a\u4e49\u7684\u6a21\u5757\u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u7c7b\uff0c\u5b83\uff1a</p> <ul> <li>\u7ee7\u627f\u81ea<code>Module</code>\uff0c</li> <li>\u5305\u542b\u81f3\u5c11\u4e00\u4e2a\u88ab\u5305\u88c5\u5728\u6a21\u5757\u7684<code>IO()</code>\u65b9\u6cd5\u4e2d\u7684\u63a5\u53e3\uff08\u4f20\u7edf\u4e0a\u5b58\u50a8\u5728\u540d\u4e3a<code>io</code>\u7684\u7aef\u53e3\u5b57\u6bb5\u4e2d\uff09\uff0c\u4ee5\u53ca</li> <li>\u5728\u5176\u6784\u9020\u51fd\u6570\u4e2d\u5c06\u5b50\u7535\u8def\u8fde\u63a5\u5728\u4e00\u8d77\u3002</li> </ul> <p>\u4f8b\u5982\uff0c\u8003\u8651\u5c06\u4f60\u81ea\u5df1\u7684\u4e24\u8f93\u5165\u591a\u8def\u590d\u7528\u5668\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u6a21\u5757\uff1a <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3._\nclass Mux2IO extends Bundle {\n  val sel = Input(UInt(1.W))\n  val in0 = Input(UInt(1.W))\n  val in1 = Input(UInt(1.W))\n  val out = Output(UInt(1.W))\n}\n\nclass Mux2 extends Module {\n  val io = IO(new Mux2IO)\n  io.out := (io.sel &amp; io.in1) | (~io.sel &amp; io.in0)\n}\n</code></pre></p> <p>\u5230\u6a21\u5757\u7684\u63a5\u7ebf\u63a5\u53e3\u662f\u4ee5<code>Bundle</code>\u5f62\u5f0f\u7684\u7aef\u53e3\u96c6\u5408\u3002\u6a21\u5757\u7684\u63a5\u53e3\u901a\u8fc7\u540d\u4e3a<code>io</code>\u7684\u5b57\u6bb5\u5b9a\u4e49\u3002\u5bf9\u4e8e<code>Mux2</code>\uff0c<code>io</code>\u88ab\u5b9a\u4e49\u4e3a\u5177\u6709\u56db\u4e2a\u5b57\u6bb5\u7684bundle\uff0c\u6bcf\u4e2a\u591a\u8def\u590d\u7528\u5668\u7aef\u53e3\u4e00\u4e2a\u3002</p> <p><code>:=</code>\u8d4b\u503c\u8fd0\u7b97\u7b26\uff0c\u5728\u8fd9\u91cc\u7528\u4e8e\u5b9a\u4e49\u7684\u4e3b\u4f53\u4e2d\uff0c\u662fChisel\u4e2d\u7684\u4e00\u4e2a\u7279\u6b8a\u8fd0\u7b97\u7b26\uff0c\u5b83\u5c06\u5de6\u4fa7\u7684\u8f93\u5165\u8fde\u63a5\u5230\u53f3\u4fa7\u7684\u8f93\u51fa\u3002</p>"},{"location":"chisel_explanation/modules/#_2","title":"\u6a21\u5757\u5c42\u6b21\u7ed3\u6784","text":"<p>\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u6784\u5efa\u7535\u8def\u5c42\u6b21\u7ed3\u6784\uff0c\u5176\u4e2d\u6211\u4eec\u4f7f\u7528\u8f83\u5c0f\u7684\u5b50\u6a21\u5757\u6784\u5efa\u8f83\u5927\u7684\u6a21\u5757\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5c06\u4e09\u4e2a2\u8f93\u5165\u591a\u8def\u590d\u7528\u5668\u8fde\u63a5\u5728\u4e00\u8d77\uff0c\u4ee5<code>Mux2</code>\u6a21\u5757\u4e3a\u57fa\u7840\u6784\u5efa\u4e00\u4e2a4\u8f93\u5165\u591a\u8def\u590d\u7528\u5668\u6a21\u5757\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass Mux4IO extends Bundle {\n  val in0 = Input(UInt(1.W))\n  val in1 = Input(UInt(1.W))\n  val in2 = Input(UInt(1.W))\n  val in3 = Input(UInt(1.W))\n  val sel = Input(UInt(2.W))\n  val out = Output(UInt(1.W))\n}\nclass Mux4 extends Module {\n  val io = IO(new Mux4IO)\n\n  val m0 = Module(new Mux2)\n  m0.io.sel := io.sel(0)\n  m0.io.in0 := io.in0\n  m0.io.in1 := io.in1\n\n  val m1 = Module(new Mux2)\n  m1.io.sel := io.sel(0)\n  m1.io.in0 := io.in2\n  m1.io.in1 := io.in3\n\n  val m3 = Module(new Mux2)\n  m3.io.sel := io.sel(1)\n  m3.io.in0 := m0.io.out\n  m3.io.in1 := m1.io.out\n\n  io.out := m3.io.out\n}\n</code></pre> <p>\u6211\u4eec\u518d\u6b21\u5c06\u6a21\u5757\u63a5\u53e3\u5b9a\u4e49\u4e3a<code>io</code>\u5e76\u8fde\u63a5\u8f93\u5165\u548c\u8f93\u51fa\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f7f\u7528<code>Module</code>\u6784\u9020\u51fd\u6570\u548cScala<code>new</code>\u5173\u952e\u5b57\u521b\u5efa\u4e09\u4e2a<code>Mux2</code>\u5b50\u6a21\u5757\uff0c\u4ee5\u521b\u5efa\u4e00\u4e2a\u65b0\u5bf9\u8c61\u3002\u7136\u540e\u6211\u4eec\u5c06\u5b83\u4eec\u5f7c\u6b64\u8fde\u63a5\u5e76\u8fde\u63a5\u5230<code>Mux4</code>\u63a5\u53e3\u7684\u7aef\u53e3\u3002</p> <p>\u6ce8\u610f\uff1aChisel\u7684<code>Module</code>\u6709\u4e00\u4e2a\u9690\u5f0f\u65f6\u949f\uff08\u79f0\u4e3a<code>clock</code>\uff09\u548c\u4e00\u4e2a\u9690\u5f0f\u590d\u4f4d\uff08\u79f0\u4e3a<code>reset</code>\uff09\u3002\u8981\u521b\u5efa\u6ca1\u6709\u9690\u5f0f\u65f6\u949f\u548c\u590d\u4f4d\u7684\u6a21\u5757\uff0cChisel\u63d0\u4f9b\u4e86<code>RawModule</code>\u3002</p>"},{"location":"chisel_explanation/modules/#rawmodule","title":"<code>RawModule</code>","text":"<p><code>RawModule</code>\u662f\u4e00\u4e2a\u4e0d\u63d0\u4f9b\u9690\u5f0f\u65f6\u949f\u548c\u590d\u4f4d\u7684\u6a21\u5757\u3002\u5f53Chisel\u6a21\u5757\u4e0e\u671f\u671b\u65f6\u949f\u6216\u590d\u4f4d\u7684\u7279\u5b9a\u547d\u540d\u7ea6\u5b9a\u7684\u8bbe\u8ba1\u63a5\u53e3\u65f6\uff0c\u8fd9\u53ef\u80fd\u5f88\u6709\u7528\u3002</p> <p>\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u7528\u5b83\u4ee3\u66ffModule\u7684\u7528\u6cd5\uff1a <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3.{RawModule, withClockAndReset}\n\nclass Foo extends Module {\n  val io = IO(new Bundle{\n    val a = Input(Bool())\n    val b = Output(Bool())\n  })\n  io.b := !io.a\n}\n\nclass FooWrapper extends RawModule {\n  val a_i  = IO(Input(Bool()))\n  val b_o  = IO(Output(Bool()))\n  val clk  = IO(Input(Clock()))\n  val rstn = IO(Input(Bool()))\n\n  val foo = withClockAndReset(clk, !rstn){ Module(new Foo) }\n\n  foo.io.a := a_i\n  b_o := foo.io.b\n}\n</code></pre></p> <p>\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c<code>RawModule</code>\u7528\u4e8e\u66f4\u6539\u6a21\u5757<code>SlaveSpi</code>\u7684\u590d\u4f4d\u6781\u6027\u3002\u5b9e\u9645\u4e0a\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u590d\u4f4d\u5728Chisel\u6a21\u5757\u4e2d\u662f\u9ad8\u6709\u6548\u7684\uff0c\u7136\u540e\u4f7f\u7528<code>withClockAndReset(clock, !rstn)</code>\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6574\u4e2a\u8bbe\u8ba1\u4e2d\u4f7f\u7528\u4f4e\u6709\u6548\u590d\u4f4d\u3002</p> <p>\u65f6\u949f\u53ea\u662f\u6309\u539f\u6837\u8fde\u63a5\uff0c\u4f46\u5982\u679c\u9700\u8981\uff0c<code>RawModule</code>\u53ef\u4ee5\u4e0e<code>BlackBox</code>\u7ed3\u5408\u4f7f\u7528\uff0c\u4f8b\u5982\u8fde\u63a5\u5dee\u5206\u65f6\u949f\u8f93\u5165\u3002</p>"},{"location":"chisel_explanation/motivation/","title":"\u52a8\u673a -- \"\u4e3a\u4ec0\u4e48\u9009\u62e9 Chisel?\"","text":"<p>\u6211\u4eec\u4e4b\u6240\u4ee5\u5f00\u53d1\u65b0\u7684\u786c\u4ef6\u8bed\u8a00\uff0c\u662f\u56e0\u4e3a\u5728\u7814\u7a76\u9879\u76ee\u548c\u786c\u4ef6\u8bbe\u8ba1\u8bfe\u7a0b\u4e2d\u591a\u5e74\u6765\u4e0e\u73b0\u6709\u786c\u4ef6\u63cf\u8ff0\u8bed\u8a00\u7684\u6597\u4e89\u3002 Verilog \u548c VHDL \u6700\u521d\u662f\u4f5c\u4e3a\u786c\u4ef6 \u4eff\u771f \u8bed\u8a00\u5f00\u53d1\u7684\uff0c\u540e\u6765\u624d\u6210\u4e3a\u786c\u4ef6 \u7efc\u5408 \u7684\u57fa\u7840\u3002 \u8fd9\u4e9b\u8bed\u8a00\u7684\u8bb8\u591a\u8bed\u4e49\u5e76\u4e0d\u9002\u5408\u786c\u4ef6\u7efc\u5408\uff0c\u4e8b\u5b9e\u4e0a\uff0c\u8bb8\u591a\u8bed\u8a00\u7ed3\u6784\u6839\u672c\u5c31\u65e0\u6cd5\u7efc\u5408\u3002 \u5176\u4ed6\u8bed\u8a00\u7ed3\u6784\u5728\u5982\u4f55\u6620\u5c04\u5230\u786c\u4ef6\u5b9e\u73b0\u65b9\u9762\u4e5f\u4e0d\u76f4\u89c2\uff0c\u6216\u8005\u5b83\u4eec\u7684\u4f7f\u7528\u53ef\u80fd\u4f1a\u610f\u5916\u5730\u5bfc\u81f4\u9ad8\u5ea6\u4f4e\u6548\u7684\u786c\u4ef6\u7ed3\u6784\u3002 \u867d\u7136\u4f7f\u7528\u8fd9\u4e9b\u8bed\u8a00\u7684\u4e00\u4e2a\u5b50\u96c6\u4ecd\u7136\u53ef\u4ee5\u83b7\u5f97\u53ef\u63a5\u53d7\u7684\u7ed3\u679c\uff0c\u4f46\u5b83\u4eec\u4ecd\u7136\u5448\u73b0\u51fa\u4e00\u4e2a\u6742\u4e71\u800c\u4ee4\u4eba\u56f0\u60d1\u7684\u89c4\u8303\u6a21\u578b\uff0c\u5c24\u5176\u662f\u5728\u6559\u5b66\u73af\u5883\u4e2d\u3002</p> <p>\u7136\u800c\uff0c\u6211\u4eec\u5f00\u53d1\u65b0\u786c\u4ef6\u8bed\u8a00\u7684\u6700\u5f3a\u52a8\u529b\u662f\u6211\u4eec\u5e0c\u671b\u6539\u53d8\u7535\u5b50\u7cfb\u7edf\u8bbe\u8ba1\u7684\u65b9\u5f0f\u3002 \u6211\u4eec\u8ba4\u4e3a\uff0c\u4e0d\u4ec5\u8981\u6559\u5bfc\u5b66\u751f\u5982\u4f55\u8bbe\u8ba1\u7535\u8def\uff0c\u8fd8\u8981\u6559\u4ed6\u4eec\u5982\u4f55\u8bbe\u8ba1 \u7535\u8def\u751f\u6210\u5668 \u2014\u2014 \u80fd\u591f\u6839\u636e\u9ad8\u5c42\u6b21\u7684\u8bbe\u8ba1\u53c2\u6570\u548c\u7ea6\u675f\u81ea\u52a8\u751f\u6210\u8bbe\u8ba1\u7684\u7a0b\u5e8f\u3002 \u901a\u8fc7\u7535\u8def\u751f\u6210\u5668\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u5229\u7528\u8bbe\u8ba1\u4e13\u5bb6\u7684\u8f9b\u52e4\u5de5\u4f5c\uff0c\u4e3a\u6bcf\u4e2a\u4eba\u63d0\u9ad8\u8bbe\u8ba1\u62bd\u8c61\u7684\u5c42\u6b21\u3002 \u4e3a\u4e86\u8868\u8fbe\u7075\u6d3b\u548c\u53ef\u6269\u5c55\u7684\u7535\u8def\u6784\u5efa\uff0c\u7535\u8def\u751f\u6210\u5668\u5fc5\u987b\u91c7\u7528\u590d\u6742\u7684\u7f16\u7a0b\u6280\u672f\uff0c\u4ee5\u4fbf\u6839\u636e\u9ad8\u5c42\u6b21\u53c2\u6570\u503c\u548c\u7ea6\u675f\u505a\u51fa\u5173\u4e8e\u5982\u4f55\u6700\u4f73\u5b9a\u5236\u5176\u8f93\u51fa\u7535\u8def\u7684\u51b3\u7b56\u3002 \u867d\u7136 Verilog \u548c VHDL \u5305\u542b\u4e00\u4e9b\u7528\u4e8e\u7a0b\u5e8f\u5316\u7535\u8def\u751f\u6210\u7684\u539f\u59cb\u7ed3\u6784\uff0c\u4f46\u5b83\u4eec\u7f3a\u4e4f\u73b0\u4ee3\u7f16\u7a0b\u8bed\u8a00\u4e2d\u5b58\u5728\u7684\u5f3a\u5927\u529f\u80fd\uff0c\u5982\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u3001\u7c7b\u578b\u63a8\u65ad\u3001\u51fd\u6570\u5f0f\u7f16\u7a0b\u652f\u6301\u548c\u53cd\u5c04\u3002</p> <p>\u6211\u4eec\u6ca1\u6709\u4ece\u5934\u5f00\u59cb\u6784\u5efa\u65b0\u7684\u786c\u4ef6\u8bbe\u8ba1\u8bed\u8a00\uff0c\u800c\u662f\u9009\u62e9\u5c06\u786c\u4ef6\u6784\u5efa\u539f\u8bed\u5d4c\u5165\u5230\u73b0\u6709\u8bed\u8a00\u4e2d\u3002 \u6211\u4eec\u9009\u62e9 Scala \u4e0d\u4ec5\u662f\u56e0\u4e3a\u5b83\u5305\u542b\u4e86\u6211\u4eec\u8ba4\u4e3a\u5bf9\u6784\u5efa\u7535\u8def\u751f\u6210\u5668\u5f88\u91cd\u8981\u7684\u7f16\u7a0b\u7279\u6027\uff0c\u8fd8\u56e0\u4e3a\u5b83\u662f\u4e13\u95e8\u5f00\u53d1\u4f5c\u4e3a\u9886\u57df\u7279\u5b9a\u8bed\u8a00\u57fa\u7840\u7684\u8bed\u8a00\u3002</p>"},{"location":"chisel_explanation/multi-clock/","title":"\u591a\u65f6\u949f\u57df","text":"<p>Chisel 3 \u652f\u6301\u591a\u65f6\u949f\u57df\uff0c\u5177\u4f53\u5982\u4e0b\u3002</p> <p>\u6ce8\u610f\uff0c\u4e3a\u4e86\u5b89\u5168\u5730\u8de8\u65f6\u949f\u57df\uff0c\u4f60\u9700\u8981\u9002\u5f53\u7684\u540c\u6b65\u903b\u8f91\uff08\u6bd4\u5982\u5f02\u6b65 FIFO\uff09\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 AsyncQueue \u5e93\u6765\u8f7b\u677e\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\n\nclass MultiClockModule extends Module {\n  val io = IO(new Bundle {\n    val clockB = Input(Clock())\n    val resetB = Input(Bool())\n    val stuff = Input(Bool())\n  })\n\n  // \u8fd9\u4e2a\u5bc4\u5b58\u5668\u4f7f\u7528\u6a21\u5757\u65f6\u949f\n  val regClock = RegNext(io.stuff)\n\n  withClockAndReset (io.clockB, io.resetB) {\n    // \u5728\u8fd9\u4e2a withClock \u4f5c\u7528\u57df\u4e2d\uff0c\u6240\u6709\u540c\u6b65\u5143\u7d20\u90fd\u4f7f\u7528 io.clockB \u65f6\u949f\n    // \u8fd9\u4e2a\u57df\u4e2d\u89e6\u53d1\u5668\u7684\u590d\u4f4d\u4f7f\u7528\u663e\u5f0f\u63d0\u4f9b\u7684 io.resetB\n\n    // \u8fd9\u4e2a\u5bc4\u5b58\u5668\u4f7f\u7528 io.clockB \u65f6\u949f\n    val regClockB = RegNext(io.stuff)\n  }\n\n  // \u8fd9\u4e2a\u5bc4\u5b58\u5668\u4e5f\u4f7f\u7528\u6a21\u5757\u65f6\u949f\n  val regClock2 = RegNext(io.stuff)\n}\n</code></pre> <p>\u4f60\u4e5f\u53ef\u4ee5\u5728\u53e6\u4e00\u4e2a\u65f6\u949f\u57df\u4e2d\u5b9e\u4f8b\u5316\u6a21\u5757\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\n\nclass ChildModule extends Module {\n  val io = IO(new Bundle{\n    val in = Input(Bool())\n  })\n}\nclass MultiClockModule extends Module {\n  val io = IO(new Bundle {\n    val clockB = Input(Clock())\n    val resetB = Input(Bool())\n    val stuff = Input(Bool())\n  })\n  val clockB_child = withClockAndReset(io.clockB, io.resetB) { Module(new ChildModule) }\n  clockB_child.io.in := io.stuff\n}\n</code></pre> <p>\u5982\u679c\u4f60\u53ea\u60f3\u5c06\u4f60\u7684\u65f6\u949f\u8fde\u63a5\u5230\u65b0\u7684\u65f6\u949f\u57df\u5e76\u4f7f\u7528\u5e38\u89c4\u7684\u9690\u5f0f\u590d\u4f4d\u4fe1\u53f7\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 <code>withClock(clock)</code> \u66ff\u4ee3 <code>withClockAndReset</code>\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\n\nclass MultiClockModule extends Module {\n  val io = IO(new Bundle {\n    val clockB = Input(Clock())\n    val stuff = Input(Bool())\n  })\n\n  // \u8fd9\u4e2a\u5bc4\u5b58\u5668\u4f7f\u7528\u6a21\u5757\u65f6\u949f\n  val regClock = RegNext(io.stuff)\n\n  withClock (io.clockB) {\n    // \u5728\u8fd9\u4e2a withClock \u4f5c\u7528\u57df\u4e2d\uff0c\u6240\u6709\u540c\u6b65\u5143\u7d20\u90fd\u4f7f\u7528 io.clockB \u65f6\u949f\n\n    // \u8fd9\u4e2a\u5bc4\u5b58\u5668\u4f7f\u7528 io.clockB \u65f6\u949f\uff0c\u4f46\u4f7f\u7528\u7236\u4e0a\u4e0b\u6587\u4e2d\u7684\u9690\u5f0f\u590d\u4f4d\n    val regClockB = RegNext(io.stuff)\n  }\n\n  // \u8fd9\u4e2a\u5bc4\u5b58\u5668\u4e5f\u4f7f\u7528\u6a21\u5757\u65f6\u949f\n  val regClock2 = RegNext(io.stuff)\n}\n\n// \u5728\u53e6\u4e00\u4e2a\u65f6\u949f\u57df\u4e2d\u4f7f\u7528\u9690\u5f0f\u590d\u4f4d\u5b9e\u4f8b\u5316\u6a21\u5757\nclass MultiClockModule2 extends Module {\n  val io = IO(new Bundle {\n    val clockB = Input(Clock())\n    val stuff = Input(Bool())\n  })\n  val clockB_child = withClock(io.clockB) { Module(new ChildModule) }\n  clockB_child.io.in := io.stuff\n}\n\nclass ChildModule extends Module {\n  val io = IO(new Bundle{\n    val in = Input(Bool())\n  })\n}\n</code></pre>"},{"location":"chisel_explanation/muxes-and-input-selection/","title":"\u591a\u8def\u590d\u7528\u5668\u548c\u8f93\u5165\u9009\u62e9","text":"<p>\u5728\u786c\u4ef6\u63cf\u8ff0\u4e2d\u9009\u62e9\u8f93\u5165\u975e\u5e38\u6709\u7528\uff0c\u56e0\u6b64 Chisel \u63d0\u4f9b\u4e86\u51e0\u4e2a\u5185\u7f6e\u7684\u901a\u7528\u8f93\u5165\u9009\u62e9\u5b9e\u73b0\u3002</p>"},{"location":"chisel_explanation/muxes-and-input-selection/#mux","title":"Mux","text":"<p>\u7b2c\u4e00\u4e2a\u662f <code>Mux</code>\u3002\u8fd9\u662f\u4e00\u4e2a 2 \u8f93\u5165\u9009\u62e9\u5668\u3002\u4e0e\u4e4b\u524d\u4ecb\u7ecd\u7684 <code>Mux2</code> \u793a\u4f8b\u4e0d\u540c\uff0c\u5185\u7f6e\u7684 <code>Mux</code> \u5141\u8bb8\u8f93\u5165\uff08<code>in0</code> \u548c <code>in1</code>\uff09\u662f\u4efb\u4f55\u6570\u636e\u7c7b\u578b\uff0c\u53ea\u8981\u5b83\u4eec\u662f <code>Data</code> \u7684\u76f8\u540c\u5b50\u7c7b\u3002</p> <p>\u901a\u8fc7\u4f7f\u7528\u524d\u4e00\u8282\u4ecb\u7ecd\u7684\u51fd\u6570\u5f0f\u6a21\u5757\u521b\u5efa\u7279\u6027\uff0c\u6211\u4eec\u53ef\u4ee5\u4ee5\u7b80\u5355\u7684\u65b9\u5f0f\u521b\u5efa\u591a\u8f93\u5165\u9009\u62e9\u5668\uff1a</p> <pre><code>Mux(c1, a, Mux(c2, b, Mux(..., default)))\n</code></pre>"},{"location":"chisel_explanation/muxes-and-input-selection/#muxcase","title":"MuxCase","text":"<p>\u5d4c\u5957\u7684 <code>Mux</code> \u5e76\u975e\u5fc5\u8981\uff0c\u56e0\u4e3a Chisel \u8fd8\u63d0\u4f9b\u4e86\u5185\u7f6e\u7684 <code>MuxCase</code>\uff0c\u5b83\u5b9e\u73b0\u4e86\u5b8c\u5168\u76f8\u540c\u7684\u529f\u80fd\u3002 <code>MuxCase</code> \u662f\u4e00\u4e2a n \u8def <code>Mux</code>\uff0c\u53ef\u4ee5\u5982\u4e0b\u4f7f\u7528\uff1a</p> <pre><code>MuxCase(default, Array(c1 -&gt; a, c2 -&gt; b, ...))\n</code></pre> <p>\u5176\u4e2d\u6bcf\u4e2a\u9009\u62e9\u4f9d\u8d56\u9879\u5728 Scala \u6570\u7ec4\u4e2d\u8868\u793a\u4e3a\u4e00\u4e2a\u5143\u7ec4 [ \u6761\u4ef6 -&gt; \u9009\u62e9\u7684\u8f93\u5165\u7aef\u53e3 ]\u3002</p>"},{"location":"chisel_explanation/muxes-and-input-selection/#muxlookup","title":"MuxLookup","text":"<p>Chisel \u8fd8\u63d0\u4f9b\u4e86 <code>MuxLookup</code>\uff0c\u8fd9\u662f\u4e00\u4e2a n \u8def\u7d22\u5f15\u591a\u8def\u590d\u7528\u5668\uff1a</p> <pre><code>MuxLookup(idx, default)(Seq(0.U -&gt; a, 1.U -&gt; b, ...))\n</code></pre> <p>\u8fd9\u4e0e <code>MuxCase</code> \u76f8\u540c\uff0c\u5176\u4e2d\u6761\u4ef6\u90fd\u662f\u57fa\u4e8e\u7d22\u5f15\u7684\u9009\u62e9\uff1a</p> <pre><code>MuxCase(default,\n        Array((idx === 0.U) -&gt; a,\n              (idx === 1.U) -&gt; b, ...))\n</code></pre> <p>\u6ce8\u610f\uff0c\u6761\u4ef6/\u60c5\u51b5/\u9009\u62e9\u5668\uff08\u4f8b\u5982 c1, c2\uff09\u5fc5\u987b\u653e\u5728\u62ec\u53f7\u4e2d\u3002</p>"},{"location":"chisel_explanation/muxes-and-input-selection/#mux1h","title":"Mux1H","text":"<p>\u53e6\u4e00\u4e2a <code>Mux</code> \u5de5\u5177\u662f\u5355\u70ed\u7801\u591a\u8def\u590d\u7528\u5668 <code>Mux1H</code>\u3002\u5b83\u63a5\u53d7\u4e00\u4e2a\u9009\u62e9\u5668\u5e8f\u5217\u548c\u503c\u5e8f\u5217\uff0c\u5e76\u8fd4\u56de\u4e0e\u8bbe\u7f6e\u7684\u90a3\u4e2a\u9009\u62e9\u5668\u76f8\u5173\u8054\u7684\u503c\u3002\u5982\u679c\u6709\u96f6\u4e2a\u6216\u591a\u4e2a\u9009\u62e9\u5668\u88ab\u8bbe\u7f6e\uff0c\u5219\u884c\u4e3a\u672a\u5b9a\u4e49\u3002\u4f8b\u5982\uff1a</p> <p><pre><code>  val hotValue = chisel3.util.Mux1H(Seq(\n    io.selector(0) -&gt; 2.U,\n    io.selector(1) -&gt; 4.U,\n    io.selector(2) -&gt; 8.U,\n    io.selector(4) -&gt; 11.U,\n  ))\n</code></pre> <code>Mux1H</code> \u5728\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\u4f1a\u751f\u6210\u5bb9\u6613\u4f18\u5316\u4e3a\u4f4e\u6df1\u5ea6\u548c/\u6216\u6811\u5f62\u7ed3\u6784\u7684 Firrtl \u4ee3\u7801\u3002</p>"},{"location":"chisel_explanation/naming/","title":"\u547d\u540d","text":"<p>\u4ece\u5386\u53f2\u4e0a\u770b\uff0cChisel \u5728\u53ef\u9760\u5730\u6355\u83b7\u4fe1\u53f7\u540d\u79f0\u65b9\u9762\u4e00\u76f4\u5b58\u5728\u95ee\u9898\u3002\u8fd9\u4e3b\u8981\u662f\u7531\u4e8e\u4e24\u4e2a\u539f\u56e0\uff1a (1) \u4e3b\u8981\u4f9d\u8d56\u53cd\u5c04\u6765\u67e5\u627e\u540d\u79f0 (2) \u4f7f\u7528 <code>@chiselName</code> \u5b8f\uff0c\u4f46\u5176\u884c\u4e3a\u4e0d\u53ef\u9760</p> <p>Chisel 3.4 \u5f15\u5165\u4e86\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684 Scala \u7f16\u8bd1\u5668\u63d2\u4ef6\uff0c\u4f7f\u5f97\u5728\u58f0\u660e\u4fe1\u53f7\u65f6\u80fd\u591f\u53ef\u9760\u4e14\u81ea\u52a8\u5730\u6355\u83b7\u4fe1\u53f7\u540d\u79f0\u3002\u6b64\u5916\uff0c\u8fd9\u4e2a\u7248\u672c\u8fd8\u5927\u91cf\u4f7f\u7528\u4e86\u65b0\u7684\u524d\u7f00 API\uff0c\u4f7f\u5f97\u4ece\u51fd\u6570\u8c03\u7528\u4e2d\u4ee5\u7f16\u7a0b\u65b9\u5f0f\u751f\u6210\u7684\u4fe1\u53f7\u540d\u79f0\u66f4\u52a0\u7a33\u5b9a\u3002</p> <p>\u672c\u6587\u6863\u89e3\u91ca\u4e86 Chisel \u4e2d\u4fe1\u53f7\u548c\u6a21\u5757\u540d\u79f0\u7684\u547d\u540d\u673a\u5236\u3002\u5173\u4e8e\u5982\u4f55\u4fee\u590d\u7cfb\u7edf\u6027\u547d\u540d\u7a33\u5b9a\u6027\u95ee\u9898\u7684\u5b9e\u4f8b\uff0c\u8bf7\u53c2\u8003\u547d\u540d cookbook\u3002</p>"},{"location":"chisel_explanation/naming/#_2","title":"\u7f16\u8bd1\u5668\u63d2\u4ef6","text":"<pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\n// Imports used by the following examples\nimport chisel3._\nimport chisel3.experimental.{prefix, noPrefix}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\nimport chisel3.docs.emitSystemVerilog\n</code></pre> <p>Chisel \u7528\u6237\u8fd8\u5fc5\u987b\u5728\u6784\u5efa\u8bbe\u7f6e\u4e2d\u5305\u542b\u7f16\u8bd1\u5668\u63d2\u4ef6\u3002 \u5728 SBT \u4e2d\uff0c\u914d\u7f6e\u7c7b\u4f3c\u8fd9\u6837\uff1a</p> <pre><code>// \u5bf9\u4e8e Chisel 5.0.0+ \u7248\u672c\naddCompilerPlugin(\"org.chipsalliance\" % \"chisel-plugin\" % \"5.0.0\" cross CrossVersion.full)\n// \u5bf9\u4e8e\u8f83\u65e9\u7684 Chisel3 \u7248\u672c\uff0c\u4f8b\u5982 3.6.0\naddCompilerPlugin(\"edu.berkeley.cs\" % \"chisel3-plugin\" % \"3.6.0\" cross CrossVersion.full)\n</code></pre> <p>\u8fd9\u4e2a\u63d2\u4ef6\u4f1a\u5728 Scala \u7f16\u8bd1\u5668\u7684 'typer' \u9636\u6bb5\u4e4b\u540e\u8fd0\u884c\u3002\u5b83\u4f1a\u5bfb\u627e\u5f62\u5982 <code>val x = y</code> \u7684\u7528\u6237\u4ee3\u7801\uff0c\u5176\u4e2d <code>x</code> \u7684\u7c7b\u578b\u662f <code>chisel3.Data</code>\u3001<code>chisel3.MemBase</code> \u6216 <code>chisel3.experimental.BaseModule</code>\u3002\u5bf9\u4e8e\u6bcf\u4e00\u884c\u7b26\u5408\u8fd9\u4e9b\u6761\u4ef6\u7684\u4ee3\u7801\uff0c\u5b83\u90fd\u4f1a\u91cd\u5199\u8be5\u884c\u3002\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6ce8\u91ca\u884c\u5c55\u793a\u4e86\u4e0a\u9762\u90a3\u884c\u4ee3\u7801\u88ab\u91cd\u5199\u540e\u7684\u5f62\u5f0f\u3002</p> <p>\u5982\u679c\u8fd9\u884c\u4ee3\u7801\u5728 bundle \u58f0\u660e\u4e2d\u6216\u662f\u6a21\u5757\u5b9e\u4f8b\u5316\uff0c\u5b83\u4f1a\u88ab\u91cd\u5199\u4e3a\u4f7f\u7528 <code>withName</code> \u7684\u8c03\u7528\uff0c\u8be5\u8c03\u7528\u4f1a\u4e3a\u4fe1\u53f7/\u6a21\u5757\u547d\u540d\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nclass MyBundle extends Bundle {\n  val foo = Input(UInt(3.W))\n  // val foo = withName(\"foo\")(Input(UInt(3.W)))\n}\nclass Example1 extends Module {\n  val io = IO(new MyBundle())\n  // val io = withName(\"io\")(IO(new MyBundle()))\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nemitSystemVerilog(new Example1)\n</code></pre> <p>\u5426\u5219\uff0c\u5b83\u8fd8\u4f1a\u88ab\u91cd\u5199\u4e3a\u5305\u542b\u540d\u79f0\u4f5c\u4e3a\u524d\u7f00\uff0c\u8fd9\u4e2a\u524d\u7f00\u4f1a\u5e94\u7528\u5230\u5728 val \u58f0\u660e\u7684\u53f3\u4fa7\u6267\u884c\u8fc7\u7a0b\u4e2d\u751f\u6210\u7684\u6240\u6709\u4fe1\u53f7\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nclass Example2 extends Module {\n  val in = IO(Input(UInt(2.W)))\n  // val in = withName(\"in\")(prefix(\"in\")(IO(Input(UInt(2.W)))))\n\n  val out1 = IO(Output(UInt(4.W)))\n  // val out1 = withName(\"out1\")(prefix(\"out1\")(IO(Output(UInt(4.W)))))\n  val out2 = IO(Output(UInt(4.W)))\n  // val out2 = withName(\"out2\")(prefix(\"out2\")(IO(Output(UInt(4.W)))))\n  val out3 = IO(Output(UInt(4.W)))\n  // val out3 = withName(\"out3\")(prefix(\"out3\")(IO(Output(UInt(4.W)))))\n\n  def func() = {\n    val squared = in * in\n    // val squared = withName(\"squared\")(prefix(\"squared\")(in * in))\n    out1 := squared\n    val delay = RegNext(squared)\n    // val delay = withName(\"delay\")(prefix(\"delay\")(RegNext(squared)))\n    delay\n  }\n\n  val masked = 0xa.U &amp; func()\n  // val masked = withName(\"masked\")(prefix(\"masked\")(0xa.U &amp; func()))\n  // \u6ce8\u610f\uff1a\u5728 `func()` \u5185\u90e8\u521b\u5efa\u7684\u503c\u4f1a\u5e26\u6709 `masked` \u524d\u7f00\n\n  out2 := masked + 1.U\n  out3 := masked - 1.U\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nemitSystemVerilog(new Example2)\n</code></pre> <p>\u524d\u7f00\u4e5f\u53ef\u4ee5\u4ece\u8fde\u63a5\u5de6\u4fa7\u4fe1\u53f7\u7684\u540d\u79f0\u63a8\u5bfc\u51fa\u6765\u3002 \u867d\u7136\u8fd9\u4e0d\u662f\u901a\u8fc7\u7f16\u8bd1\u5668\u63d2\u4ef6\u5b9e\u73b0\u7684\uff0c\u4f46\u884c\u4e3a\u5e94\u8be5\u611f\u89c9\u7c7b\u4f3c\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nclass ConnectPrefixing extends Module {\n  val in = IO(Input(UInt(2.W)))\n  // val in = withName(\"in\")(prefix(\"in\")(IO(Input(UInt(2.W)))))\n\n  val out1 = IO(Output(UInt(4.W)))\n  // val out1 = withName(\"out1\")(prefix(\"out1\")(IO(Output(UInt(4.W)))))\n  val out2 = IO(Output(UInt(4.W)))\n  // val out2 = withName(\"out2\")(prefix(\"out2\")(IO(Output(UInt(4.W)))))\n\n  out1 := { // \u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u8fd9\u91cc\u6ca1\u6709\u88ab withName \u548c prefix \u5305\u88c5\n    // \u4f46 Chisel \u8fd0\u884c\u65f6\u4ecd\u4f1a\u4f7f\u7528 `out1` \u7684\u540d\u79f0\u4f5c\u4e3a\u524d\u7f00\n    val squared = in * in\n    out2 := squared\n    val delayed = RegNext(squared)\n    // val delayed = withName(\"delayed\")(prefix(\"delayed\")(RegNext(squared)))\n    delayed + 1.U\n  }\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nemitSystemVerilog(new ConnectPrefixing)\n</code></pre> <p>\u6ce8\u610f\uff0c\u5f53\u786c\u4ef6\u7c7b\u578b\u5d4c\u5957\u5728 <code>Option</code> \u6216 <code>Iterable</code> \u7684\u5b50\u7c7b\u578b\u4e2d\u65f6\uff0c\u547d\u540d\u673a\u5236\u4e5f\u540c\u6837\u6709\u6548\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nclass Example3 extends Module {\n  val in = IO(Input(UInt(2.W)))\n  // val in = withName(\"in\")(prefix(\"in\")(IO(Input(UInt(2.W)))))\n\n  val out = IO(Output(UInt(4.W)))\n  // val out = withName(\"out\")(prefix(\"out\")(IO(Output(UInt(4.W)))))\n\n  def func() = {\n    val delay = RegNext(in)\n    delay + 1.U\n  }\n\n  val opt = Some(func())\n  // \u6ce8\u610f\uff1afunc() \u4e2d\u7684\u5bc4\u5b58\u5668\u4f1a\u5e26\u6709 `opt` \u524d\u7f00\uff1a\n  // val opt = withName(\"opt\")(prefix(\"opt\")(Some(func()))\n\n  out := opt.get + 1.U\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nemitSystemVerilog(new Example3)\n</code></pre> <p>\u8fd8\u6709\u4e00\u4e2a\u91cd\u8f7d\u7684\u53d8\u4f53\u53ef\u4ee5\u901a\u8fc7 unapply \u63d0\u4f9b\u7684\u540d\u79f0\u4e3a\u786c\u4ef6\u547d\u540d\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nclass UnapplyExample extends Module {\n  val foo = IO(Input(UInt(2.W)))\n  def mkIO() = (IO(Input(UInt(2.W))), foo, IO(Output(UInt(2.W))))\n  val (in, _, out) = mkIO()\n  // val (in, _, out) = withName(\"in\", \"\", \"out\")(mkIO())\n\n  out := in &amp; foo\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nemitSystemVerilog(new UnapplyExample)\n</code></pre> <p>\u6ce8\u610f\uff0c\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u7f16\u8bd1\u5668\u63d2\u4ef6\u4e0d\u4f1a\u63d2\u5165\u524d\u7f00\uff0c\u56e0\u4e3a\u4e0d\u6e05\u695a\u524d\u7f00\u5e94\u8be5\u662f\u4ec0\u4e48\u3002 \u5e0c\u671b\u83b7\u5f97\u524d\u7f00\u7684\u7528\u6237\u53ef\u4ee5\u6309\u7167\u4e0b\u9762\u7684 described below \u63d0\u4f9b\u524d\u7f00\u3002</p>"},{"location":"chisel_explanation/naming/#prefixing","title":"Prefixing","text":"<p>\u5982\u4e0a\u6240\u8ff0\uff0c\u7f16\u8bd1\u5668\u63d2\u4ef6\u4f1a\u81ea\u52a8\u5c1d\u8bd5\u4e3a\u60a8\u6dfb\u52a0\u4e00\u4e9b\u4fe1\u53f7\u7684\u524d\u7f00\u3002 \u4f46\u662f\uff0c\u60a8\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 <code>prefix(...)</code> \u6dfb\u52a0\u81ea\u5df1\u7684\u524d\u7f00\uff1a</p> <p>\u8fd8\u8981\u6ce8\u610f\uff0c\u524d\u7f00\u662f\u76f8\u4e92\u9644\u52a0\u7684\uff08\u5305\u62ec\u7f16\u8bd1\u5668\u63d2\u4ef6\u751f\u6210\u7684\u524d\u7f00\uff09\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nclass Example6 extends Module {\n  val in = IO(Input(UInt(2.W)))\n  val out = IO(Output(UInt(4.W)))\n\n  val add = prefix(\"foo\") {\n    val sum = RegNext(in + 1.U)\n    sum + 1.U\n  }\n\n  out := add\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nemitSystemVerilog(new Example6)\n</code></pre> <p>\u6709\u65f6\u60a8\u53ef\u80fd\u5e0c\u671b\u7981\u7528\u524d\u7f00\u3002\u8fd9\u53ef\u80fd\u53d1\u751f\u5728\u60a8\u7f16\u5199\u5e93\u51fd\u6570\u5e76\u4e14\u4e0d\u5e0c\u671b\u51fa\u73b0\u524d\u7f00\u884c\u4e3a\u7684\u60c5\u51b5\u4e0b\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u4ee5\u8c03\u7528 <code>noPrefix</code>\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nclass Example7 extends Module {\n  val in = IO(Input(UInt(2.W)))\n  val out = IO(Output(UInt(4.W)))\n\n  val add = noPrefix {\n    val sum = RegNext(in + 1.U)\n    sum + 1.U\n  }\n\n  out := add\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nemitSystemVerilog(new Example7)\n</code></pre>"},{"location":"chisel_explanation/naming/#suggest-a-signals-name-or-the-instance-name-of-a-module","title":"Suggest a Signal's Name (or the instance name of a Module)","text":"<p>\u5982\u679c\u60a8\u60f3\u6307\u5b9a\u4fe1\u53f7\u7684\u540d\u79f0\uff0c\u53ef\u4ee5\u59cb\u7ec8\u4f7f\u7528 <code>.suggestName</code> API\u3002\u8bf7\u6ce8\u610f\uff0c\u5efa\u8bae\u7684\u540d\u79f0\u4ecd\u7136\u4f1a\u88ab\u524d\u7f00\uff08\u5305\u62ec\u63d2\u4ef6\u751f\u6210\u7684\u524d\u7f00\uff09\u3002\u60a8\u53ef\u4ee5\u59cb\u7ec8\u4f7f\u7528 <code>noPrefix</code> \u5bf9\u8c61\u6765\u53bb\u9664\u524d\u7f00\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nclass Example8 extends Module {\n  val in = IO(Input(UInt(2.W)))\n  val out = IO(Output(UInt(4.W)))\n\n  val add = {\n    val sum = RegNext(in + 1.U).suggestName(\"foo\")\n    sum + 1.U\n  }\n\n  out := add\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nemitSystemVerilog(new Example8)\n</code></pre> <p>\u6ce8\u610f\uff0c\u4f7f\u7528 <code>.suggestName</code> \u5e76\u4e0d\u4f1a\u5f71\u54cd\u6e90\u81ea val \u540d\u79f0\u7684\u524d\u7f00\uff1b \u4f46\u662f\uff0c\u5b83 \u53ef\u4ee5 \u5f71\u54cd\u6e90\u81ea\u8fde\u63a5\uff08\u4f8b\u5982 <code>:=</code>\uff09\u7684\u524d\u7f00\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nclass ConnectionPrefixExample extends Module {\n  val in0 = IO(Input(UInt(2.W)))\n  val in1 = IO(Input(UInt(2.W)))\n\n  val out0 = {\n    val port = IO(Output(UInt(5.W)))\n    // \u5373\u4f7f\u8fd9\u4e2a suggestName \u5728 mul \u4e4b\u524d\uff0c\u4f5c\u7528\u4e8e port\n    // \u4f46\u6b64\u4f5c\u7528\u57df\u4e2d\u4f7f\u7528\u7684\u524d\u7f00\u662f\u6e90\u81ea `val out0`\uff0c\u6240\u4ee5\u8fd9\u5e76\u4e0d\u5f71\u54cd mul \u7684\u540d\u79f0\n    port.suggestName(\"foo\")\n    // out0_mul\n    val mul = RegNext(in0 * in1)\n    port := mul + 1.U\n    port\n  }\n\n  val out1 = IO(Output(UInt(4.W)))\n  val out2 = IO(Output(UInt(4.W)))\n\n  out1 := {\n    // out1_sum\n    val sum = RegNext(in0 + in1)\n    sum + 1.U\n  }\n  // \u5728\u4e0a\u9762\uff0c\u6240\u4ee5\u5e76\u4e0d\u5f71\u54cd\u4e0b\u9762\u7684\u524d\u7f00\n  out1.suggestName(\"bar\")\n\n  // \u5728\u524d\u9762\uff0c\u6240\u4ee5\u4f1a\u5f71\u54cd\u4e0b\u9762\u7684\u524d\u7f00\n  out2.suggestName(\"fizz\")\n  out2 := {\n    // fizz_diff\n    val diff = RegNext(in0 - in1)\n    diff + 1.U\n  }\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nemitSystemVerilog(new ConnectionPrefixExample)\n</code></pre> <p>\u6b63\u5982\u8fd9\u4e2a\u4f8b\u5b50\u6240\u793a\uff0c\u8fd9\u79cd\u884c\u4e3a\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u662f\u4e0d\u4e00\u81f4\u7684\uff0c\u56e0\u6b64\u5728\u672a\u6765\u7684 Chisel \u7248\u672c\u4e2d\u53ef\u80fd\u4f1a\u6709\u6240\u53d8\u5316\u3002</p>"},{"location":"chisel_explanation/naming/#behavior-for-unnamed-signals-aka-temporaries","title":"Behavior for \"Unnamed signals\" (aka \"Temporaries\")","text":"<p>\u5982\u679c\u60a8\u60f3\u8868\u793a\u4fe1\u53f7\u7684\u540d\u79f0\u65e0\u5173\u7d27\u8981\uff0c\u53ef\u4ee5\u5728 val \u7684\u540d\u79f0\u524d\u52a0\u4e0a <code>_</code> \u524d\u7f00\u3002 Chisel \u4f1a\u5728\u524d\u7f00\u4e2d\u4fdd\u7559\u4ee5 <code>_</code> \u5f00\u5934\u7684\u7ea6\u5b9a\uff0c\u4ee5\u8868\u793a\u901a\u8fc7\u524d\u7f00\u751f\u6210\u7684\u4fe1\u53f7\u662f\u533f\u540d\u4fe1\u53f7\u3002 \u4f8b\u5982\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nclass TemporaryExample extends Module {\n  val in0 = IO(Input(UInt(2.W)))\n  val in1 = IO(Input(UInt(2.W)))\n\n  val out = {\n    // \u6211\u4eec\u9700\u8981 2 \u4e2a\u7aef\u53e3\uff0c\u4ee5\u4fbf firtool \u7ef4\u62a4\u516c\u5171\u5b50\u8868\u8fbe\u5f0f\n    val port0 = IO(Output(UInt(4.W)))\n    // out_port1\n    val port1 = IO(Output(UInt(4.W)))\n    val _sum = in0 + in1\n    port0 := _sum + 1.U\n    port1 := _sum - 1.U\n    // port0 \u88ab\u8fd4\u56de\uff0c\u6240\u4ee5\u4f1a\u5f97\u5230\u540d\u79f0 \"out\"\n    port0\n  }\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nemitSystemVerilog(new TemporaryExample)\n</code></pre> <p>\u5982\u679c\u4e00\u4e2a\u533f\u540d\u4fe1\u53f7\u672c\u8eab\u88ab\u7528\u6765\u751f\u6210\u524d\u7f00\uff0c\u524d\u5bfc\u7684 <code>_</code> \u5c06\u88ab\u5ffd\u7565\uff0c\u4ee5\u907f\u514d\u5728\u8fdb\u4e00\u6b65\u5d4c\u5957\u4fe1\u53f7\u7684\u540d\u79f0\u4e2d\u51fa\u73b0\u53cc\u4e0b\u5212\u7ebf <code>__</code>\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nclass TemporaryPrefixExample extends Module {\n  val in0 = IO(Input(UInt(2.W)))\n  val in1 = IO(Input(UInt(2.W)))\n  val out0 = IO(Output(UInt(3.W)))\n  val out1 = IO(Output(UInt(4.W)))\n\n  val _sum = {\n    val x = in0 + in1\n    out0 := x\n    x + 1.U\n  }\n  out1 := _sum &amp; 0x2.U\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nemitSystemVerilog(new TemporaryPrefixExample)\n</code></pre>"},{"location":"chisel_explanation/naming/#set-a-module-name","title":"Set a Module Name","text":"<p>\u5982\u679c\u60a8\u60f3\u6307\u5b9a\u6a21\u5757\u7684\u540d\u79f0\uff08\u800c\u4e0d\u662f\u6a21\u5757\u5b9e\u4f8b\u7684\u540d\u79f0\uff09\uff0c\u53ef\u4ee5\u59cb\u7ec8\u8986\u76d6 <code>desiredName</code> \u503c\u3002\u8bf7\u6ce8\u610f\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u6a21\u5757\u7684\u53c2\u6570\u5bf9\u540d\u79f0\u8fdb\u884c\u53c2\u6570\u5316\u3002\u8fd9\u662f\u4f7f\u60a8\u7684\u6a21\u5757\u540d\u79f0\u66f4\u7a33\u5b9a\u7684\u597d\u65b9\u6cd5\uff0c\u5f3a\u70c8\u5efa\u8bae\u60a8\u8fd9\u6837\u505a\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nclass Example9(width: Int) extends Module {\n  override val desiredName = s\"EXAMPLE9WITHWIDTH$width\"\n  val in = IO(Input(UInt(width.W)))\n  val out = IO(Output(UInt((width + 2).W)))\n\n  val add = (in + (in + in).suggestName(\"foo\"))\n\n  out := add\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\nemitSystemVerilog(new Example9(8))\nemitSystemVerilog(new Example9(1))\n</code></pre>"},{"location":"chisel_explanation/operators/","title":"Chisel \u64cd\u4f5c\u7b26","text":"<p>Chisel \u5b9a\u4e49\u4e86\u4e00\u7ec4\u786c\u4ef6\u64cd\u4f5c\u7b26\uff1a</p> \u64cd\u4f5c \u8bf4\u660e \u4f4d\u64cd\u4f5c\u7b26 \u9002\u7528\u4e8e: SInt, UInt, Bool <code>val invertedX = ~x</code> \u6309\u4f4d\u53d6\u53cd <code>val hiBits = x &amp; \"h_ffff_0000\".U</code> \u6309\u4f4d\u4e0e <code>val flagsOut = flagsIn \\| overflow</code> \u6309\u4f4d\u6216 <code>val flagsOut = flagsIn ^ toggle</code> \u6309\u4f4d\u5f02\u6216 \u4f4d\u5f52\u7ea6\u64cd\u4f5c\u7b26 \u9002\u7528\u4e8e: SInt \u548c UInt\u3002\u8fd4\u56de Bool\u3002 <code>val allSet = x.andR</code> \u4e0e\u5f52\u7ea6 <code>val anySet = x.orR</code> \u6216\u5f52\u7ea6 <code>val parity = x.xorR</code> \u5f02\u6216\u5f52\u7ea6 \u76f8\u7b49\u6bd4\u8f83 \u9002\u7528\u4e8e: SInt\u3001UInt \u548c Bool\u3002\u8fd4\u56de Bool\u3002 <code>val equ = x === y</code> \u76f8\u7b49 <code>val neq = x =/= y</code> \u4e0d\u76f8\u7b49 \u79fb\u4f4d \u9002\u7528\u4e8e: SInt \u548c UInt <code>val twoToTheX = 1.S &lt;&lt; x</code> \u903b\u8f91\u5de6\u79fb <code>val hiBits = x &gt;&gt; 16.U</code> \u53f3\u79fb(UInt \u4e3a\u903b\u8f91\u53f3\u79fb\uff0cSInt \u4e3a\u7b97\u672f\u53f3\u79fb) \u4f4d\u57df\u64cd\u4f5c \u9002\u7528\u4e8e: SInt\u3001UInt \u548c Bool <code>val xLSB = x(0)</code> \u63d0\u53d6\u5355\u4e2a\u4f4d\uff0cLSB \u7684\u7d22\u5f15\u4e3a 0 <code>val xTopNibble = x(15, 12)</code> \u4ece\u7ed3\u675f\u4f4d\u5230\u8d77\u59cb\u4f4d\u63d0\u53d6\u4f4d\u57df <code>val usDebt = Fill(3, \"hA\".U)</code> \u5c06\u4f4d\u4e32\u91cd\u590d\u591a\u6b21 <code>val float = Cat(sign, exponent, mantissa)</code> \u8fde\u63a5\u4f4d\u57df\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u5728\u5de6\u8fb9 \u903b\u8f91\u64cd\u4f5c \u9002\u7528\u4e8e: Bool <code>val sleep = !busy</code> \u903b\u8f91\u975e <code>val hit = tagMatch &amp;&amp; valid</code> \u903b\u8f91\u4e0e <code>val stall = src1busy \\|\\| src2busy</code> \u903b\u8f91\u6216 <code>val out = Mux(sel, inTrue, inFalse)</code> \u4e8c\u8f93\u5165\u590d\u7528\u5668\uff0csel \u662f\u4e00\u4e2a Bool \u7c7b\u578b \u7b97\u672f\u8fd0\u7b97 \u9002\u7528\u4e8e\u6570\u5b57\u7c7b\u578b: SInt \u548c UInt <code>val sum = a + b</code> \u6216 <code>val sum = a +% b</code> \u52a0\u6cd5(\u4e0d\u6269\u5c55\u4f4d\u5bbd) <code>val sum = a +&amp; b</code> \u52a0\u6cd5(\u6269\u5c55\u4f4d\u5bbd) <code>val diff = a - b</code> \u6216 <code>val diff = a -% b</code> \u51cf\u6cd5(\u4e0d\u6269\u5c55\u4f4d\u5bbd) <code>val diff = a -&amp; b</code> \u51cf\u6cd5(\u6269\u5c55\u4f4d\u5bbd) <code>val prod = a * b</code> \u4e58\u6cd5 <code>val div = a / b</code> \u9664\u6cd5 <code>val mod = a % b</code> \u53d6\u6a21 \u7b97\u672f\u6bd4\u8f83 \u9002\u7528\u4e8e\u6570\u5b57\u7c7b\u578b: SInt \u548c UInt\u3002\u8fd4\u56de Bool\u3002 <code>val gt = a &gt; b</code> \u5927\u4e8e <code>val gte = a &gt;= b</code> \u5927\u4e8e\u7b49\u4e8e <code>val lt = a &lt; b</code> \u5c0f\u4e8e <code>val lte = a &lt;= b</code> \u5c0f\u4e8e\u7b49\u4e8e <p>\u6211\u4eec\u5bf9\u64cd\u4f5c\u7b26\u540d\u79f0\u7684\u9009\u62e9\u53d7 Scala \u8bed\u8a00\u7684\u9650\u5236\u3002\u6211\u4eec\u4e0d\u5f97\u4e0d\u4f7f\u7528\u4e09\u91cd\u7b49\u53f7<code>===</code>\u6765\u8868\u793a\u76f8\u7b49\uff0c\u4f7f\u7528<code>=/=</code>\u6765\u8868\u793a\u4e0d\u76f8\u7b49\uff0c\u4ee5\u4fdd\u6301\u539f\u751f Scala \u76f8\u7b49\u64cd\u4f5c\u7b26\u7684\u53ef\u7528\u6027\u3002</p> <p>Chisel \u64cd\u4f5c\u7b26\u7684\u4f18\u5148\u7ea7\u4e0d\u662f\u76f4\u63a5\u5b9a\u4e49\u5728 Chisel \u8bed\u8a00\u4e2d\u7684\u3002\u5b9e\u9645\u4e0a\uff0c\u5b83\u662f\u7531\u7535\u8def\u7684\u6c42\u503c\u987a\u5e8f\u51b3\u5b9a\u7684\uff0c\u8fd9\u81ea\u7136\u9075\u5faa\u4e86 Scala \u64cd\u4f5c\u7b26\u4f18\u5148\u7ea7\u3002\u5982\u679c\u5bf9\u64cd\u4f5c\u7b26\u4f18\u5148\u7ea7\u6709\u7591\u95ee\uff0c\u8bf7\u4f7f\u7528\u62ec\u53f7\u3002</p> <p>Chisel/Scala \u7684\u64cd\u4f5c\u7b26\u4f18\u5148\u7ea7\u4e0e Java \u6216 C \u7684\u4f18\u5148\u7ea7\u76f8\u4f3c\u4f46\u4e0d\u5b8c\u5168\u76f8\u540c\u3002Verilog \u7684\u64cd\u4f5c\u7b26\u4f18\u5148\u7ea7\u4e0e C \u76f8\u540c\uff0c\u4f46 VHDL \u5219\u4e0d\u540c\u3002Verilog \u5bf9\u903b\u8f91\u8fd0\u7b97\u6709\u4f18\u5148\u7ea7\u987a\u5e8f\uff0c\u4f46\u5728 VHDL \u4e2d\u8fd9\u4e9b\u8fd0\u7b97\u7b26\u5177\u6709\u76f8\u540c\u7684\u4f18\u5148\u7ea7\uff0c\u4ece\u5de6\u5230\u53f3\u6c42\u503c\u3002</p>"},{"location":"chisel_explanation/polymorphism-and-parameterization/","title":"\u591a\u6001\u548c\u53c2\u6570\u5316","text":"<p>\u672c\u8282\u5185\u5bb9\u8f83\u4e3a\u6df1\u5165\uff0c\u521d\u6b21\u9605\u8bfb\u53ef\u4ee5\u8df3\u8fc7\u3002</p> <p>Scala \u662f\u4e00\u79cd\u5f3a\u7c7b\u578b\u8bed\u8a00\uff0c\u4f7f\u7528\u53c2\u6570\u5316\u7c7b\u578b\u6765\u5b9a\u4e49\u6cdb\u578b\u51fd\u6570\u548c\u7c7b\u3002\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u5c55\u793a Chisel \u7528\u6237\u5982\u4f55\u4f7f\u7528\u53c2\u6570\u5316\u7c7b\u6765\u5b9a\u4e49\u81ea\u5df1\u7684\u53ef\u91cd\u7528\u51fd\u6570\u548c\u7c7b\u3002</p>"},{"location":"chisel_explanation/polymorphism-and-parameterization/#_2","title":"\u53c2\u6570\u5316\u51fd\u6570","text":"<p>\u65e9\u4e9b\u65f6\u5019\u6211\u4eec\u5b9a\u4e49\u4e86\u57fa\u4e8e <code>Bool</code> \u7684 <code>Mux2</code>\uff0c\u73b0\u5728\u6211\u4eec\u5c55\u793a\u5982\u4f55\u5b9a\u4e49\u4e00\u4e2a\u6cdb\u578b\u7684\u591a\u8def\u590d\u7528\u5668\u51fd\u6570\u3002\u6211\u4eec\u5c06\u8fd9\u4e2a\u51fd\u6570\u5b9a\u4e49\u4e3a\u63a5\u6536\u4e00\u4e2a\u5e03\u5c14\u6761\u4ef6\u548c con \u548c alt \u53c2\u6570\uff08\u5bf9\u5e94\u4e8e then \u548c else \u8868\u8fbe\u5f0f\uff09\uff0c\u7c7b\u578b\u4e3a <code>T</code>\uff1a</p> <pre><code>def Mux[T &lt;: Bits](c: Bool, con: T, alt: T): T = { ... }\n</code></pre> <p>\u8fd9\u91cc <code>T</code> \u5fc5\u987b\u662f <code>Bits</code> \u7684\u5b50\u7c7b\u3002 Scala \u786e\u4fdd\u5728\u6bcf\u6b21\u4f7f\u7528 <code>Mux</code> \u65f6\uff0c\u90fd\u80fd\u627e\u5230\u5b9e\u9645 con \u548c alt \u53c2\u6570\u7c7b\u578b\u7684\u516c\u5171\u8d85\u7c7b\uff0c\u5426\u5219\u4f1a\u5bfc\u81f4 Scala \u7f16\u8bd1\u7c7b\u578b\u9519\u8bef\u3002 \u4f8b\u5982\uff0c</p> <pre><code>Mux(c, UInt(10), UInt(11))\n</code></pre> <p>\u4f1a\u4ea7\u751f\u4e00\u4e2a <code>UInt</code> \u7c7b\u578b\u7684\u7ebf\uff0c\u56e0\u4e3a <code>con</code> \u548c <code>alt</code> \u53c2\u6570\u90fd\u662f <code>UInt</code> \u7c7b\u578b\u3002</p>"},{"location":"chisel_explanation/polymorphism-and-parameterization/#_3","title":"\u53c2\u6570\u5316\u7c7b","text":"<p>\u5c31\u50cf\u53c2\u6570\u5316\u51fd\u6570\u4e00\u6837\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u53c2\u6570\u5316\u7c7b\u4f7f\u5176\u66f4\u6613\u590d\u7528\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f Filter \u7c7b\u6cdb\u5316\u4ee5\u4f7f\u7528\u4efb\u4f55\u7c7b\u578b\u7684\u8fde\u63a5\u3002\u6211\u4eec\u901a\u8fc7\u53c2\u6570\u5316 <code>FilterIO</code> \u7c7b\u5e76\u5b9a\u4e49\u6784\u9020\u51fd\u6570\u6765\u63a5\u6536\u7c7b\u578b <code>T</code> \u7684\u5355\u4e2a\u53c2\u6570 <code>gen</code> \u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\nimport chisel3._\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass FilterIO[T &lt;: Data](gen: T) extends Bundle {\n  val x = Input(gen)\n  val y = Output(gen)\n}\n</code></pre> <p>\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b9a\u4e49\u4e00\u4e2a\u4e5f\u63a5\u53d7\u8fde\u63a5\u7c7b\u578b\u6784\u9020\u51fd\u6570\u53c2\u6570\u5e76\u5c06\u5176\u4f20\u9012\u7ed9 <code>FilterIO</code> \u63a5\u53e3\u6784\u9020\u51fd\u6570\u7684\u6a21\u5757\u7c7b\u6765\u5b9a\u4e49 <code>Filter</code>\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass Filter[T &lt;: Data](gen: T) extends Module {\n  val io = IO(new FilterIO(gen))\n  // ...\n}\n</code></pre> <p>\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u8fd9\u6837\u5b9a\u4e49\u4e00\u4e2a\u57fa\u4e8e <code>PLink</code> \u7684 <code>Filter</code>\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\nclass SimpleLink extends Bundle {\n  val data = Output(UInt(16.W))\n  val valid = Output(Bool())\n}\nclass PLink extends SimpleLink {\n  val parity = Output(UInt(5.W))\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:compile-only\nval f = Module(new Filter(new PLink))\n</code></pre> <p>\u6cdb\u578b FIFO \u53ef\u4ee5\u8fd9\u6837\u5b9a\u4e49\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3.util.log2Up\n\nclass DataBundle extends Bundle {\n  val a = UInt(32.W)\n  val b = UInt(32.W)\n}\n\nclass Fifo[T &lt;: Data](gen: T, n: Int) extends Module {\n  val io = IO(new Bundle {\n    val deq = Output(gen)\n    val enq = Input(gen)\n    val deqEn = Input(Bool())\n    val enqEn = Input(Bool())\n    val empty = Output(Bool())\n    val full = Output(Bool())\n  })\n  val enqPtr = RegInit(0.U(log2Up(n).W))\n  val deqPtr = RegInit(0.U(log2Up(n).W))\n  val empty = enqPtr === deqPtr\n  val full = (enqPtr + 1.U) === deqPtr\n  val doEnq = io.enqEn &amp;&amp; !full\n  val doDeq = io.deqEn &amp;&amp; !empty\n\n  when (doEnq) {\n    enqPtr := enqPtr + 1.U\n  }\n  when (doDeq) {\n    deqPtr := deqPtr + 1.U\n  }\n  val ram = Mem(n, gen)\n  when (doEnq) {\n    ram(enqPtr) := io.enq\n  }\n  ram(deqPtr) &lt;&gt; io.deq\n}\n</code></pre> <p>\u4e00\u4e2a\u5305\u542b 8 \u4e2a DataBundle \u7c7b\u578b\u5143\u7d20\u7684 FIFO \u53ef\u4ee5\u8fd9\u6837\u5b9e\u4f8b\u5316\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:compile-only\nval fifo = Module(new Fifo(new DataBundle, 8))\n</code></pre> <p>\u4e5f\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u6cdb\u578b\u7684\u89e3\u8026\uff08ready/valid\uff09\u63a5\u53e3\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible:reset\nimport chisel3._\nclass DataBundle extends Bundle {\n  val a = UInt(32.W)\n  val b = UInt(32.W)\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass DecoupledIO[T &lt;: Data](data: T) extends Bundle {\n  val ready = Input(Bool())\n  val valid = Output(Bool())\n  val bits  = Output(data)\n}\n</code></pre> <p>\u8fd9\u4e2a\u6a21\u677f\u53ef\u4ee5\u7528\u6765\u4e3a\u4efb\u4f55\u4fe1\u53f7\u96c6\u6dfb\u52a0\u63e1\u624b\u534f\u8bae\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass DecoupledDemo extends DecoupledIO(new DataBundle)\n</code></pre> <p>\u73b0\u5728 FIFO \u63a5\u53e3\u53ef\u4ee5\u7b80\u5316\u4e3a\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass Fifo[T &lt;: Data](data: T, n: Int) extends Module {\n  val io = IO(new Bundle {\n    val enq = Flipped(new DecoupledIO(data))\n    val deq = new DecoupledIO(data)\n  })\n  // ...\n}\n</code></pre>"},{"location":"chisel_explanation/polymorphism-and-parameterization/#_4","title":"\u57fa\u4e8e\u6a21\u5757\u7684\u53c2\u6570\u5316","text":"<p>\u4f60\u4e5f\u53ef\u4ee5\u57fa\u4e8e\u5176\u4ed6\u6a21\u5757\u800c\u4e0d\u4ec5\u4ec5\u662f\u7c7b\u578b\u6765\u53c2\u6570\u5316\u6a21\u5757\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u57fa\u4e8e\u5176\u4ed6\u6a21\u5757\u800c\u4e0d\u662f\u7c7b\u578b\u53c2\u6570\u5316\u7684\u6a21\u5757\u793a\u4f8b\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3.RawModule\nimport chisel3.experimental.BaseModule\n\n// \u63d0\u4f9b\u4e00\u4e2a\u66f4\u5177\u4f53\u7684\u63a5\u53e3\uff0c\u56e0\u4e3a\u6cdb\u578b Module\n// \u5728\u7f16\u8bd1\u65f6\u4e0d\u63d0\u4f9b\u5173\u4e8e\u6cdb\u578b\u6a21\u5757 IO \u7684\u4fe1\u606f\ntrait MyAdder {\n    def in1: UInt\n    def in2: UInt\n    def out: UInt\n}\n\nclass Mod1 extends RawModule with MyAdder {\n    val in1 = IO(Input(UInt(8.W)))\n    val in2 = IO(Input(UInt(8.W)))\n    val out = IO(Output(UInt(8.W)))\n    out := in1 + in2\n}\n\nclass Mod2 extends RawModule with MyAdder {\n    val in1 = IO(Input(UInt(8.W)))\n    val in2 = IO(Input(UInt(8.W)))\n    val out = IO(Output(UInt(8.W)))\n    out := in1 - in2\n}\n\nclass X[T &lt;: BaseModule with MyAdder](genT: =&gt; T) extends Module {\n    val io = IO(new Bundle {\n        val in1 = Input(UInt(8.W))\n        val in2 = Input(UInt(8.W))\n        val out = Output(UInt(8.W))\n    })\n    val subMod = Module(genT)\n    subMod.in1 := io.in1\n    subMod.in2 := io.in2\n    io.out := subMod.out\n}\n</code></pre>"},{"location":"chisel_explanation/ports/","title":"\u7aef\u53e3","text":"<p>\u7aef\u53e3\u7528\u4f5c\u786c\u4ef6\u7ec4\u4ef6\u7684\u63a5\u53e3\u3002\u7aef\u53e3\u5b9e\u9645\u4e0a\u5c31\u662f\u4e00\u4e2a <code>Data</code> \u5bf9\u8c61\uff0c\u5176\u6210\u5458\u90fd\u88ab\u8d4b\u4e88\u4e86\u65b9\u5411\u3002</p> <p>Chisel \u63d0\u4f9b\u4e86\u7aef\u53e3\u6784\u9020\u5668\uff0c\u5141\u8bb8\u5728\u6784\u9020\u65f6\u4e3a\u5bf9\u8c61\u6dfb\u52a0\u65b9\u5411\uff08\u8f93\u5165\u6216\u8f93\u51fa\uff09\u3002\u57fa\u672c\u7684\u7aef\u53e3\u6784\u9020\u5668\u901a\u8fc7 <code>Input</code> \u6216 <code>Output</code> \u5305\u88c5\u7aef\u53e3\u7684\u7c7b\u578b\u3002</p> <p>\u4e0b\u9762\u662f\u4e00\u4e2a\u7aef\u53e3\u58f0\u660e\u7684\u4f8b\u5b50\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\nimport chisel3._\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nclass Decoupled extends Bundle {\n  val ready = Output(Bool())\n  val data  = Input(UInt(32.W))\n  val valid = Input(Bool())\n}\n</code></pre> <p>\u5728\u5b9a\u4e49\u4e86 <code>Decoupled</code> \u4e4b\u540e\uff0c\u5b83\u5c31\u6210\u4e3a\u4e86\u4e00\u4e2a\u65b0\u7684\u7c7b\u578b\uff0c\u53ef\u4ee5\u6839\u636e\u9700\u8981\u7528\u4e8e\u6a21\u5757\u63a5\u53e3\u6216\u547d\u540d\u7684\u7ebf\u96c6\u5408\u3002</p> <p>\u901a\u8fc7\u5c06\u65b9\u5411\u4fe1\u606f\u6298\u53e0\u5230\u5bf9\u8c61\u58f0\u660e\u4e2d\uff0cChisel \u80fd\u591f\u63d0\u4f9b\u540e\u9762\u5c06\u8981\u63cf\u8ff0\u7684\u5f3a\u5927\u7684\u63a5\u7ebf\u6784\u9020\u3002</p>"},{"location":"chisel_explanation/ports/#_2","title":"\u68c0\u67e5\u6a21\u5757\u7aef\u53e3","text":"<p>(Chisel 3.2+)</p> <p>Chisel 3.2 \u5f15\u5165\u4e86 <code>DataMirror.modulePorts</code>\uff0c\u53ef\u4ee5\u7528\u6765\u68c0\u67e5\u4efb\u4f55 Chisel \u6a21\u5757\u7684 IO\uff08\u8fd9\u5305\u62ec\u6765\u81ea <code>import chisel3._</code> \u548c <code>import Chisel._</code> \u7684\u6a21\u5757\uff0c\u4ee5\u53ca\u6765\u81ea\u8fd9\u4e24\u4e2a\u5305\u7684 BlackBox\uff09\u3002 \u4ee5\u4e0b\u662f\u5982\u4f55\u4f7f\u7528\u8fd9\u4e2a API \u7684\u793a\u4f8b\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nimport chisel3.reflect.DataMirror\nimport chisel3.stage.ChiselGeneratorAnnotation\n\nclass Adder extends Module {\n  val a = IO(Input(UInt(8.W)))\n  val b = IO(Input(UInt(8.W)))\n  val c = IO(Output(UInt(8.W)))\n  c := a +&amp; b\n}\n\nclass Test extends Module {\n  val adder = Module(new Adder)\n  // \u4ec5\u7528\u4e8e\u8c03\u8bd5\n  adder.a := DontCare\n  adder.b := DontCare\n\n  // \u68c0\u67e5 adder \u7684\u7aef\u53e3\n  // \u67e5\u770b\u4e0b\u9762\u7684\u7ed3\u679c\n  DataMirror.modulePorts(adder).foreach { case (name, port) =&gt; {\n    println(s\"Found port $name: $port\")\n  }}\n}\n</code></pre> <p>\u8fd9\u5c06\u6253\u5370\u4ee5\u4e0b\u5185\u5bb9\uff1a <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:passthrough\nprintln(\"```\")\nchisel3.docs.emitSystemVerilog(new Test): Unit // \u6291\u5236\u5b57\u7b26\u4e32\u8f93\u51fa\uff0c\u53ea\u60f3\u770b\u5230\u6807\u51c6\u8f93\u51fa\nprintln(\"```\")\n</code></pre></p>"},{"location":"chisel_explanation/printing/","title":"Chisel \u4e2d\u7684\u6253\u5370","text":"<p>Chisel \u63d0\u4f9b <code>printf</code> \u51fd\u6570\u7528\u4e8e\u8c03\u8bd5\u76ee\u7684\u3002\u5b83\u6709\u4e24\u79cd\u98ce\u683c\uff1a</p> <ul> <li>Scala \u98ce\u683c</li> <li>C \u98ce\u683c</li> </ul> <p>Chisel \u8fd8\u63d0\u4f9b\u4e86\"\u65e5\u5fd7\"\u652f\u6301\uff0c\u9664\u4e86\u9ed8\u8ba4\u7684\u6807\u51c6\u9519\u8bef\u8f93\u51fa\u5916\uff0c\u8fd8\u53ef\u4ee5\u6253\u5370\u5230\u6587\u4ef6\uff0c\u8be6\u89c1\u65e5\u5fd7\u3002</p>"},{"location":"chisel_explanation/printing/#scala","title":"Scala \u98ce\u683c","text":"<p>Chisel \u4e5f\u652f\u6301\u7c7b\u4f3c\u4e8e Scala \u5b57\u7b26\u4e32\u63d2\u503c \u7684 printf \u98ce\u683c\u3002Chisel \u63d0\u4f9b\u4e86\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u5b57\u7b26\u4e32\u63d2\u503c\u5668 <code>cf</code>\uff0c\u5b83\u9075\u5faa C \u98ce\u683c\u7684\u683c\u5f0f\u8bf4\u660e\u7b26\uff08\u53c2\u89c1\u4e0b\u9762\u7684 C \u98ce\u683c \u90e8\u5206\uff09\u3002</p> <p>\u6ce8\u610f\uff0cScala \u7684 s-\u63d2\u503c\u5668\u5728 Chisel \u6784\u9020\u4e2d\u4e0d\u53d7\u652f\u6301\uff0c\u4f1a\u629b\u51fa\u9519\u8bef\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\nimport chisel3._\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:fail\nclass MyModule extends Module {\n  val in = IO(Input(UInt(8.W)))\n  printf(s\"in = $in\\n\")\n}\n</code></pre> <p>\u76f8\u53cd\uff0c\u8bf7\u4f7f\u7528 Chisel \u7684 <code>cf</code> \u63d2\u503c\u5668\uff0c\u5982\u4e0b\u4f8b\u6240\u793a\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:compile-only\nval myUInt = 33.U\nprintf(cf\"myUInt = $myUInt\") // myUInt = 33\n</code></pre> <p>\u6ce8\u610f\uff0c\u5f53\u8fde\u63a5 <code>cf\"...\"</code> \u5b57\u7b26\u4e32\u65f6\uff0c\u4f60\u9700\u8981\u4ee5 <code>cf\"...\"</code> \u5b57\u7b26\u4e32\u5f00\u5934\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:compile-only\n// \u4e0d\u4f1a\u5bf9\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\u8fdb\u884c\u63d2\u503c\nval myUInt = 33.U\nprintf(\"my normal string\" + cf\"myUInt = $myUInt\")\n</code></pre>"},{"location":"chisel_explanation/printing/#_1","title":"\u7b80\u5355\u683c\u5f0f\u5316","text":"<p>\u5176\u4ed6\u683c\u5f0f\u53ef\u7528\u5982\u4e0b\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:compile-only\nval myUInt = 33.U\n// \u5341\u516d\u8fdb\u5236\nprintf(cf\"myUInt = 0x$myUInt%x\") // myUInt = 0x21\n// \u4e8c\u8fdb\u5236\nprintf(cf\"myUInt = $myUInt%b\") // myUInt = 100001\n// \u5b57\u7b26\nprintf(cf\"myUInt = $myUInt%c\") // myUInt = !\n</code></pre>"},{"location":"chisel_explanation/printing/#_2","title":"\u7279\u6b8a\u503c","text":"<p>\u5728\u4f60\u7684 <code>cf</code> \u63d2\u503c\u5b57\u7b26\u4e32\u4e2d\u53ef\u4ee5\u5305\u542b\u4e00\u4e9b\u7279\u6b8a\u503c\uff1a</p> <ul> <li><code>HierarchicalModuleName</code> (<code>%m</code>)\uff1a\u5f53\u524d\u6a21\u5757\u7684\u5c42\u6b21\u540d\u79f0</li> <li><code>SimulationTime</code> (<code>%T</code>)\uff1a\u5f53\u524d\u4eff\u771f\u65f6\u95f4\uff08\u4e0e Verilog \u7684 <code>%t</code> \u4e0d\u540c\uff0c\u5b83\u4e0d\u63a5\u53d7\u53c2\u6570\uff09</li> <li><code>Percent</code> (<code>%%</code>)\uff1a\u5b57\u9762\u4e0a\u7684 <code>%</code></li> </ul> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:compile-only\nprintf(cf\"hierarchical path = $HierarchicalModuleName\\n\") // hierarchical path = &lt;verilog.module.path&gt;\nprintf(cf\"hierarchical path = %m\\n\") // \u7b49\u540c\u4e8e\u4e0a\u9762\u7684\u4f8b\u5b50\n\nprintf(cf\"simulation time = $SimulationTime\\n\") // simulation time = &lt;simulation.time&gt;\nprintf(cf\"simulation time = %T\\n\") // \u7b49\u540c\u4e8e\u4e0a\u9762\u7684\u4f8b\u5b50\n\nprintf(cf\"100$Percent\\n\") // 100%\nprintf(cf\"100%%\\n\") // \u7b49\u540c\u4e8e\u4e0a\u9762\u7684\u4f8b\u5b50\n</code></pre>"},{"location":"chisel_explanation/printing/#_3","title":"\u683c\u5f0f\u4fee\u9970\u7b26","text":"<p>Chisel \u652f\u6301 <code>%d</code>\u3001<code>%x</code> \u548c <code>%b</code> \u7684\u6807\u51c6 Verilog \u98ce\u683c\u4fee\u9970\u7b26\uff0c\u4f4d\u4e8e <code>%</code> \u548c\u683c\u5f0f\u8bf4\u660e\u7b26\u4e4b\u95f4\u3002</p> <p>Verilog \u6a21\u62df\u5668\u4f1a\u5c06\u503c\u586b\u5145\u5230\u4fe1\u53f7\u7684\u5bbd\u5ea6\u3002 \u5bf9\u4e8e\u5341\u8fdb\u5236\u683c\u5f0f\uff0c\u4f7f\u7528\u7a7a\u683c\u8fdb\u884c\u586b\u5145\u3002 \u5bf9\u4e8e\u6240\u6709\u5176\u4ed6\u683c\u5f0f\uff0c\u4f7f\u7528 <code>0</code> \u8fdb\u884c\u586b\u5145\u3002</p> <ul> <li>\u975e\u8d1f\u5b57\u6bb5\u5bbd\u5ea6\u4f1a\u8986\u76d6\u9ed8\u8ba4\u7684 Verilog \u503c\u5927\u5c0f\u3002</li> <li>\u6307\u5b9a\u5b57\u6bb5\u5bbd\u5ea6\u4e3a <code>0</code> \u5c06\u59cb\u7ec8\u4ee5\u6700\u5c0f\u5bbd\u5ea6\u663e\u793a\u503c\uff08\u65e0\u96f6\u586b\u5145\u548c\u7a7a\u683c\u586b\u5145\uff09\u3002</li> </ul> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:compile-only\nval foo = WireInit(UInt(32.W), 33.U)\nprintf(cf\"foo = $foo%d!\\n\")  // foo =         33!\nprintf(cf\"foo = $foo%0d!\\n\") // foo = 33!\nprintf(cf\"foo = $foo%4d!\\n\") // foo =   33!\nprintf(cf\"foo = $foo%x!\\n\")  // foo = 00000021!\nprintf(cf\"foo = $foo%0x!\\n\") // foo = 21!\nprintf(cf\"foo = $foo%4x!\\n\") // foo = 0021!\nval bar = WireInit(UInt(8.W), 5.U)\nprintf(cf\"bar = $bar%b!\\n\")  // foo = 00000101!\nprintf(cf\"bar = $bar%0b!\\n\") // foo = 101!\nprintf(cf\"bar = $bar%4b!\\n\") // foo = 0101!\n</code></pre>"},{"location":"chisel_explanation/printing/#_4","title":"\u805a\u5408\u6570\u636e\u7c7b\u578b","text":"<p>Chisel \u4e3a Vec \u548c Bundle \u63d0\u4f9b\u4e86\u9ed8\u8ba4\u7684\u81ea\u5b9a\u4e49\"\u7f8e\u5316\u6253\u5370\"\u529f\u80fd\u3002Vec \u7684\u9ed8\u8ba4\u6253\u5370\u7c7b\u4f3c\u4e8e\u6253\u5370 Scala \u7684 Seq \u6216 List\uff0c\u800c\u6253\u5370 Bundle \u7c7b\u4f3c\u4e8e\u6253\u5370 Scala Map\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:compile-only\nval myVec = VecInit(5.U, 10.U, 13.U)\nprintf(cf\"myVec = $myVec\") // myVec = Vec(5, 10, 13)\n\nval myBundle = Wire(new Bundle {\n  val foo = UInt()\n  val bar = UInt()\n})\nmyBundle.foo := 3.U\nmyBundle.bar := 11.U\nprintf(cf\"myBundle = $myBundle\") // myBundle = Bundle(a -&gt; 3, b -&gt; 11)\n</code></pre>"},{"location":"chisel_explanation/printing/#_5","title":"\u81ea\u5b9a\u4e49\u6253\u5370","text":"<p>Chisel \u8fd8\u63d0\u4f9b\u4e86\u4e3a\u7528\u6237\u5b9a\u4e49\u7684 Bundle \u6307\u5b9a\u81ea\u5b9a\u4e49\u6253\u5370\u683c\u5f0f\u7684\u529f\u80fd\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:compile-only\nclass Message extends Bundle {\n  val valid = Bool()\n  val addr = UInt(32.W)\n  val length = UInt(4.W)\n  val data = UInt(64.W)\n\n  override def toPrintable: Printable = {\n    cf\"Message:\\n\" +\n    cf\"  valid  : $valid\\n\" +\n    cf\"  addr   : 0x$addr%x\\n\" +\n    cf\"  length : $length\\n\" +\n    cf\"  data   : 0x$data%x\"\n  }\n}\n\nval myMessage = Wire(new Message)\nmyMessage.valid := true.B\nmyMessage.addr := \"h1234\".U\nmyMessage.length := 10.U\nmyMessage.data := \"hdeadbeef\".U\n\nprintf(cf\"$myMessage\")\n</code></pre> <p>\u6253\u5370\u7ed3\u679c\u5c06\u5982\u4e0b\uff1a</p> <pre><code>Message:\n  valid  : 1\n  addr   : 0x00001234\n  length : 10\n  data   : 0x00000000deadbeef\n</code></pre> <p>\u6ce8\u610f <code>cf</code> \u63d2\u503c\"\u5b57\u7b26\u4e32\"\u4e4b\u95f4\u4f7f\u7528 <code>+</code> \u7684\u7528\u6cd5\u3002<code>cf</code> \u63d2\u503c\u7684\u7ed3\u679c\u53ef\u4ee5\u4f7f\u7528 <code>+</code> \u8fd0\u7b97\u7b26\u8fde\u63a5\u3002</p>"},{"location":"chisel_explanation/printing/#c","title":"C \u98ce\u683c","text":"<p>Chisel \u63d0\u4f9b <code>printf</code>\uff0c\u5176\u98ce\u683c\u7c7b\u4f3c\u4e8e C \u8bed\u8a00\u7684 <code>printf</code>\u3002\u5b83\u63a5\u53d7\u4e00\u4e2a\u53cc\u5f15\u53f7\u62ec\u8d77\u6765\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\u548c\u53ef\u53d8\u6570\u91cf\u7684\u53c2\u6570\uff0c\u8fd9\u4e9b\u53c2\u6570\u5c06\u5728\u4e0a\u5347\u6cbf\u65f6\u88ab\u6253\u5370\u3002Chisel \u652f\u6301\u4ee5\u4e0b\u683c\u5f0f\u8bf4\u660e\u7b26\uff1a</p> \u683c\u5f0f\u8bf4\u660e\u7b26 \u542b\u4e49 <code>%d</code> \u5341\u8fdb\u5236\u6570 <code>%x</code> \u5341\u516d\u8fdb\u5236\u6570 <code>%b</code> \u4e8c\u8fdb\u5236\u6570 <code>%c</code> 8 \u4f4d ASCII \u5b57\u7b26 <code>%n</code> \u4fe1\u53f7\u540d\u79f0 <code>%N</code> \u4fe1\u53f7\u7684\u5168\u540d <code>%%</code> \u5b57\u9762\u4e0a\u7684\u767e\u5206\u53f7 <code>%m</code> \u5c42\u6b21\u540d\u79f0 <code>%T</code> \u4eff\u771f\u65f6\u95f4 <p><code>%d</code>\u3001<code>%x</code> \u548c <code>%b</code> \u652f\u6301\u4e0a\u8ff0\u683c\u5f0f\u4fee\u9970\u7b26\u90e8\u5206\u63cf\u8ff0\u7684\u4fee\u9970\u7b26\u3002</p> <p>\u5b83\u8fd8\u652f\u6301\u4e00\u5c0f\u90e8\u5206\u8f6c\u4e49\u5b57\u7b26\uff1a</p> \u8f6c\u4e49\u5b57\u7b26 \u542b\u4e49 <code>\\n</code> \u6362\u884c <code>\\t</code> \u5236\u8868\u7b26 <code>\\\"</code> \u5b57\u9762\u4e0a\u7684\u53cc\u5f15\u53f7 <code>\\'</code> \u5b57\u9762\u4e0a\u7684\u5355\u5f15\u53f7 <code>\\\\</code> \u5b57\u9762\u4e0a\u7684\u53cd\u659c\u6760 <p>\u6ce8\u610f\uff0c\u5355\u5f15\u53f7\u4e0d\u9700\u8981\u8f6c\u4e49\uff0c\u4f46\u8f6c\u4e49\u662f\u5408\u6cd5\u7684\u3002</p> <p>\u56e0\u6b64\uff0c<code>printf</code> \u7684\u4f7f\u7528\u65b9\u5f0f\u4e0e C \u8bed\u8a00\u4e2d\u975e\u5e38\u76f8\u4f3c\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:compile-only\nval myUInt = 32.U\nprintf(\"myUInt = %d\", myUInt) // myUInt = 32\n</code></pre>"},{"location":"chisel_explanation/printing/#_6","title":"\u65e5\u5fd7","text":"<p>Chisel \u901a\u8fc7 <code>SimLog</code> API \u652f\u6301\u65e5\u5fd7\u8bb0\u5f55\u3002 <code>SimLog</code> \u63d0\u4f9b\u4e86\u4e00\u79cd\u5c06\u4eff\u771f\u65e5\u5fd7\u5199\u5165\u6587\u4ef6\u6216\u6807\u51c6\u9519\u8bef\u7684\u65b9\u6cd5\u3002\u5f53\u4f60\u9700\u8981\u4ee5\u4e0b\u529f\u80fd\u65f6\uff0c\u5b83\u7279\u522b\u6709\u7528\uff1a * \u5c06\u4eff\u771f\u8f93\u51fa\u5199\u5165\u7279\u5b9a\u6587\u4ef6\u3002 * \u5728\u5355\u4e2a\u4eff\u771f\u4e2d\u62e5\u6709\u591a\u4e2a\u65e5\u5fd7\u6587\u4ef6\u3002 * \u7f16\u5199\u53ef\u91cd\u7528\u7684\u4ee3\u7801\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u9488\u5bf9\u4e0d\u540c\u7684\u65e5\u5fd7\u76ee\u6807\u3002</p>"},{"location":"chisel_explanation/printing/#_7","title":"\u57fa\u672c\u7528\u6cd5","text":"<p><code>SimLog</code> \u6700\u5e38\u89c1\u7684\u7528\u6cd5\u662f\u5199\u5165\u6587\u4ef6\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:compile-only\nclass MyModule extends Module {\n  val log = SimLog.file(\"logfile.log\")\n  val in = IO(Input(UInt(8.W)))\n  log.printf(cf\"in = $in%d\\n\")\n}\n</code></pre> <p>\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u9ed8\u8ba4\u6587\u4ef6\u63cf\u8ff0\u7b26\u5199\u5165\u6807\u51c6\u9519\u8bef\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:compile-only\nclass MyModule extends Module {\n  val log = SimLog.StdErr\n  val in = IO(Input(UInt(8.W)))\n  log.printf(cf\"in = $in%d\\n\")\n}\n</code></pre> <p>:::note \u8fd9\u4e0e\u6807\u51c6\u7684 <code>printf</code> \u662f\u76f8\u540c\u7684\u3002 :::</p> <p>SimLog \u6587\u4ef6\u540d\u672c\u8eab\u53ef\u4ee5\u662f <code>Printable</code> \u503c\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:compile-only\nclass MyModule extends Module {\n  val idx = IO(Input(UInt(8.W)))\n  val log = SimLog.file(cf\"logfile_$idx%0d.log\")\n  val in = IO(Input(UInt(8.W)))\n  log.printf(cf\"in = $in%d\\n\")\n}\n</code></pre> <p>\u5f3a\u70c8\u5efa\u8bae\u5728\u6587\u4ef6\u540d\u4e2d\u4f7f\u7528 <code>%0d</code> \u4e0e UInts \u4e00\u8d77\u4f7f\u7528\uff0c\u4ee5\u907f\u514d\u6587\u4ef6\u540d\u4e2d\u51fa\u73b0\u7a7a\u683c\u3002</p> <p>:::warning \u6ce8\u610f\u907f\u514d\u5728\u6587\u4ef6\u540d\u4e2d\u4f7f\u7528\u672a\u521d\u59cb\u5316\u7684\u5bc4\u5b58\u5668\u3002 :::</p>"},{"location":"chisel_explanation/printing/#_8","title":"\u7f16\u5199\u901a\u7528\u4ee3\u7801","text":"<p><code>SimLog</code> \u5141\u8bb8\u4f60\u7f16\u5199\u53ef\u4ee5\u4e0e\u4efb\u4f55\u65e5\u5fd7\u76ee\u6807\u4e00\u8d77\u4f7f\u7528\u7684\u4ee3\u7801\u3002\u8fd9\u5728\u521b\u5efa\u53ef\u91cd\u7528\u7ec4\u4ef6\u65f6\u975e\u5e38\u6709\u7528\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:compile-only\nclass MyLogger(log: SimLog) extends Module {\n  val in = IO(Input(UInt(8.W)))\n  log.printf(cf\"in = $in%d\\n\")\n}\n\n// \u4f7f\u7528\u6587\u4ef6\nval withFile = Module(new MyLogger(SimLog.file(\"data.log\")))\n\n// \u4f7f\u7528\u6807\u51c6\u9519\u8bef\nval withStderr = Module(new MyLogger(SimLog.StdErr))\n</code></pre>"},{"location":"chisel_explanation/printing/#_9","title":"\u5237\u65b0","text":"<p><code>SimLog</code> \u5bf9\u8c61\u53ef\u4ee5\u88ab\u5237\u65b0\uff0c\u4ee5\u786e\u4fdd\u6240\u6709\u7f13\u51b2\u7684\u8f93\u51fa\u90fd\u88ab\u5199\u5165\u3002 \u8fd9\u5728\u4f7f\u7528\u88ab\u8bb0\u5f55\u7684\u8f93\u51fa\u4f5c\u4e3a\u534f\u540c\u4eff\u771f\u7ec4\u4ef6\uff08\u5982\u68c0\u67e5\u5668\u6216\u9ec4\u91d1\u6a21\u578b\uff09\u7684\u8f93\u5165\u65f6\u975e\u5e38\u6709\u7528\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:compile-only\nval log = SimLog.file(\"logfile.log\")\nval in = IO(Input(UInt(8.W)))\nlog.printf(cf\"in = $in%d\\n\")\nlog.flush() // \u7acb\u5373\u5237\u65b0\u7f13\u51b2\u7684\u8f93\u51fa\u3002\n</code></pre> <p>\u4f60\u4e5f\u53ef\u4ee5\u5237\u65b0\u6807\u51c6\u9519\u8bef\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:compile-only\nSimLog.StdErr.flush() // \u8fd9\u5c06\u5237\u65b0\u6240\u6709\u6807\u51c6\u8f93\u51fa\u3002\n</code></pre>"},{"location":"chisel_explanation/probes/","title":"\u63a2\u6d4b\u5668","text":"<p>\u63a2\u6d4b\u5668 \u662f\u4e00\u79cd\u7f16\u7801\u786c\u4ef6 \u5f15\u7528 \u7684\u65b9\u5f0f\uff0c\u8fd9\u4e2a\u5f15\u7528\u540e\u7eed\u5c06\u901a\u8fc7\u540d\u79f0\u88ab\u5f15\u7528\u3002\u4ece\u673a\u5236\u4e0a\u8bb2\uff0c\u63a2\u6d4b\u5668\u662f\u4e00\u79cd\u751f\u6210\u5305\u542b\u5c42\u6b21\u540d\u79f0\u7684 SystemVerilog \u7684\u65b9\u6cd5\uff08\u53c2\u89c1\uff1aSystemVerilog 2023 \u89c4\u8303\u7684\u7b2c 23.6 \u8282\uff09\u3002</p> <p>\u63a2\u6d4b\u5668\u901a\u5e38\u7528\u4e8e\u4e3a\u4e00\u4e2a\u5355\u5143\u66b4\u9732\"\u9a8c\u8bc1\u63a5\u53e3\"\uff0c\u4ee5\u4fbf\u8fdb\u884c\u8c03\u8bd5\u3001\u6d4b\u8bd5\u6216\u68c0\u67e5\uff0c\u800c\u65e0\u9700\u5411\u6700\u7ec8\u786c\u4ef6\u6dfb\u52a0\u7aef\u53e3\u3002\u5f53\u4e0e\u5c42\u7ed3\u5408\u4f7f\u7528\u65f6\uff0c\u5b83\u4eec\u53ef\u4ee5\u6839\u636e Verilog \u7f16\u8bd1\u65f6\u7684\u51b3\u5b9a\u9009\u62e9\u6027\u5730\u5b58\u5728\u4e8e\u8bbe\u8ba1\u4e2d\u3002</p> <p>Warning</p> <p>\u63a2\u6d4b\u5668 \u4e0d\u662f \u5f71\u5b50\u6570\u636e\u6d41\u3002\u5b83\u4eec \u4e0d\u662f \u4e00\u79cd\u5728\u907f\u514d\u4f7f\u7528\u7aef\u53e3\u7684\u60c5\u51b5\u4e0b\u8fde\u63a5\u4efb\u610f\u786c\u4ef6\u7684\u673a\u5236\u3002\u5b83\u4eec\u66f4\u63a5\u8fd1\u4e8e\u4f20\u7edf\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\"\u5f15\u7528\"\uff0c\u53ea\u662f\u5b83\u4eec\u6709\u989d\u5916\u7684\u9650\u5236\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u63a2\u6d4b\u5668\u6700\u7ec8\u4f1a\u901a\u8fc7\u540d\u79f0\u88ab\u8bbf\u95ee\uff0c\u800c\u4e14\u8be5\u540d\u79f0\u5fc5\u987b\u5728\u5176\u8bbf\u95ee\u4f4d\u7f6e\u5904\u660e\u786e\u5730\u89e3\u6790\u5230\u88ab\u63a2\u6d4b\u7684\u503c\u3002</p>"},{"location":"chisel_explanation/probes/#_2","title":"\u6982\u8ff0","text":"<p>\u57fa\u4e8e\u7528\u6237\u60f3\u8981\u5bf9\u786c\u4ef6\u8fdb\u884c\u7684\u8bbf\u95ee\u7c7b\u578b\uff0c\u6709\u4e24\u79cd\u63a2\u6d4b\u5668\u3002\u53ea\u8bfb\u63a2\u6d4b\u5668 \u5141\u8bb8\u5bf9\u786c\u4ef6\u8fdb\u884c\u53ea\u8bfb\u8bbf\u95ee\u3002\u8bfb\u5199\u63a2\u6d4b\u5668 \u5141\u8bb8\u5bf9\u786c\u4ef6\u8fdb\u884c\u8bfb\u5199\u8bbf\u95ee\u3002</p> <p>\u53ea\u8bfb\u63a2\u6d4b\u5668\u901a\u5e38\u7528\u4e8e\u88ab\u52a8\u9a8c\u8bc1\uff08\u4f8b\u5982\uff0c\u65ad\u8a00\u6216\u76d1\u89c6\u5668\uff09\u6216\u8c03\u8bd5\uff08\u4f8b\u5982\uff0c\u6784\u5efa\u5fae\u67b6\u6784\u7684\u67b6\u6784\u8c03\u8bd5\"\u89c6\u56fe\"\uff09\u3002\u8bfb\u5199\u63a2\u6d4b\u5668\u901a\u5e38\u7528\u4e8e\u66f4\u4e3b\u52a8\u7684\u9a8c\u8bc1\uff08\u4f8b\u5982\uff0c\u6ce8\u5165\u6545\u969c\u4ee5\u6d4b\u8bd5\u6545\u969c\u6062\u590d\u673a\u5236\uff0c\u6216\u4f5c\u4e3a\u8986\u76d6\u96be\u4ee5\u8fbe\u5230\u7684\u8986\u76d6\u7387\u7684\u4e00\u79cd\u65b9\u5f0f\uff09\u3002</p> <p>\u5904\u7406\u63a2\u6d4b\u5668\u7684 API \u4f4d\u4e8e <code>chisel3.probe</code> \u5305\u4e2d\u3002</p>"},{"location":"chisel_explanation/probes/#_3","title":"\u53ea\u8bfb\u63a2\u6d4b\u5668","text":"<p>\u8981\u521b\u5efa\u786c\u4ef6\u503c\u7684\u53ea\u8bfb\u63a2\u6d4b\u5668\uff0c\u4f7f\u7528 <code>ProbeValue</code> API\u3002\u8981\u521b\u5efa\u53ea\u8bfb\u63a2\u6d4b\u5668 \u7c7b\u578b\uff0c\u4f7f\u7528 <code>Probe</code> API\u3002\u63a2\u6d4b\u5668\u662f\u7aef\u53e3\u548c\u7ebf\u7684\u5408\u6cd5\u7c7b\u578b\uff0c\u4f46\u4e0d\u662f\u72b6\u6001\u5143\u7d20\uff08\u4f8b\u5982\uff0c\u5bc4\u5b58\u5668\u6216\u5185\u5b58\uff09\u7684\u5408\u6cd5\u7c7b\u578b\u3002</p> <p>:::note</p> <p>\u63a2\u6d4b\u5668\u4f5c\u4e3a\u7ebf\u7684\u5408\u6cd5\u7c7b\u578b\u53ef\u80fd\u4f1a\u4ee4\u4eba\u60ca\u8bb6\u3002\u7136\u800c\uff0cChisel \u4e2d\u7684\u7ebf\u7684\u884c\u4e3a\u66f4\u50cf\u53d8\u91cf\uff0c\u800c\u4e0d\u662f\"\u786c\u4ef6\u7ebf\"\uff08\u6216 Verilog \u7684\u7f51\u7c7b\u578b\uff09\u3002\u4ece\u8fd9\u4e2a\u89d2\u5ea6\u6765\u770b\uff0c\u63a2\u6d4b\u5668\uff08\u4e00\u4e2a\u5f15\u7528\uff09\u53ef\u4ee5\u901a\u8fc7\u53d8\u91cf\u4f20\u9012\u662f\u5f88\u81ea\u7136\u7684\u3002</p> <p>:::</p> <p>\u63a2\u6d4b\u5668\u4e0e\u666e\u901a\u7684 Chisel \u786c\u4ef6\u7c7b\u578b\u4e0d\u540c\u3002\u666e\u901a\u7684 Chisel \u786c\u4ef6\u53ef\u4ee5\u901a\u8fc7\u6240\u8c13\u7684\"\u6700\u540e\u8fde\u63a5\u8bed\u4e49\"\u591a\u6b21\u8fde\u63a5\uff0c\u6700\u540e\u4e00\u6b21\u8fde\u63a5\"\u80dc\u51fa\"\uff0c\u800c\u63a2\u6d4b\u5668\u7c7b\u578b\u53ea\u80fd\u88ab \u5b9a\u4e49 \u4e00\u6b21\u3002\u5b9a\u4e49\u63a2\u6d4b\u5668\u7684 API \u4e0d\u51fa\u6240\u6599\u5730\u79f0\u4e3a <code>define</code>\u3002\u8fd9\u7528\u4e8e\u901a\u8fc7\u5c42\u6b21\u7ed3\u6784\"\u8f6c\u53d1\"\u63a2\u6d4b\u5668\uff0c\u4f8b\u5982\uff0c\u7528\u88ab\u63a2\u6d4b\u503c\u7684\u7ebf\u6765\u5b9a\u4e49\u63a2\u6d4b\u5668\u7aef\u53e3\u3002</p> <p>\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6807\u51c6\u7684 Chisel \u8fde\u63a5\u64cd\u4f5c\u7b26\uff0c\u5b83\u4eec\u4f1a\u81ea\u52a8\u4e3a\u4f60\u9690\u5f0f\u4f7f\u7528 <code>define</code> \u64cd\u4f5c\u7b26\u3002</p> <p>\u8981\u8bfb\u53d6\u63a2\u6d4b\u5668\u7c7b\u578b\u7684\u503c\uff0c\u4f7f\u7528 <code>read</code> API\u3002</p> <p>\u4e0b\u9762\u7684\u793a\u4f8b\u5c55\u793a\u4e86\u4f7f\u7528\u4e4b\u524d\u4ecb\u7ecd\u7684\u6240\u6709 API \u7684\u7535\u8def\u3002\u540c\u65f6\u5c55\u793a\u4e86 <code>define</code> \u548c\u6807\u51c6 Chisel \u8fde\u63a5\u64cd\u4f5c\u7b26\u7684\u4f7f\u7528\u3002\u4ed4\u7ec6\u4f7f\u7528 <code>dontTouch</code> \u6765\u9632\u6b62\u8de8\u63a2\u6d4b\u5668\u8fdb\u884c\u4f18\u5316\uff0c\u4ee5\u4f7f\u8f93\u51fa\u4e0d\u4f1a\u53d8\u5f97\u8fc7\u4e8e\u7b80\u5355\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3._\nimport chisel3.probe.{Probe, ProbeValue, define, read}\n\nclass Bar extends RawModule {\n  val a_port = IO(Probe(Bool()))\n  val b_port = IO(Output(Probe(Bool())))\n  val a_probe = ProbeValue(Wire(Bool()))\n  val b_probe = ProbeValue(RegInit(false.B))\n\n  define(a_port, a_probe)\n  b_port :&lt;= b_probe // \u4e0e define(b_port, b_probe) \u76f8\u540c\n}\n\nclass Foo extends RawModule {\n  val bar = Module(new Bar)\n\n  private val a_read = dontTouch(WireInit(read(bar.a_port)))\n  private val b_read = dontTouch(WireInit(read(bar.b_port)))\n}\n</code></pre> <p>\u4e0a\u8ff0\u7535\u8def\u7684 SystemVerilog \u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\ncirct.stage.ChiselStage.emitSystemVerilog(\n  new Foo,\n  Array(\"--lower-memories\")\n)\n</code></pre> <p>\u4e0a\u8ff0 SystemVerilog \u4e2d\u6709\u51e0\u70b9\u503c\u5f97\u6ce8\u610f\uff1a</p> <ol> <li> <p>\u7ebf <code>a_read</code> \u548c <code>b_read</code> \u662f\u7531\u6307\u5411\u6a21\u5757 <code>Bar</code> \u5185\u90e8\u7684 \u5c42\u6b21\u540d\u79f0 \u9a71\u52a8\u7684\u3002\u6a21\u5757 <code>Bar</code> \u4e0a \u6ca1\u6709 \u521b\u5efa\u7aef\u53e3\u3002\u8fd9\u6837\u505a\u7684\u76ee\u7684\u662f\u901a\u8fc7\u907f\u514d\u7aef\u53e3\u548c\u8fde\u7ebf\u6765\u51cf\u5c11\u9762\u79ef\u548c\u5ef6\u8fdf\u3002\u7136\u800c\uff0c\u8fd9\u4e0d\u5229\u5730\u5f71\u54cd\u4e86\u751f\u6210\u7684 SystemVerilog \u7684\u53ef\u7406\u89e3\u6027\u3002</p> </li> <li> <p>\u901a\u8fc7\u63a2\u6d4b\u5668\u5b9e\u73b0\u53ef\u89c2\u6d4b\u6027\u662f\u6709\u4ee3\u4ef7\u7684\u3002\u867d\u7136\u4e0a\u9762\u7684\u7535\u8def\u5728\u5176\u7b80\u5355\u6027\u4e0a\u662f\u6709\u4e9b\u4eba\u4e3a\u7684\uff0c\u4f46\u5982\u679c\u786c\u4ef6\u88ab\u63a2\u6d4b\uff0c\u8fd9\u53ef\u80fd\u4f1a\u9650\u5236\u5c06\u786c\u4ef6\u4f18\u5316\u4e3a\u66f4\u7b80\u5355\u5b9e\u73b0\u7684\u80fd\u529b\u3002\u53ea\u8bfb\u63a2\u6d4b\u5668\u5bf9\u4f18\u5316\u548c\u66f4\u6539\u786c\u4ef6\u8c03\u5ea6\u7684\u9650\u5236\u6bd4\u8bfb\u5199\u63a2\u6d4b\u5668\u8981\u5c11\u3002\u7136\u800c\uff0c\u5b83\u4eec\u4ecd\u7136\u6709\u5f71\u54cd\u3002</p> </li> </ol>"},{"location":"chisel_explanation/probes/#_4","title":"\u8bfb\u5199\u63a2\u6d4b\u5668","text":"<p>\u8981\u521b\u5efa\u786c\u4ef6\u503c\u7684\u8bfb\u5199\u63a2\u6d4b\u5668\uff0c\u4f7f\u7528 <code>RWProbeValue</code> API\u3002\u8981\u521b\u5efa\u8bfb\u5199\u63a2\u6d4b\u5668 \u7c7b\u578b\uff0c\u4f7f\u7528 <code>RWProbe</code> API\u3002\u4e0e\u53ea\u8bfb\u63a2\u6d4b\u5668\u4e00\u6837\uff0c\u8bfb\u5199\u63a2\u6d4b\u5668\u662f\u7aef\u53e3\u548c\u7ebf\u7684\u5408\u6cd5\u7c7b\u578b\uff0c\u4f46\u4e0d\u662f\u72b6\u6001\u5143\u7d20\uff08\u4f8b\u5982\uff0c\u5bc4\u5b58\u5668\u6216\u5185\u5b58\uff09\u7684\u5408\u6cd5\u7c7b\u578b\u3002</p> <p>\u4e0e\u53ea\u8bfb\u63a2\u6d4b\u5668\u4e00\u6837\uff0c\u8bfb\u5199\u63a2\u6d4b\u5668\u4f7f\u7528 <code>define</code> API \u6216\u6807\u51c6\u7684 Chisel \u8fde\u63a5\u64cd\u4f5c\u7b26\u8fdb\u884c\u8f6c\u53d1\u3002</p> <p>\u8bfb\u5199\u63a2\u6d4b\u5668\u53ef\u4ee5\u4f7f\u7528\u4e0e\u53ea\u8bfb\u63a2\u6d4b\u5668\u76f8\u540c\u7684 <code>read</code> API \u8fdb\u884c\u8bfb\u53d6\u3002\u63d0\u4f9b\u4e86\u591a\u4e2a\u4e0d\u540c\u7684\u64cd\u4f5c\u6765\u5199\u5165\u8bfb\u5199\u63a2\u6d4b\u5668\u3002<code>force</code> \u548c <code>forceInitial</code> API \u7528\u4e8e\u8986\u5199\u8bfb\u5199\u63a2\u6d4b\u5668\u786c\u4ef6\u7684\u503c\u3002<code>release</code> \u548c <code>releaseInitial</code> API \u7528\u4e8e\u505c\u6b62\u8986\u5199\u8bfb\u5199\u63a2\u6d4b\u5668\u786c\u4ef6\u7684\u503c\u3002</p> <p>:::note</p> <p>\u6240\u6709\u5bf9\u8bfb\u5199\u63a2\u6d4b\u5668\u7684\u5199\u5165\u90fd\u662f\u901a\u8fc7\u4f1a\u8f6c\u6362\u6210 SystemVerilog <code>force</code>/<code>release</code> \u8bed\u53e5\u7684 API \u5b8c\u6210\u7684\uff08\u53c2\u89c1\uff1aSystemVerilog 2023 \u89c4\u8303\u7684\u7b2c 10.6 \u8282\uff09\u3002\u6545\u610f\u4e0d\u5141\u8bb8\u4f7f\u7528\u666e\u901a\u7684 Chisel \u8fde\u63a5\u6765\u5199\u5165\u8bfb\u5199\u63a2\u6d4b\u5668\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u8bfb\u5199\u63a2\u6d4b\u5668 \u4e0d \u53c2\u4e0e\u6700\u540e\u8fde\u63a5\u8bed\u4e49\u3002</p> <p>:::</p> <p>\u4e0b\u9762\u7684\u793a\u4f8b\u5c55\u793a\u4e86\u4f7f\u7528\u4e4b\u524d\u4ecb\u7ecd\u7684\u6240\u6709 API \u7684\u7535\u8def\u3002\u540c\u65f6\u5c55\u793a\u4e86 <code>define</code> \u548c\u6807\u51c6 Chisel \u8fde\u63a5\u64cd\u4f5c\u7b26\u7684\u4f7f\u7528\u3002\u4ed4\u7ec6\u4f7f\u7528 <code>dontTouch</code> \u6765\u9632\u6b62\u8de8\u63a2\u6d4b\u5668\u8fdb\u884c\u4f18\u5316\uff0c\u4ee5\u4f7f\u8f93\u51fa\u4e0d\u4f1a\u53d8\u5f97\u8fc7\u4e8e\u7b80\u5355\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:reset:silent\nimport chisel3._\nimport chisel3.probe.{RWProbe, RWProbeValue, force, forceInitial, read, release, releaseInitial}\n\nclass Bar extends RawModule {\n  val a_port = IO(RWProbe(Bool()))\n  val b_port = IO(RWProbe(UInt(8.W)))\n\n  private val a = WireInit(Bool(), true.B)\n  a_port :&lt;= RWProbeValue(a)\n\n  private val b = WireInit(UInt(8.W), 0.U)\n  b_port :&lt;= RWProbeValue(b)\n}\n\nclass Foo extends Module {\n  val cond = IO(Input(Bool()))\n\n  private val bar = Module(new Bar)\n\n  // Example usage of forceInitial/releaseInitial:\n  forceInitial(bar.a_port, false.B)\n  releaseInitial(bar.a_port)\n\n  // Example usage of force/release:\n  when (cond) {\n    force(bar.b_port, 42.U)\n  }.otherwise {\n    release(bar.b_port)\n  }\n\n  // The read API may still be used:\n  private val a_read = dontTouch(WireInit(read(bar.a_port)))\n}\n</code></pre> <p>\u4e0a\u8ff0\u7535\u8def\u7684 SystemVerilog \u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\ncirct.stage.ChiselStage.emitSystemVerilog(\n  new Foo,\n  Array(\"--throw-on-first-error\"),\n  firtoolOpts = Array(\n    \"-strip-debug-info\",\n    \"-disable-all-randomization\",\n    \"-enable-layers=Verification\",\n    \"-enable-layers=Verification.Assert\",\n    \"-enable-layers=Verification.Assume\",\n    \"-enable-layers=Verification.Cover\"\n  )\n)\n</code></pre> <p>\u5728\u4e0a\u8ff0 SystemVerilog \u4e2d\uff0c\u6709\u51e0\u70b9\u503c\u5f97\u8bc4\u8bba\uff1a</p> <ol> <li> <p>\u53ef\u5199\u6027\u662f\u975e\u5e38\u5177\u6709\u4fb5\u5165\u6027\u7684\u3002\u4e3a\u4e86\u7f16\u8bd1\u4e00\u4e2a\u5199\u63a2\u6d4b\u5668\uff0c\u5fc5\u987b\u963b\u6b62\u5176\u76ee\u6807\u4e0a\u7684\u6240\u6709\u4f18\u5316\uff0c\u5e76\u4e14\u65e0\u6cd5\u8fdb\u884c\u4efb\u4f55\"\u7a7f\u900f\"\u76ee\u6807\u7684\u4f18\u5316\u3002\u8fd9\u662f\u56e0\u4e3a\u5bf9\u8bfb\u5199\u63a2\u6d4b\u5668\u7684\u4efb\u4f55\u5199\u5165\u90fd\u5fc5\u987b\u5f71\u54cd\u4e0b\u6e38\u7528\u6237\u3002</p> </li> <li> <p>\u5199\u5165\u8bfb\u5199\u63a2\u6d4b\u5668\u7684 API\uff08\u4f8b\u5982\uff0c<code>force</code>\uff09\u662f\u975e\u5e38\u5e95\u5c42\u7684\uff0c\u5e76\u4e14\u4e0e SystemVerilog \u7d27\u5bc6\u8026\u5408\u3002\u5728\u4f7f\u7528\u8fd9\u4e9b API \u548c\u9a8c\u8bc1\u751f\u6210\u7684 SystemVerilog \u662f\u5426\u7b26\u5408\u9884\u671f\u65f6\uff0c\u8bf7\u683c\u5916\u5c0f\u5fc3\u3002</p> </li> </ol> <p>:::warning</p> <p>\u5e76\u975e\u6240\u6709\u6a21\u62df\u5668\u90fd\u6b63\u786e\u5b9e\u73b0\u4e86 SystemVerilog \u89c4\u8303\u4e2d\u63cf\u8ff0\u7684\u5f3a\u5236\u548c\u91ca\u653e\uff01\u5728\u4f7f\u7528\u8bfb\u5199\u63a2\u6d4b\u5668\u65f6\u8981\u5c0f\u5fc3\u3002\u4f60\u53ef\u80fd\u9700\u8981\u4f7f\u7528\u7b26\u5408 SystemVerilog \u7684\u6a21\u62df\u5668\u3002</p> <p>:::</p>"},{"location":"chisel_explanation/probes/#verilog-abi","title":"Verilog ABI","text":"<p>\u65e9\u671f\u7684\u793a\u4f8b\u4ec5\u663e\u793a\u63a2\u6d4b\u5668\u5728\u7535\u8def\u5185\u90e8\u7684\u4f7f\u7528\u3002\u7136\u800c\uff0c\u63a2\u6d4b\u5668\u4e5f\u53ef\u4ee5\u7f16\u8bd1\u6210 SystemVerilog\uff0c\u4ee5\u4fbf\u5728\u7535\u8def\u5916\u90e8\u4f7f\u7528\u3002</p> <p>\u8003\u8651\u4ee5\u4e0b\u793a\u4f8b\u7535\u8def\u3002\u5728\u5176\u4e2d\uff0c\u5185\u90e8\u5bc4\u5b58\u5668\u7684\u503c\u901a\u8fc7\u53ea\u8bfb\u63a2\u6d4b\u5668\u66b4\u9732\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:reset:silent\nimport chisel3._\nimport chisel3.probe.{Probe, ProbeValue}\n\nclass Foo extends Module {\n\n  val d = IO(Input(UInt(32.W)))\n  val q = IO(Output(UInt(32.W)))\n  val r_probe = IO(Output(Probe(UInt(32.W))))\n\n  private val r = Reg(UInt(32.W))\n\n  q :&lt;= r\n\n  r_probe :&lt;= ProbeValue(r)\n}\n</code></pre> <p>\u4e0a\u8ff0\u7535\u8def\u7684 SystemVerilog \u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\ncirct.stage.ChiselStage.emitSystemVerilog(\n  new Foo,\n  Array(\"--throw-on-first-error\"),\n  firtoolOpts = Array(\n    \"-strip-debug-info\",\n    \"-disable-all-randomization\",\n    \"-enable-layers=Verification\",\n    \"-enable-layers=Verification.Assert\",\n    \"-enable-layers=Verification.Assume\",\n    \"-enable-layers=Verification.Cover\"\n  )\n)\n</code></pre> <p>\u4f5c\u4e3a\u7f16\u8bd1\u7684\u4e00\u90e8\u5206\uff0c\u9488\u5bf9\u6bcf\u4e2a\u516c\u5171\u6a21\u5757\uff0c\u8fd9\u5c06\u751f\u6210\u4e00\u4e2a\u5177\u6709\u7279\u5b9a\u6587\u4ef6\u540d\u7684\u9644\u52a0\u6587\u4ef6\uff1a<code>ref_&lt;module-name&gt;.sv</code>\u3002\u5728\u8fd9\u4e2a\u6587\u4ef6\u4e2d\uff0c\u5c06\u4e3a\u8be5\u516c\u5171\u6a21\u5757\u7684\u6bcf\u4e2a\u63a2\u6d4b\u5668\u7aef\u53e3\u5b9a\u4e49\u4e00\u4e2a SystemVerilog \u6587\u672c\u5b8f\u3002\u8be5\u5b8f\u7684\u540d\u79f0\u7531\u6a21\u5757\u540d\u548c\u63a2\u6d4b\u5668\u7aef\u53e3\u540d\u6d3e\u751f\u800c\u6765\uff1a<code>ref_&lt;module-name&gt;_&lt;probe-name&gt;</code>\u3002</p> <p>\u4f7f\u7528\u6b64 ABI\uff0c\u53ef\u4ee5\u5728\u5176\u4ed6\u5730\u65b9\u5b9e\u4f8b\u5316\u8be5\u6a21\u5757\uff08\u4f8b\u5982\uff0c\u901a\u8fc7 SystemVerilog \u6d4b\u8bd5\u5e73\u53f0\uff09\u5e76\u8bbf\u95ee\u5176\u88ab\u63a2\u6d4b\u7684\u5185\u90e8\u3002</p> <p>:::info</p> <p>\u6709\u5173\u63a2\u6d4b\u5668\u7aef\u53e3\u964d\u4f4e ABI \u7684\u786e\u5207\u5b9a\u4e49\uff0c\u8bf7\u53c2\u89c1 FIRRTL ABI Specification\u3002</p> <p>:::</p>"},{"location":"chisel_explanation/probes/#_5","title":"\u5c42\u5f69\u8272\u63a2\u6d4b\u5668","text":"<p>\u63a2\u6d4b\u5668\u5141\u8bb8\u8fdb\u884c\u5c42\u5f69\u8272\u5904\u7406\u3002\u5373\uff0c\u8fd9\u662f\u58f0\u660e\u63a2\u6d4b\u5668\u7684\u5b58\u5728\u53d6\u51b3\u4e8e\u7279\u5b9a\u5c42\u662f\u5426\u542f\u7528\u7684\u4e00\u79cd\u673a\u5236\u3002\u8981\u58f0\u660e\u63a2\u6d4b\u5668\u4e3a\u5c42\u5f69\u8272\u7684\uff0c<code>Probe</code> \u6216 <code>RWProbe</code> \u7c7b\u578b\u63a5\u53d7\u4e00\u4e2a\u53ef\u9009\u53c2\u6570\uff0c\u6307\u793a\u5c42\u5f69\u8272\u662f\u4ec0\u4e48\u3002\u4ee5\u4e0b\u793a\u4f8b\u58f0\u660e\u4e86\u4e24\u4e2a\u5177\u6709\u4e0d\u540c\u5c42\u989c\u8272\u7684\u63a2\u6d4b\u5668\u7aef\u53e3\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:reset:silent\nimport chisel3._\nimport chisel3.layer.{Layer, LayerConfig}\nimport chisel3.probe.{Probe, ProbeValue}\n\nobject A extends Layer(LayerConfig.Extract())\nobject B extends Layer(LayerConfig.Extract())\n\nclass Foo extends Module {\n  val a = IO(Output(Probe(Bool(), A)))\n  val b = IO(Output(Probe(UInt(8.W), B)))\n}\n</code></pre> <p>\u6709\u5173\u5c42\u5f69\u8272\u63a2\u6d4b\u5668\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1\u5c42\u6587\u6863\u7684\u76f8\u5173\u5b50\u90e8\u5206\u3002</p>"},{"location":"chisel_explanation/probes/#_6","title":"\u4e3a\u4ec0\u4e48\u4e0d\u5141\u8bb8\u8f93\u5165\u63a2\u6d4b\u5668","text":"<p>\u4e0d\u5141\u8bb8\u8f93\u5165\u63a2\u6d4b\u5668\uff08\u65e0\u8bba\u662f\u53ea\u8bfb\u8fd8\u662f\u8bfb\u5199\u7c7b\u578b\uff09\u3002\u8fd9\u662f\u4e00\u4e2a\u6545\u610f\u7684\u51b3\u5b9a\uff0c\u6e90\u4e8e\u63a2\u6d4b\u5668\u7684\u8981\u6c42\u4ee5\u53ca\u5982\u4f55\u5c06\u63a2\u6d4b\u5668\u7f16\u8bd1\u4e3a SystemVerilog\u3002</p> <p>\u9996\u5148\uff0c\u63a2\u6d4b\u5668\u662f\u5f15\u7528\u3002\u5b83\u4eec\u5f15\u7528\u67d0\u5904\u5b58\u5728\u7684\u786c\u4ef6\u3002\u5b83\u4eec\u4e0d\u662f\u786c\u4ef6\u7ebf\u3002\u5b83\u4eec\u4e0d\u662f\"\u5f71\u5b50\"\u7aef\u53e3\u3002\u5b83\u4eec\u4e0d\u4ee3\u8868\"\u5f71\u5b50\"\u6570\u636e\u6d41\u3002</p> <p>\u5176\u6b21\uff0c\u63a2\u6d4b\u5668\u603b\u662f\u6709\u4e24\u4e2a\u90e8\u5206\uff1a\u5b9e\u9645\u88ab\u63a2\u6d4b\u7684\u786c\u4ef6\u548c\u4f7f\u7528\u5f15\u7528\u88ab\u63a2\u6d4b\u786c\u4ef6\u7684\u64cd\u4f5c\u3002\u4f7f\u7528\u63a2\u6d4b\u5668\u7684\u64cd\u4f5c\u5fc5\u987b\u5728\u5176\u7279\u5b9a\u4f4d\u7f6e\u80fd\u591f\u660e\u786e\u5730\u5f15\u7528\u88ab\u63a2\u6d4b\u7684\u786c\u4ef6\u3002\u6b63\u5982\u4e0b\u9762\u7684\u793a\u4f8b\u6240\u793a\uff0c\u8f93\u5165\u63a2\u6d4b\u5668\u5728\u8fd9\u65b9\u9762\u662f\u6709\u95ee\u9898\u7684\u3002</p> <p>\u8003\u8651\u4ee5\u4e0b\u4f7f\u7528\u5047\u8bbe\u8f93\u5165\u63a2\u6d4b\u5668\u7684\u975e\u6cd5 Chisel\uff1a</p> <pre><code>import chisel3._\nimport chisel3.probe.{Probe, ProbeValue, read}\n\nmodule Baz extends RawModule {\n  val probe = IO(Input(Probe(Bool())))\n\n  val b = WireInit(read(probe))\n}\n\nmodule Bar extends RawModule {\n  val probe = IO(Input(Probe(Bool())))\n\n  val baz = Module(new Baz)\n  baz.probe :&lt;= probe\n\n}\n\nmodule Foo extends RawModule {\n\n  val w = Wire(Bool())\n\n  val bar = Module(new Bar)\n  bar.probe :&lt;= ProbeValue(w)\n}\n</code></pre> <p>\u8fd9\u53ef\u4ee5\u7f16\u8bd1\u6210\u4ee5\u4e0b SystemVerilog\uff1a</p> <pre><code>module Baz();\n\n  wire b = Foo.a;\n\nendmodule\n\nmodule Bar();\n\n  Baz baz();\n\nendmodule\n\nmodule Foo();\n\n  wire a;\n\n  Bar bar();\n\nendmodule\n</code></pre> <p>SystemVerilog \u63d0\u4f9b\u4e86\u4e00\u79cd\u89e3\u6790 \u5411\u4e0a \u5c42\u6b21\u540d\u79f0\u7684\u7b97\u6cd5\uff08\u53c2\u89c1\uff1aSystemVerilog 2023 \u89c4\u8303\u7684\u7b2c 23.8 \u8282\uff09\u3002\u8fd9\u901a\u8fc7\u5728\u5f53\u524d\u4f5c\u7528\u57df\u4e2d\u67e5\u627e\u540d\u79f0\u7684\u6839\uff08<code>Foo</code>\uff09\u5e76\u5728\u5931\u8d25\u65f6\u5411\u4e0a\u79fb\u52a8\u4e00\u4e2a\u7ea7\u522b\u5e76\u5c1d\u8bd5\u67e5\u627e\u6765\u5de5\u4f5c\u3002\u7136\u540e\uff0c\u8fd9\u5c06\u91cd\u590d\uff0c\u76f4\u5230\u627e\u5230\u540d\u79f0\uff08\u6216\u5728\u5230\u8fbe\u7535\u8def\u9876\u90e8\u65f6\u51fa\u9519\uff09\u3002\u7136\u800c\uff0c\u8be5\u7b97\u6cd5\u5bf9\u4e2d\u4ecb\u6a21\u5757\u65bd\u52a0\u4e86\u4e25\u683c\u7684\u547d\u540d\u9650\u5236\u3002\u4f8b\u5982\uff0c\u5728\u4e0a\u8ff0\u793a\u4f8b\u4e2d\uff0c<code>Foo</code> \u8fd9\u4e2a\u540d\u79f0\u4e0d\u80fd\u5728 <code>Baz</code> \u4e2d\u6216\u5728 <code>Baz</code> \u548c <code>Foo</code> \u4e4b\u95f4\u7684 \u4e2d\u4ecb \u6a21\u5757\u4e2d\u5b58\u5728\u3002\u8fd9\u5f88\u5bb9\u6613\u4e0e\u65e0\u6cd5\u66f4\u6539\u7684\u540d\u79f0\u53d1\u751f\u51b2\u7a81\uff0c\u4f8b\u5982\u516c\u5171\u6a21\u5757\u6216\u516c\u5171\u6a21\u5757\u7aef\u53e3\u3002</p> <p>\u6b64\u5916\uff0c\u4efb\u4f55\u4f7f\u7528\u89e3\u6790\u5411\u4e0a\u5c42\u6b21\u540d\u79f0\u7684\u6a21\u5757\u90fd\u9650\u5236\u4e86\u5176\u81ea\u7531\u5b9e\u4f8b\u5316\u7684\u80fd\u529b\u3002\u5728\u4e0a\u9762\u7684\u7535\u8def\u4e2d\uff0c<code>Baz</code> \u662f\u5355\u5b9e\u4f8b\u5316\u7684\u3002\u7136\u800c\uff0c\u5982\u679c <code>Baz</code> \u88ab\u591a\u6b21\u5b9e\u4f8b\u5316\uff0c\u5219\u53ef\u4ee5\u7ed9\u5b83\u4e24\u4e2a\u4e0d\u540c\u7684\u8f93\u5165\u63a2\u6d4b\u5668\u3002\u8fd9\u5c06\u610f\u5473\u7740 <code>Baz</code> \u4e0d\u80fd\u88ab\u7f16\u8bd1\u6210\u5355\u4e2a Verilog \u6a21\u5757\u3002\u5b83\u5fc5\u987b\u9488\u5bf9\u6bcf\u4e2a\u552f\u4e00\u7684\u5c42\u6b21\u540d\u79f0\u800c\u91cd\u590d\u3002\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7ea7\u8054\u7684\u91cd\u590d\u6548\u5e94\uff0c\u7236\u6a21\u5757\u3001\u7956\u7236\u6a21\u5757\u7b49\u4e5f\u5fc5\u987b\u88ab\u91cd\u590d\u3002\u8fd9\u79cd\u4e0d\u53ef\u9884\u6d4b\u6027\u88ab\u7528\u6237\u89c6\u4e3a\u4e0d\u53ef\u63a5\u53d7\u3002</p> <p>\u7531\u4e8e\u8fd9\u4e9b\u9650\u5236\uff08\u5bf9\u4e2d\u4ecb\u6a21\u5757\u540d\u79f0\u7684\u9650\u5236\u548c\u4e3a\u4e86\u89e3\u6790\u5c42\u6b21\u540d\u79f0\u800c\u8fdb\u884c\u7684\u91cd\u590d\uff09\uff0c\u8f93\u5165\u63a2\u6d4b\u5668\u7684\u4f7f\u7528\u88ab\u8ba4\u4e3a\u662f\u6709\u95ee\u9898\u7684\u3002\u5c3d\u7ba1\u5b83\u4eec\u53ef\u4ee5\u88ab\u7f16\u8bd1\uff0c\u4f46\u7ed3\u679c\u5c06\u662f\u4e0d\u53ef\u9884\u6d4b\u7684\uff0c\u5e76\u4e14\u5f53\u51fa\u73b0\u95ee\u9898\u65f6\uff0c\u7528\u6237\u5f88\u96be\u8c03\u8bd5\u3002</p> <p>\u56e0\u6b64\uff0c\u8f93\u5165\u63a2\u6d4b\u5668\u4f5c\u4e3a\u8bbe\u8ba1\u70b9\u88ab\u62d2\u7edd\uff0c\u5e76\u4e14\u4e0d\u8ba1\u5212\u5b9e\u73b0\u3002</p>"},{"location":"chisel_explanation/probes/#boringutils","title":"BoringUtils","text":"<p>\u63a2\u6d4b\u5668\u6545\u610f\u662f\u4e00\u4e2a\u5e95\u5c42 API\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4e00\u4e2a\u8bbe\u8ba1\u9700\u8981\u66b4\u9732\u4e00\u4e2a\u63a2\u6d4b\u5668\u7aef\u53e3\uff0c\u5b83\u53ef\u80fd\u9700\u8981\u5411\u5176\u4e0e\u88ab\u63a2\u6d4b\u503c\u4e4b\u95f4\u7684\u6240\u6709\u4e2d\u4ecb\u6a21\u5757\u6dfb\u52a0\u63a2\u6d4b\u5668\u7aef\u53e3\u3002</p> <p>\u6709\u5173\u66f4\u7075\u6d3b\u7684 API\uff0c\u8bf7\u8003\u8651\u4f7f\u7528 <code>chisel3.util.experimental.BoringUtils</code>\u3002\u8fd9\u63d0\u4f9b\u4e86\u66f4\u9ad8\u7ea7\u7684 API\uff0c\u81ea\u52a8\u4e3a\u7528\u6237\u521b\u5efa\u63a2\u6d4b\u5668\u7aef\u53e3\uff1a</p> <ul> <li><code>rwTap</code>\uff1a\u521b\u5efa\u4fe1\u53f7\u7684\u8bfb\u5199\u63a2\u6d4b\u5668\u5e76\u5c06\u5176\u8def\u7531\u5230\u8c03\u7528\u4f4d\u7f6e</li> <li><code>tap</code>\uff1a\u521b\u5efa\u4fe1\u53f7\u7684\u8bfb\u63a2\u6d4b\u5668\u5e76\u5c06\u5176\u8def\u7531\u5230\u8c03\u7528\u4f4d\u7f6e</li> <li><code>tapAndRead</code>\uff1a\u521b\u5efa\u4fe1\u53f7\u7684\u8bfb\u63a2\u6d4b\u5668\uff0c\u5c06\u5176\u8def\u7531\u5230\u8c03\u7528\u4f4d\u7f6e\uff0c\u5e76\u8bfb\u53d6\u5b83\uff08\u4ece\u63a2\u6d4b\u5668\u8f6c\u6362\u4e3a\u771f\u5b9e\u786c\u4ef6\uff09</li> </ul> <p>\u4f8b\u5982\uff0c\u8003\u8651\u6700\u521d\u4e3a\u53ea\u8bfb\u63a2\u6d4b\u5668\u663e\u793a\u7684\u539f\u59cb\u793a\u4f8b\u3002\u8fd9\u53ef\u4ee5\u4f7f\u7528 <code>BoringUtils</code> \u91cd\u5199\u5f97\u66f4\u7b80\u6d01\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:reset:silent\nimport chisel3._\nimport chisel3.util.experimental.BoringUtils\n\nclass Bar extends RawModule {\n  val a = dontTouch(WireInit(Bool(), true.B))\n}\n\nclass Foo extends RawModule {\n\n  private val bar = Module(new Bar)\n\n  private val a_read = dontTouch(WireInit(BoringUtils.tapAndRead(bar.a)))\n}\n</code></pre> <p>\u4e0a\u8ff0\u7535\u8def\u7684 SystemVerilog \u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:verilog\ncirct.stage.ChiselStage.emitSystemVerilog(\n  new Foo,\n  firtoolOpts = Array(\n    \"-strip-debug-info\",\n    \"-disable-all-randomization\",\n    \"-enable-layers=Verification\",\n    \"-enable-layers=Verification.Assert\",\n    \"-enable-layers=Verification.Assume\",\n    \"-enable-layers=Verification.Cover\"\n  )\n)\n</code></pre> <p>\u4e3a\u4e86\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u5b83\u8981\u6c42\u88ab\u63a2\u6d4b\u7684\u76ee\u6807\u5728 Scala \u7684\u89d2\u5ea6\u662f\u516c\u5171\u7684\u3002</p> <p>:::note</p> <p><code>BoringUtils</code> \u4ec5\u9002\u5408\u5728 \u4e00\u4e2a\u7f16\u8bd1\u5355\u5143\u5185 \u4f7f\u7528\u3002\u6b64\u5916\uff0c\u8fc7\u5ea6\u4f7f\u7528 <code>BoringUtils</code> \u53ef\u80fd\u5bfc\u81f4\u975e\u5e38\u6df7\u4e71\u7684\u786c\u4ef6\u751f\u6210\u5668\uff0c\u5176\u4e2d\u7aef\u53e3\u7ea7\u63a5\u53e3\u662f\u4e0d\u53ef\u9884\u6d4b\u7684\u3002</p> <p>:::</p> <p>\u5982\u679c\u5728\u53ef\u80fd\u521b\u5efa\u8f93\u5165\u63a2\u6d4b\u5668\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528 <code>BoringUtils</code> API\uff0c\u5b83\u5c06\u521b\u5efa\u4e00\u4e2a\u975e\u63a2\u6d4b\u5668\u8f93\u5165\u7aef\u53e3\u3002</p>"},{"location":"chisel_explanation/properties/","title":"\u5c5e\u6027","text":"<p>Chisel \u5c5e\u6027 \u8868\u793a\u8bbe\u8ba1\u4e2d\u975e\u786c\u4ef6\u7684\u4fe1\u606f\u3002\u8fd9\u5bf9\u4e8e\u5728\u540c\u4e00\u751f\u6210\u5668\u4e2d\u6355\u83b7\u9886\u57df\u7279\u5b9a\u77e5\u8bc6\u548c\u8bbe\u8ba1\u610f\u56fe\uff0c\u5e76\u4e0e\u786c\u4ef6\u63cf\u8ff0\u4e00\u8d77\u4f7f\u7528\u975e\u5e38\u6709\u7528\u3002</p> <p>Warning</p> <p>\u5c5e\u6027\u529f\u80fd\u6b63\u5728\u79ef\u6781\u5f00\u53d1\u4e2d\uff0c\u5c1a\u672a\u88ab\u89c6\u4e3a\u7a33\u5b9a\u3002</p>"},{"location":"chisel_explanation/properties/#_2","title":"\u5c5e\u6027\u7c7b\u578b","text":"<p>\u4f7f\u7528\u5c5e\u6027\u7684\u6838\u5fc3\u539f\u8bed\u662f <code>Property</code> \u7c7b\u578b\u3002</p> <p><code>Property</code> \u7c7b\u578b\u7684\u5de5\u4f5c\u65b9\u5f0f\u7c7b\u4f3c\u4e8e\u5176\u4ed6 Chisel \u6570\u636e\u7c7b\u578b\uff0c\u4f46\u4e0e\u6307\u5b9a\u7535\u8def\u4e2d\u72b6\u6001\u5143\u7d20\u6216\u6d41\u7ecf\u7535\u8def\u7684\u7ebf\u4e0a\u7684\u503c\u7c7b\u578b\u4e0d\u540c\uff0c\u5c5e\u6027\u6c38\u8fdc\u4e0d\u4f1a\u6d41\u7ecf\u6216\u5f71\u54cd\u751f\u6210\u7684\u786c\u4ef6\u3002\u76f8\u53cd\uff0c\u5b83\u4eec\u4f5c\u4e3a\u53ef\u4ee5\u8fde\u63a5\u7684\u7aef\u53e3\u5728\u5c42\u6b21\u7ed3\u6784\u4e2d\u6d41\u52a8\u3002</p> <p><code>Property</code> \u7c7b\u578b\u7684\u6709\u7528\u4e4b\u5904\u5728\u4e8e\u5b83\u4eec\u80fd\u591f\u8868\u8fbe\u751f\u6210\u7684\u5c42\u6b21\u7ed3\u6784\u4e2d\u5b58\u5728\u7684\u975e\u786c\u4ef6\u4fe1\u606f\uff0c\u5e76\u4e14\u53ef\u4ee5\u7ec4\u5408\u4ee5\u521b\u5efa\u4e0e\u8bbe\u8ba1\u7d27\u5bc6\u8026\u5408\u7684\u7279\u5b9a\u9886\u57df\u6570\u636e\u6a21\u578b\u3002\u5177\u6709 <code>Property</code> \u7c7b\u578b\u7684\u8f93\u5165\u7aef\u53e3\u8868\u793a\u5728\u5b9e\u4f8b\u5316\u5176\u6a21\u5757\u65f6\u5fc5\u987b\u63d0\u4f9b\u7684\u6570\u636e\u6a21\u578b\u7684\u4e00\u90e8\u5206\u3002\u5177\u6709 <code>Property</code> \u7c7b\u578b\u7684\u8f93\u51fa\u7aef\u53e3\u8868\u793a\u5728\u5b9e\u4f8b\u5316\u5176\u6a21\u5757\u65f6\u53ef\u4ee5\u8bbf\u95ee\u7684\u6570\u636e\u6a21\u578b\u7684\u4e00\u90e8\u5206\u3002\u968f\u7740\u5b8c\u6574\u8bbe\u8ba1\u7684\u751f\u6210\uff0c\u53ef\u4ee5\u540c\u65f6\u751f\u6210\u4efb\u610f\u6570\u636e\u6a21\u578b\u3002</p> <p>\u4ee5\u4e0b\u662f\u5408\u6cd5\u7684 <code>Property</code> \u7c7b\u578b\uff1a</p> <ul> <li><code>Property[Int]</code></li> <li><code>Property[Long]</code></li> <li><code>Property[BigInt]</code></li> <li><code>Property[String]</code></li> <li><code>Property[Boolean]</code></li> <li><code>Property[Seq[A]]</code> (\u5176\u4e2d <code>A</code> \u672c\u8eab\u662f\u4e00\u4e2a <code>Property</code>)</li> </ul>"},{"location":"chisel_explanation/properties/#_3","title":"\u4f7f\u7528\u5c5e\u6027","text":"<p>\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u5bfc\u5165\u8bed\u53e5\u4f7f\u7528 <code>Property</code> \u529f\u80fd\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3._\nimport chisel3.properties.Property\n</code></pre> <p>\u4e0b\u9762\u7684\u5c0f\u8282\u5c55\u793a\u4e86\u5728\u5404\u79cd Chisel \u6784\u9020\u4e2d\u4f7f\u7528 <code>Property</code> \u7c7b\u578b\u7684\u793a\u4f8b\u3002</p>"},{"location":"chisel_explanation/properties/#_4","title":"\u5c5e\u6027\u7aef\u53e3","text":"<p>\u5408\u6cd5\u7684 <code>Property</code> \u7c7b\u578b\u53ef\u4ee5\u7528\u5728\u7aef\u53e3\u4e2d\u3002\u4f8b\u5982\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass PortsExample extends RawModule {\n  // \u4e00\u4e2a Int Property \u7c7b\u578b\u7684\u7aef\u53e3\n  val myPort = IO(Input(Property[Int]()))\n}\n</code></pre>"},{"location":"chisel_explanation/properties/#_5","title":"\u5c5e\u6027\u8fde\u63a5","text":"<p>\u5408\u6cd5\u7684 <code>Property</code> \u7c7b\u578b\u53ef\u4ee5\u4f7f\u7528 <code>:=</code> \u8fd0\u7b97\u7b26\u8fdb\u884c\u8fde\u63a5\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u8f93\u5165 <code>Property</code> \u7c7b\u578b\u7684\u7aef\u53e3\u53ef\u4ee5\u8fde\u63a5\u5230\u4e00\u4e2a\u8f93\u51fa <code>Property</code> \u7c7b\u578b\u7684\u7aef\u53e3\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass ConnectExample extends RawModule {\n  val inPort = IO(Input(Property[Int]()))\n  val outPort = IO(Output(Property[Int]()))\n  outPort := inPort\n}\n</code></pre> <p>\u8fde\u63a5\u53ea\u652f\u6301\u76f8\u540c\u7684 <code>Property</code> \u7c7b\u578b\u4e4b\u95f4\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a <code>Property[Int]</code> \u53ea\u80fd\u8fde\u63a5\u5230\u4e00\u4e2a <code>Property[Int]</code>\u3002\u8fd9\u7531 Scala \u7f16\u8bd1\u5668\u5f3a\u5236\u6267\u884c\u3002</p>"},{"location":"chisel_explanation/properties/#_6","title":"\u5c5e\u6027\u503c","text":"<p>\u5408\u6cd5\u7684 <code>Property</code> \u7c7b\u578b\u53ef\u4ee5\u901a\u8fc7\u5c06 <code>Property</code> \u5bf9\u8c61\u5e94\u7528\u4e8e <code>Property</code> \u7c7b\u578b\u7684\u503c\u6765\u6784\u9020\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a <code>Property</code> \u503c\u53ef\u4ee5\u8fde\u63a5\u5230\u4e00\u4e2a\u8f93\u51fa <code>Property</code> \u7c7b\u578b\u7684\u7aef\u53e3\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass LiteralExample extends RawModule {\n  val outPort = IO(Output(Property[Int]()))\n  outPort := Property(123)\n}\n</code></pre>"},{"location":"chisel_explanation/properties/#_7","title":"\u5c5e\u6027\u5e8f\u5217","text":"<p>\u4e0e\u539f\u59cb <code>Property</code> \u7c7b\u578b\u7c7b\u4f3c\uff0c<code>Properties</code> \u7684\u5e8f\u5217\u4e5f\u53ef\u4ee5\u7528\u4e8e\u521b\u5efa\u7aef\u53e3\u548c\u503c\uff0c\u5b83\u4eec\u4e5f\u53ef\u4ee5\u88ab\u8fde\u63a5\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass SequenceExample extends RawModule {\n  val inPort = IO(Input(Property[Int]()))\n  val outPort1 = IO(Output(Property[Seq[Int]]()))\n  val outPort2 = IO(Output(Property[Seq[Int]]()))\n  // \u5b57\u9762\u503c\u5e8f\u5217\u53ef\u4ee5\u8f6c\u6362\u4e3a Property\n  outPort1 := Property(Seq(123, 456))\n  // Property \u7aef\u53e3\u548c\u5b57\u9762\u503c\u53ef\u4ee5\u6df7\u5408\u5728\u4e00\u8d77\u5f62\u6210\u5e8f\u5217\n  outPort2 := Property(Seq(inPort, Property(789)))\n}\n</code></pre>"},{"location":"chisel_explanation/properties/#_8","title":"\u5c5e\u6027\u8868\u8fbe\u5f0f","text":"<p>\u5bf9\u4e8e\u67d0\u4e9b <code>Property</code> \u7c7b\u578b\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>Property</code> \u503c\u6784\u5efa\u8868\u8fbe\u5f0f\u3002\u8fd9\u5bf9\u4e8e\u8868\u8fbe\u7531\u8f93\u5165 <code>Property</code> \u503c\u53c2\u6570\u5316\u7684\u8bbe\u8ba1\u610f\u56fe\u5f88\u6709\u7528\u3002</p>"},{"location":"chisel_explanation/properties/#_9","title":"\u6574\u6570\u8fd0\u7b97","text":"<p>\u6574\u6570 <code>Property</code> \u7c7b\u578b\uff0c\u5982 <code>Property[Int]</code>\u3001<code>Property[Long]</code> \u548c <code>Property[BigInt]</code>\uff0c\u53ef\u4ee5\u7528\u4e8e\u6839\u636e <code>Property</code> \u503c\u6784\u5efa\u7b97\u672f\u8868\u8fbe\u5f0f\u3002</p> <p>\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c<code>Property[Int]</code> \u7c7b\u578b\u7684\u8f93\u51fa <code>address</code> \u7aef\u53e3\u901a\u8fc7\u5c06 <code>offset</code> <code>Property[Int]</code> \u503c\u76f8\u5bf9\u4e8e\u8f93\u5165 <code>base</code> <code>Property[Int]</code> \u503c\u76f8\u52a0\u6765\u8ba1\u7b97\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass IntegerArithmeticExample extends RawModule {\n  val base = IO(Input(Property[Int]()))\n  val address = IO(Output(Property[Int]()))\n  val offset = Property(1024)\n  address := base + offset\n}\n</code></pre> <p>\u4e0b\u8868\u5217\u51fa\u4e86\u5728\u6574\u578b <code>Property</code> \u7c7b\u578b\u503c\u4e0a\u652f\u6301\u7684\u7b97\u672f\u8fd0\u7b97\u7b26\u3002</p> \u8fd0\u7b97\u7b26 \u63cf\u8ff0 <code>+</code> \u6267\u884c\u52a0\u6cd5\uff0c\u5982 FIRRTL \u89c4\u8303\u7684\u6574\u6570\u52a0\u6cd5\u8fd0\u7b97\u90e8\u5206\u6240\u5b9a\u4e49 <code>*</code> \u6267\u884c\u4e58\u6cd5\uff0c\u5982 FIRRTL \u89c4\u8303\u7684\u6574\u6570\u4e58\u6cd5\u8fd0\u7b97\u90e8\u5206\u6240\u5b9a\u4e49 <code>&gt;&gt;</code> \u6267\u884c\u53f3\u79fb\uff0c\u5982 FIRRTL \u89c4\u8303\u7684\u6574\u6570\u53f3\u79fb\u8fd0\u7b97\u90e8\u5206\u6240\u5b9a\u4e49 <code>&lt;&lt;</code> \u6267\u884c\u5de6\u79fb\uff0c\u5982 FIRRTL \u89c4\u8303\u7684\u6574\u6570\u5de6\u79fb\u8fd0\u7b97\u90e8\u5206\u6240\u5b9a\u4e49"},{"location":"chisel_explanation/properties/#_10","title":"\u5e8f\u5217\u8fd0\u7b97","text":"<p>\u5e8f\u5217 <code>Property</code> \u7c7b\u578b\uff0c\u5982 <code>Property[Seq[Int]]</code>\uff0c\u652f\u6301\u4e00\u4e9b\u57fa\u672c\u64cd\u4f5c\u6765\u4ece\u73b0\u6709\u5e8f\u5217\u521b\u5efa\u65b0\u5e8f\u5217\u3002</p> <p>\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c<code>Property[Seq[Int]]</code> \u7c7b\u578b\u7684\u8f93\u51fa <code>c</code> \u7aef\u53e3\u662f\u901a\u8fc7\u8fde\u63a5 <code>Property[Seq[Int]]</code> \u7c7b\u578b\u7684 <code>a</code> \u548c <code>b</code> \u7aef\u53e3\u8ba1\u7b97\u5f97\u51fa\u7684\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass SequenceOperationExample extends RawModule {\n  val a = IO(Input(Property[Seq[Int]]()))\n  val b = IO(Input(Property[Seq[Int]]()))\n  val c = IO(Output(Property[Seq[Int]]()))\n  c := a ++ b\n}\n</code></pre> <p>\u4e0b\u8868\u5217\u51fa\u4e86\u5728\u5e8f\u5217 <code>Property</code> \u7c7b\u578b\u503c\u4e0a\u652f\u6301\u7684\u5e8f\u5217\u8fd0\u7b97\u7b26\u3002</p> \u8fd0\u7b97\u7b26 \u63cf\u8ff0 <code>++</code> \u6267\u884c\u8fde\u63a5\u64cd\u4f5c\uff0c\u5982 FIRRTL \u89c4\u8303\u7684\u5217\u8868\u8fde\u63a5\u8fd0\u7b97\u90e8\u5206\u6240\u5b9a\u4e49"},{"location":"chisel_explanation/properties/#_11","title":"\u7c7b\u548c\u5bf9\u8c61","text":"<p>\u5bf9\u4e8e <code>Property</code> \u7c7b\u578b\u6765\u8bf4\uff0c\u7c7b\u548c\u5bf9\u8c61\u5c31\u50cf\u6a21\u5757\u548c\u5b9e\u4f8b\u5bf9\u4e8e\u786c\u4ef6\u7c7b\u578b\u4e00\u6837\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u4eec\u63d0\u4f9b\u4e86\u4e00\u79cd\u58f0\u660e\u5c42\u6b21\u7ed3\u6784\u7684\u65b9\u5f0f\uff0c\u901a\u8fc7\u8fd9\u4e9b\u5c42\u6b21\u7ed3\u6784\u53ef\u4ee5\u6d41\u52a8 <code>Property</code> \u7c7b\u578b\u7684\u503c\u3002<code>Class</code> \u58f0\u660e\u4e86\u4e00\u4e2a\u5c42\u6b21\u5bb9\u5668\uff0c\u5177\u6709\u8f93\u5165\u548c\u8f93\u51fa <code>Property</code> \u7aef\u53e3\uff0c\u4ee5\u53ca\u5305\u542b <code>Property</code> \u8fde\u63a5\u548c <code>Object</code> \u7684\u4e3b\u4f53\u3002<code>Object</code> \u8868\u793a <code>Class</code> \u7684\u5b9e\u4f8b\u5316\uff0c\u5b83\u8981\u6c42\u5fc5\u987b\u5206\u914d\u4efb\u4f55\u8f93\u5165 <code>Property</code> \u7aef\u53e3\uff0c\u5e76\u5141\u8bb8\u8bfb\u53d6\u4efb\u4f55\u8f93\u51fa <code>Property</code> \u7aef\u53e3\u3002</p> <p>\u8fd9\u5141\u8bb8\u4f7f\u7528\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u8bed\u8a00\u7684\u57fa\u672c\u539f\u8bed\u6765\u6784\u5efa\u7279\u5b9a\u9886\u57df\u7684\u6570\u636e\u6a21\u578b\uff0c\u5e76\u5c06\u5176\u76f4\u63a5\u5d4c\u5165\u5230 Chisel \u6b63\u5728\u6784\u5efa\u7684\u5b9e\u4f8b\u56fe\u4e2d\u3002\u76f4\u89c2\u5730\u8bf4\uff0c<code>Class</code> \u7684\u8f93\u5165\u5c31\u50cf\u6784\u9020\u51fd\u6570\u53c2\u6570\uff0c\u5728\u521b\u5efa <code>Object</code> \u65f6\u5fc5\u987b\u63d0\u4f9b\u3002\u7c7b\u4f3c\u5730\uff0c<code>Class</code> \u7684\u8f93\u51fa\u5c31\u50cf\u5b57\u6bb5\uff0c\u53ef\u4ee5\u4ece <code>Object</code> \u8bbf\u95ee\u3002\u8fd9\u79cd\u5206\u79bb\u5141\u8bb8 <code>Class</code> \u58f0\u660e\u62bd\u8c61\u51fa\u5176\u4e3b\u4f53\u4e2d\u521b\u5efa\u7684\u4efb\u4f55 <code>Object</code> - \u4ece\u5916\u90e8\u6765\u770b\uff0c\u5fc5\u987b\u63d0\u4f9b\u8f93\u5165\uff0c\u5e76\u4e14\u53ea\u80fd\u8bbf\u95ee\u8f93\u51fa\u3002</p> <p>\u7531 <code>Class</code> \u58f0\u660e\u548c <code>Object</code> \u5b9e\u4f8b\u5316\u8868\u793a\u7684\u56fe\u4e0e\u786c\u4ef6\u5b9e\u4f8b\u56fe\u5171\u5b58\u3002<code>Object</code> \u5b9e\u4f8b\u53ef\u4ee5\u5b58\u5728\u4e8e\u786c\u4ef6\u6a21\u5757\u4e2d\uff0c\u63d0\u4f9b\u7279\u5b9a\u9886\u57df\u7684\u4fe1\u606f\uff0c\u4f46\u786c\u4ef6\u5b9e\u4f8b\u4e0d\u80fd\u5b58\u5728\u4e8e <code>Class</code> \u58f0\u660e\u4e2d\u3002</p> <p><code>Object</code> \u53ef\u4ee5\u88ab\u5f15\u7528\uff0c\u5bf9 <code>Object</code> \u7684\u5f15\u7528\u662f\u4e00\u79cd\u7279\u6b8a\u7684 <code>Property[ClassType]</code> \u7c7b\u578b\u3002\u8fd9\u5141\u8bb8\u7531 <code>Class</code> \u58f0\u660e\u548c <code>Object</code> \u5b9e\u4f8b\u6355\u83b7\u7684\u6570\u636e\u6a21\u578b\u5f62\u6210\u4efb\u610f\u56fe\u3002</p> <p>\u4e3a\u4e86\u7406\u89e3 <code>Object</code> \u56fe\u662f\u5982\u4f55\u8868\u793a\u7684\uff0c\u4ee5\u53ca\u6700\u7ec8\u5982\u4f55\u88ab\u67e5\u8be2\uff0c\u8003\u8651\u4e00\u4e0b\u786c\u4ef6\u5b9e\u4f8b\u56fe\u662f\u5982\u4f55\u5c55\u5f00\u7684\u3002\u4e3a\u4e86\u6784\u5efa <code>Object</code> \u56fe\uff0c\u6211\u4eec\u9996\u5148\u9009\u62e9\u4e00\u4e2a\u5165\u53e3\u6a21\u5757\u6765\u5f00\u59cb\u5c55\u5f00\u3002\u5c55\u5f00\u8fc7\u7a0b\u6309\u7167 Verilog \u89c4\u8303\u5bf9\u5c55\u5f00\u7684\u5b9a\u4e49\u8fdb\u884c\u5de5\u4f5c - \u6a21\u5757\u548c <code>Object</code> \u7684\u5b9e\u4f8b\u5728\u5185\u5b58\u4e2d\u5b9e\u4f8b\u5316\uff0c\u8fde\u63a5\u5230\u5b83\u4eec\u7684\u8f93\u5165\u548c\u8f93\u51fa\u3002\u8f93\u5165\u88ab\u63d0\u4f9b\uff0c\u8f93\u51fa\u53ef\u4ee5\u88ab\u8bfb\u53d6\u3002\u5c55\u5f00\u5b8c\u6210\u540e\uff0c<code>Object</code> \u56fe\u901a\u8fc7\u8f93\u51fa\u7aef\u53e3\u66b4\u9732\uff0c\u8fd9\u4e9b\u7aef\u53e3\u53ef\u4ee5\u5305\u542b\u4efb\u4f55 <code>Property</code> \u7c7b\u578b\uff0c\u5305\u62ec\u5bf9 <code>Object</code> \u7684\u5f15\u7528\u3002</p> <p>\u4e3a\u4e86\u8bf4\u660e\u8fd9\u4e9b\u90e8\u5206\u662f\u5982\u4f55\u7ed3\u5408\u5728\u4e00\u8d77\u7684\uff0c\u8003\u8651\u4ee5\u4e0b\u793a\u4f8b\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3.properties.Class\nimport chisel3.experimental.hierarchy.{instantiable, public, Definition, Instance}\n\n// An abstract description of a CSR, represented as a Class.\n@instantiable\nclass CSRDescription extends Class {\n  // An output Property indicating the CSR name.\n  val identifier = IO(Output(Property[String]()))\n  // An output Property describing the CSR.\n  val description = IO(Output(Property[String]()))\n  // An output Property indicating the CSR width.\n  val width = IO(Output(Property[Int]()))\n\n  // Input Properties to be passed to Objects representing instances of the Class.\n  @public val identifierIn = IO(Input(Property[String]()))\n  @public val descriptionIn = IO(Input(Property[String]()))\n  @public val widthIn = IO(Input(Property[Int]()))\n\n  // Simply connect the inputs to the outputs to expose the values.\n  identifier := identifierIn\n  description := descriptionIn\n  width := widthIn\n}\n</code></pre> <p><code>CSRDescription</code> \u662f\u4e00\u4e2a <code>Class</code>\uff0c\u5b83\u8868\u793a\u6709\u5173 CSR \u7684\u9886\u57df\u7279\u5b9a\u4fe1\u606f\u3002\u5b83\u4f7f\u7528 <code>@instantiable</code> \u548c <code>@public</code> \u4ee5\u4fbf <code>Class</code> \u53ef\u4ee5\u4e0e <code>Definition</code> \u548c <code>Instance</code> API \u4e00\u8d77\u4f7f\u7528\u3002</p> <p>\u6211\u4eec\u5e0c\u671b\u5728 <code>CSRDescription</code> \u7c7b\u7684 <code>Object</code> \u4e0a\u516c\u5f00\u7684\u53ef\u8bfb\u5b57\u6bb5\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u6807\u8bc6\u7b26\u3001\u4e00\u4e2a\u5b57\u7b26\u4e32\u63cf\u8ff0\u548c\u4e00\u4e2a\u6574\u6570\u4f4d\u5bbd\uff0c\u56e0\u6b64\u8fd9\u4e9b\u90fd\u662f <code>Class</code> \u4e0a\u7684\u8f93\u51fa <code>Property</code> \u7c7b\u578b\u7aef\u53e3\u3002</p> <p>\u4e3a\u4e86\u5728\u6bcf\u4e2a <code>Object</code> \u5b9e\u4f8b\u5316\u65f6\u6355\u83b7\u5177\u4f53\u503c\uff0c\u6211\u4eec\u6709\u76f8\u5e94\u7684\u8f93\u5165 <code>Property</code> \u7c7b\u578b\u7aef\u53e3\uff0c\u76f4\u63a5\u8fde\u63a5\u5230\u8f93\u51fa\u3002\u8fd9\u5c31\u662f\u6211\u4eec\u5982\u4f55\u4f7f\u7528 <code>Class</code> \u8868\u793a\u7c7b\u4f3c Scala \u7684 <code>case class</code> \u7684\u65b9\u5f0f\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\n// A hardware module representing a CSR and its description.\nclass CSRModule(\n  csrDescDef:     Definition[CSRDescription],\n  width:          Int,\n  identifierStr:  String,\n  descriptionStr: String)\n    extends Module {\n  override def desiredName = identifierStr\n\n  // Create a hardware port for the CSR value.\n  val value = IO(Output(UInt(width.W)))\n\n  // Create a property port for a reference to the CSR description object.\n  val description = IO(Output(csrDescDef.getPropertyType))\n\n  // Instantiate a CSR description object, and connect its input properties.\n  val csrDescription = Instance(csrDescDef)\n  csrDescription.identifierIn := Property(identifierStr)\n  csrDescription.descriptionIn := Property(descriptionStr)\n  csrDescription.widthIn := Property(width)\n\n  // Create a register for the hardware CSR. A real implementation would be more involved.\n  val csr = RegInit(0.U(width.W))\n\n  // Assign the CSR value to the hardware port.\n  value := csr\n\n  // Assign a reference to the CSR description object to the property port.\n  description := csrDescription.getPropertyReference\n}\n</code></pre> <p><code>CSRModule</code> \u662f\u4e00\u4e2a <code>Module</code>\uff0c\u5b83\u8868\u793a CSR \u7684\uff08\u865a\u62df\uff09\u786c\u4ef6\u4ee5\u53ca <code>CSRDescription</code>\u3002\u4f7f\u7528 <code>CSRDescription</code> \u7684 <code>Definition</code>\uff0c\u521b\u5efa\u4e00\u4e2a <code>Object</code> \u5e76\u4ece <code>CSRModule</code> \u6784\u9020\u51fd\u6570\u53c2\u6570\u63d0\u4f9b\u8f93\u5165\u3002\u7136\u540e\uff0c\u5c06\u5bf9 <code>Object</code> \u7684\u5f15\u7528\u8fde\u63a5\u5230 <code>CSRModule</code> \u8f93\u51fa\uff0c\u4ee5\u4fbf\u5f15\u7528\u5c06\u66b4\u9732\u7ed9\u5916\u90e8\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\n// The entrypoint module.\nclass Top extends Module {\n  // Create a Definition for the CSRDescription Class.\n  val csrDescDef = Definition(new CSRDescription)\n\n  // Get the CSRDescription ClassType.\n  val csrDescType = csrDescDef.getClassType\n\n  // Create a property port to collect all the CSRDescription object references.\n  val descriptions = IO(Output(Property[Seq[csrDescType.Type]]()))\n\n  // Instantiate a couple CSR modules.\n  val mcycle = Module(new CSRModule(csrDescDef, 64, \"mcycle\", \"Machine cycle counter.\"))\n  val minstret = Module(new CSRModule(csrDescDef, 64, \"minstret\", \"Machine instructions-retired counter.\"))\n\n  // Assign references to the CSR description objects to the property port.\n  descriptions := Property(Seq(mcycle.description.as(csrDescType), minstret.description.as(csrDescType)))\n}\n</code></pre> <p><code>Top</code> \u6a21\u5757\u8868\u793a\u5165\u53e3\u70b9\u3002\u5b83\u521b\u5efa <code>CSRDescription</code> \u7684 <code>Definition</code>\uff0c\u5e76\u521b\u5efa\u4e00\u4e9b <code>CSRModule</code>\u3002\u7136\u540e\uff0c\u5b83\u83b7\u53d6\u63cf\u8ff0\u5f15\u7528\uff0c\u5c06\u5b83\u4eec\u6536\u96c6\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\uff0c\u5e76\u8f93\u51fa\u8be5\u5217\u8868\uff0c\u4ee5\u4fbf\u5c06\u5176\u66b4\u9732\u7ed9\u5916\u90e8\u3002</p> <p>\u867d\u7136\u4e0d\u9700\u8981\u4f7f\u7528 <code>Definition</code> API \u6765\u5b9a\u4e49 <code>Class</code>\uff0c\u4f46\u8fd9\u662f \"\u5b89\u5168\" \u7684 API\uff0cChisel \u652f\u6301\u4e0e <code>Class</code> \u7684 <code>Definition</code> \u548c <code>Instance</code> \u4e00\u8d77\u4f7f\u7528\u3002\u8fd8\u6709\u4e00\u4e2a \"\u4e0d\u5b89\u5168\" \u7684 API\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 <code>DynamicObject</code>\u3002</p> <p>\u4e3a\u4e86\u8bf4\u660e\u6b64\u793a\u4f8b\u751f\u6210\u7684\u5185\u5bb9\uff0c\u8fd9\u91cc\u5217\u51fa\u4e86 FIRRTL\uff1a</p> <pre><code>FIRRTL version 4.0.0\ncircuit Top :\n  class CSRDescription :\n    output identifier : String\n    output description : String\n    output width : Integer\n    input identifierIn : String\n    input descriptionIn : String\n    input widthIn : Integer\n\n    propassign identifier, identifierIn\n    propassign description, descriptionIn\n    propassign width, widthIn\n\n  module mcycle :\n    input clock : Clock\n    input reset : Reset\n    output value : UInt&lt;64&gt;\n    output description : Inst&lt;CSRDescription&gt;\n\n    object csrDescription of CSRDescription\n    propassign csrDescription.identifierIn, String(\"mcycle\")\n    propassign csrDescription.descriptionIn, String(\"Machine cycle counter.\")\n    propassign csrDescription.widthIn, Integer(64)\n    regreset csr : UInt&lt;64&gt;, clock, reset, UInt&lt;64&gt;(0h0)\n    connect value, csr\n    propassign description, csrDescription\n\n  module minstret :\n    input clock : Clock\n    input reset : Reset\n    output value : UInt&lt;64&gt;\n    output description : Inst&lt;CSRDescription&gt;\n\n    object csrDescription of CSRDescription\n    propassign csrDescription.identifierIn, String(\"minstret\")\n    propassign csrDescription.descriptionIn, String(\"Machine instructions-retired counter.\")\n    propassign csrDescription.widthIn, Integer(64)\n    regreset csr : UInt&lt;64&gt;, clock, reset, UInt&lt;64&gt;(0h0)\n    connect value, csr\n    propassign description, csrDescription\n\n  public module Top :\n    input clock : Clock\n    input reset : UInt&lt;1&gt;\n    output descriptions : List&lt;Inst&lt;CSRDescription&gt;&gt;\n\n    inst mcycle of mcycle\n    connect mcycle.clock, clock\n    connect mcycle.reset, reset\n    inst minstret of minstret\n    connect minstret.clock, clock\n    connect minstret.reset, reset\n    propassign descriptions, List&lt;Inst&lt;CSRDescription&gt;&gt;(mcycle.description, minstret.description)\n</code></pre> <p>\u4e3a\u4e86\u7406\u89e3\u6784\u9020\u7684 <code>Object</code> \u56fe\uff0c\u6211\u4eec\u5c06\u8003\u8651\u4e00\u4e2a\u5c55\u5f00\u7684\u5165\u53e3\u70b9\uff0c\u7136\u540e\u663e\u793a <code>Object</code> \u56fe\u7684\u5047\u8bbe JSON \u8868\u793a\u3002\u6211\u4eec\u4ece IR \u5230 <code>Object</code> \u56fe\u7684\u8be6\u7ec6\u4fe1\u606f\u8d85\u51fa\u4e86\u672c\u6587\u6863\u7684\u8303\u56f4\uff0c\u7531\u76f8\u5173\u5de5\u5177\u5b9e\u73b0\u3002</p> <p>\u5982\u679c\u6211\u4eec\u5c55\u5f00 <code>Top</code>\uff0c<code>descriptions</code> \u8f93\u51fa <code>Property</code> \u662f\u6211\u4eec\u8fdb\u5165 <code>Object</code> \u56fe\u7684\u5165\u53e3\u70b9\u3002\u5728\u5176\u4e2d\uff0c\u6709\u4e24\u4e2a <code>Object</code>\uff0c\u5206\u522b\u662f <code>mcycle</code> \u548c <code>minstret</code> \u6a21\u5757\u7684 <code>CSRDescription</code>\uff1a</p> <p>```json mdoc:silent {   \"descriptions\": [     {       \"identifier\": \"mcycle\",       \"description\": \"Machine cycle counter.\",       \"width\": 64     },     {       \"identifier\": \"minstret\",       \"description\": \"Machine instructions-retired counter.\",       \"width\": 64     }   ] } <pre><code>\u5982\u679c\u76f8\u53cd\u5730\uff0c\u6211\u4eec\u5c55\u5f00\u5176\u4e2d\u4e00\u4e2a `CSRModule`\uff0c\u4f8b\u5982 `minstret`\uff0c`description` \u8f93\u51fa `Property` \u662f\u6211\u4eec\u8fdb\u5165 `Object` \u56fe\u7684\u5165\u53e3\u70b9\uff0c\u5176\u4e2d\u5305\u542b\u5355\u4e2a `CSRDescription` \u5bf9\u8c61\uff1a\n\n```json mdoc:silent\n{\n  \"description\": {\n    \"identifier\": \"minstret\",\n    \"description\": \"Machine instructions-retired counter.\",\n    \"width\": 64\n  }\n}\n</code></pre></p> <p>\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u8f93\u51fa <code>Property</code> \u7aef\u53e3\u3001<code>Object</code> \u5f15\u7528\u548c\u9009\u62e9\u7684\u5c55\u5f00\u5165\u53e3\u70b9\u5141\u8bb8\u6211\u4eec\u4ece\u5c42\u6b21\u7ed3\u6784\u4e2d\u7684\u4e0d\u540c\u70b9\u67e5\u770b\u8868\u793a\u7279\u5b9a\u9886\u57df\u6570\u636e\u6a21\u578b\u7684 <code>Object</code> \u56fe\u3002</p>"},{"location":"chisel_explanation/reset/","title":"\u590d\u4f4d","text":"<pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\nimport chisel3._\n\nclass Submodule extends Module\n</code></pre> <p>\u4ece Chisel 3.2.0 \u5f00\u59cb\uff0cChisel 3 \u540c\u65f6\u652f\u6301\u540c\u6b65\u548c\u5f02\u6b65\u590d\u4f4d\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u53ef\u4ee5\u539f\u751f\u5730\u751f\u6210\u540c\u6b65\u590d\u4f4d\u548c\u5f02\u6b65\u590d\u4f4d\u7684\u5bc4\u5b58\u5668\u3002</p> <p>\u751f\u6210\u7684\u5bc4\u5b58\u5668\u7c7b\u578b\u53d6\u51b3\u4e8e\u4e0e\u5bc4\u5b58\u5668\u76f8\u5173\u8054\u7684\u590d\u4f4d\u4fe1\u53f7\u7684\u7c7b\u578b\u3002</p> <p>\u6709\u4e09\u79cd\u7c7b\u578b\u7684\u590d\u4f4d\u5b9e\u73b0\u4e86\u4e00\u4e2a\u516c\u5171\u7684 <code>Reset</code> \u7279\u8d28\uff1a * <code>Bool</code> - \u901a\u8fc7 <code>Bool()</code> \u6784\u9020\u3002\u4e5f\u79f0\u4e3a\"\u540c\u6b65\u590d\u4f4d\"\u3002 * <code>AsyncReset</code> - \u901a\u8fc7 <code>AsyncReset()</code> \u6784\u9020\u3002\u4e5f\u79f0\u4e3a\"\u5f02\u6b65\u590d\u4f4d\"\u3002 * <code>Reset</code> - \u901a\u8fc7 <code>Reset()</code> \u6784\u9020\u3002\u4e5f\u79f0\u4e3a\"\u62bd\u8c61\u590d\u4f4d\"\u3002</p> <p>\u7531\u4e8e\u5b9e\u73b0\u539f\u56e0\uff0c\u5177\u4f53\u7684 Scala \u7c7b\u578b\u662f <code>ResetType</code>\u3002\u4ece\u98ce\u683c\u4e0a\u6765\u8bf4\uff0c\u6211\u4eec\u907f\u514d\u4f7f\u7528 <code>ResetType</code>\uff0c\u800c\u662f\u4f7f\u7528\u516c\u5171\u7279\u8d28 <code>Reset</code>\u3002</p> <p>\u5177\u6709 <code>Bool</code> \u7c7b\u578b\u590d\u4f4d\u4fe1\u53f7\u7684\u5bc4\u5b58\u5668\u88ab\u751f\u6210\u4e3a\u540c\u6b65\u590d\u4f4d\u89e6\u53d1\u5668\u3002 \u5177\u6709 <code>AsyncReset</code> \u7c7b\u578b\u590d\u4f4d\u4fe1\u53f7\u7684\u5bc4\u5b58\u5668\u88ab\u751f\u6210\u4e3a\u5f02\u6b65\u590d\u4f4d\u89e6\u53d1\u5668\u3002 \u5177\u6709 <code>Reset</code> \u7c7b\u578b\u590d\u4f4d\u4fe1\u53f7\u7684\u5bc4\u5b58\u5668\u5c06\u5728 FIRRTL \u7f16\u8bd1\u671f\u95f4 \u63a8\u65ad \u5176\u590d\u4f4d\u7c7b\u578b\u3002</p>"},{"location":"chisel_explanation/reset/#_2","title":"\u590d\u4f4d\u63a8\u65ad","text":"<p>FIRRTL \u5c06\u4e3a\u4efb\u4f55\u62bd\u8c61 <code>Reset</code> \u7c7b\u578b\u7684\u4fe1\u53f7\u63a8\u65ad\u4e00\u4e2a\u5177\u4f53\u7c7b\u578b\u3002 \u89c4\u5219\u5982\u4e0b\uff1a 1. \u5982\u679c\u4e00\u4e2a\u62bd\u8c61 <code>Reset</code> \u5728\u5176\u8f93\u5165\u548c\u8f93\u51fa\u6247\u51fa\u4e2d\u53ea\u6709 <code>AsyncReset</code>\u3001\u62bd\u8c61 <code>Reset</code> \u548c <code>DontCare</code> \u7c7b\u578b\u7684\u4fe1\u53f7\uff0c\u5219\u63a8\u65ad\u4e3a <code>AsyncReset</code> \u7c7b\u578b 2. \u5982\u679c\u4e00\u4e2a\u62bd\u8c61 <code>Reset</code> \u5728\u5176\u8f93\u5165\u548c\u8f93\u51fa\u6247\u51fa\u4e2d\u540c\u65f6\u5305\u542b <code>Bool</code> \u548c <code>AsyncReset</code> \u7c7b\u578b\u7684\u4fe1\u53f7\uff0c\u8fd9\u662f\u4e00\u4e2a\u9519\u8bef\u3002 3. \u5426\u5219\uff0c\u62bd\u8c61 <code>Reset</code> \u5c06\u63a8\u65ad\u4e3a <code>Bool</code> \u7c7b\u578b\u3002</p> <p>\u4f60\u53ef\u4ee5\u628a (3) \u770b\u4f5c\u662f (1) \u7684\u955c\u50cf\uff0c\u7528 <code>Bool</code> \u66ff\u6362 <code>AsyncReset</code>\uff0c\u5e76\u589e\u52a0\u4e86\u4e00\u6761\u989d\u5916\u7684\u89c4\u5219\uff1a \u5982\u679c\u62bd\u8c61 <code>Reset</code> \u5728\u5176\u8f93\u5165\u548c\u8f93\u51fa\u6247\u51fa\u4e2d\u65e2\u6ca1\u6709 <code>AsyncReset</code> \u4e5f\u6ca1\u6709 <code>Bool</code>\uff0c\u5219\u9ed8\u8ba4\u4e3a <code>Bool</code> \u7c7b\u578b\u3002 \u8fd9\u79cd\"\u9ed8\u8ba4\"\u60c5\u51b5\u5f88\u5c11\u89c1\uff0c\u610f\u5473\u7740\u590d\u4f4d\u4fe1\u53f7\u6700\u7ec8\u7531 <code>DontCare</code> \u9a71\u52a8\u3002</p>"},{"location":"chisel_explanation/reset/#_3","title":"\u9690\u5f0f\u590d\u4f4d","text":"<p><code>Module</code> \u7684 <code>reset</code> \u662f\u62bd\u8c61 <code>Reset</code> \u7c7b\u578b\u3002 \u5728 Chisel 3.2.0 \u4e4b\u524d\uff0c\u8be5\u5b57\u6bb5\u7684\u7c7b\u578b\u662f <code>Bool</code>\u3002 \u4e3a\u4e86\u5411\u540e\u517c\u5bb9\uff0c\u5982\u679c\u9876\u5c42\u6a21\u5757\u6709\u4e00\u4e2a\u9690\u5f0f\u590d\u4f4d\uff0c\u5176\u7c7b\u578b\u5c06\u9ed8\u8ba4\u4e3a <code>Bool</code>\u3002</p>"},{"location":"chisel_explanation/reset/#_4","title":"\u8bbe\u7f6e\u9690\u5f0f\u590d\u4f4d\u7c7b\u578b","text":"<p>Chisel 3.3.0 \u65b0\u529f\u80fd</p> <p>\u5982\u679c\u4f60\u60f3\u4ece\u6a21\u5757\u5185\u90e8\u8bbe\u7f6e\u590d\u4f4d\u7c7b\u578b\uff08\u5305\u62ec\u9876\u5c42 <code>Module</code>\uff09\uff0c\u800c\u4e0d\u662f\u4f9d\u8d56 \u590d\u4f4d\u63a8\u65ad\uff0c\u4f60\u53ef\u4ee5\u6df7\u5165\u4ee5\u4e0b\u7279\u8d28\u4e4b\u4e00\uff1a * <code>RequireSyncReset</code> - \u5c06 <code>reset</code> \u7684\u7c7b\u578b\u8bbe\u7f6e\u4e3a <code>Bool</code> * <code>RequireAsyncReset</code> - \u5c06 <code>reset</code> \u7684\u7c7b\u578b\u8bbe\u7f6e\u4e3a <code>AsyncReset</code></p> <p>\u4f8b\u5982\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass MyAlwaysSyncResetModule extends Module with RequireSyncReset {\n  val mySyncResetReg = RegInit(false.B) // reset \u7684\u7c7b\u578b\u662f Bool\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass MyAlwaysAsyncResetModule extends Module with RequireAsyncReset {\n  val myAsyncResetReg = RegInit(false.B) // reset \u7684\u7c7b\u578b\u662f AsyncReset\n}\n</code></pre> <p>\u6ce8\u610f\uff1a\u8fd9\u8bbe\u7f6e\u4e86\u5177\u4f53\u7c7b\u578b\uff0c\u4f46 Scala \u7c7b\u578b\u4ecd\u7136\u4fdd\u6301\u4e3a <code>Reset</code>\uff0c\u6240\u4ee5\u53ef\u80fd\u4ecd\u7136\u9700\u8981\u7c7b\u578b\u8f6c\u6362\u3002 \u8fd9\u5728\u903b\u8f91\u4e2d\u4f7f\u7528 <code>Bool</code> \u7c7b\u578b\u7684\u590d\u4f4d\u65f6\u6700\u5e38\u89c1\u3002</p>"},{"location":"chisel_explanation/reset/#_5","title":"\u590d\u4f4d\u65e0\u5173\u4ee3\u7801","text":"<p>\u62bd\u8c61 <code>Reset</code> \u7684\u76ee\u7684\u662f\u4f7f\u5f97\u53ef\u4ee5\u8bbe\u8ba1\u4e0e\u6240\u4f7f\u7528\u7684\u590d\u4f4d\u89c4\u5219\u65e0\u5173\u7684\u786c\u4ef6\u3002 \u8fd9\u4f7f\u5f97\u5de5\u5177\u548c\u8bbe\u8ba1\u53ef\u4ee5\u91cd\u7528\uff0c\u53ea\u8981\u590d\u4f4d\u89c4\u5219\u5bf9\u4e8e\u5757\u7684\u529f\u80fd\u6765\u8bf4\u5e76\u4e0d\u91cd\u8981\u3002</p> <p>\u8003\u8651\u4ee5\u4e0b\u4e24\u4e2a\u793a\u4f8b\u6a21\u5757\uff0c\u5b83\u4eec\u4e0e\u5176\u4e2d\u4f7f\u7528\u7684\u590d\u4f4d\u7c7b\u578b\u65e0\u5173\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass ResetAgnosticModule extends Module {\n  val io = IO(new Bundle {\n    val out = UInt(4.W)\n  })\n  val resetAgnosticReg = RegInit(0.U(4.W))\n  resetAgnosticReg := resetAgnosticReg + 1.U\n  io.out := resetAgnosticReg\n}\n\nclass ResetAgnosticRawModule extends RawModule {\n  val clk = IO(Input(Clock()))\n  val rst = IO(Input(Reset()))\n  val out = IO(Output(UInt(8.W)))\n\n  val resetAgnosticReg = withClockAndReset(clk, rst)(RegInit(0.U(8.W)))\n  resetAgnosticReg := resetAgnosticReg + 1.U\n  out := resetAgnosticReg\n}\n</code></pre> <p>\u8fd9\u4e9b\u6a21\u5757\u53ef\u4ee5\u5728\u540c\u6b65\u548c\u5f02\u6b65\u590d\u4f4d\u57df\u4e2d\u4f7f\u7528\u3002 \u5b83\u4eec\u7684\u590d\u4f4d\u7c7b\u578b\u5c06\u6839\u636e\u5b83\u4eec\u4f7f\u7528\u7684\u4e0a\u4e0b\u6587\u8fdb\u884c\u63a8\u65ad\u3002</p>"},{"location":"chisel_explanation/reset/#_6","title":"\u5f3a\u5236\u590d\u4f4d\u7c7b\u578b","text":"<p>\u4f60\u53ef\u4ee5\u6309\u7167\u4e0a\u6587\u6240\u8ff0\u8bbe\u7f6e\u6a21\u5757\u7684\u9690\u5f0f\u590d\u4f4d\u7c7b\u578b\u3002</p> <p>\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8f6c\u6362\u6765\u5f3a\u5236\u590d\u4f4d\u7684\u5177\u4f53\u7c7b\u578b\u3002 * <code>.asBool</code> \u4f1a\u5c06 <code>Reset</code> \u91cd\u65b0\u89e3\u91ca\u4e3a <code>Bool</code> * <code>.asAsyncReset</code> \u4f1a\u5c06 <code>Reset</code> \u91cd\u65b0\u89e3\u91ca\u4e3a <code>AsyncReset</code></p> <p>\u7136\u540e\u4f60\u53ef\u4ee5\u4f7f\u7528 <code>withReset</code> \u5c06\u8f6c\u6362\u540e\u7684\u590d\u4f4d\u7528\u4f5c\u9690\u5f0f\u590d\u4f4d\u3002 \u6709\u5173 <code>withReset</code> \u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1\"\u591a\u65f6\u949f\u57df\"\u3002</p> <p>\u4ee5\u4e0b\u4ee3\u7801\u5c06\u4f7f <code>myReg</code> \u4ee5\u53ca\u4e24\u4e2a <code>resetAgnosticReg</code> \u90fd\u540c\u6b65\u590d\u4f4d\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass ForcedSyncReset extends Module {\n  // withReset \u7684\u53c2\u6570\u5728\u5176\u4f5c\u7528\u57df\u5185\u6210\u4e3a\u9690\u5f0f\u590d\u4f4d\n  withReset (reset.asBool) {\n    val myReg = RegInit(0.U)\n    val myModule = Module(new ResetAgnosticModule)\n\n    // RawModule \u6ca1\u6709\u9690\u5f0f\u590d\u4f4d\uff0c\u6240\u4ee5 withReset \u65e0\u6548\n    val myRawModule = Module(new ResetAgnosticRawModule)\n    // \u6211\u4eec\u5fc5\u987b\u624b\u52a8\u9a71\u52a8\u590d\u4f4d\u7aef\u53e3\n    myRawModule.rst := Module.reset // Module.reset \u83b7\u53d6\u5f53\u524d\u7684\u9690\u5f0f\u590d\u4f4d\n  }\n}\n</code></pre> <p>\u4ee5\u4e0b\u4ee3\u7801\u5c06\u4f7f <code>myReg</code> \u4ee5\u53ca\u4e24\u4e2a <code>resetAgnosticReg</code> \u90fd\u5f02\u6b65\u590d\u4f4d\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass ForcedAysncReset extends Module {\n  // withReset \u7684\u53c2\u6570\u5728\u5176\u4f5c\u7528\u57df\u5185\u6210\u4e3a\u9690\u5f0f\u590d\u4f4d\n  withReset (reset.asAsyncReset){\n    val myReg = RegInit(0.U)\n    val myModule = Module(new ResetAgnosticModule) // myModule.reset \u9690\u5f0f\u8fde\u63a5\n\n    // RawModule \u6ca1\u6709\u9690\u5f0f\u590d\u4f4d\uff0c\u6240\u4ee5 withReset \u65e0\u6548\n    val myRawModule = Module(new ResetAgnosticRawModule)\n    // \u6211\u4eec\u5fc5\u987b\u624b\u52a8\u9a71\u52a8\u590d\u4f4d\u7aef\u53e3\n    myRawModule.rst := Module.reset // Module.reset \u83b7\u53d6\u5f53\u524d\u7684\u9690\u5f0f\u590d\u4f4d\n  }\n}\n</code></pre> <p>\u6ce8\u610f\uff1a\u8fd9\u6837\u7684\u8f6c\u6362\uff08<code>asBool</code> \u548c <code>asAsyncReset</code>\uff09\u4e0d\u4f1a\u88ab FIRRTL \u68c0\u67e5\u3002 \u5728\u8fdb\u884c\u8fd9\u6837\u7684\u8f6c\u6362\u65f6\uff0c\u4f5c\u4e3a\u8bbe\u8ba1\u8005\u7684\u4f60\u5b9e\u9645\u4e0a\u662f\u5728\u544a\u8bc9\u7f16\u8bd1\u5668\u4f60\u77e5\u9053\u4f60\u5728\u505a\u4ec0\u4e48\uff0c\u8981\u5f3a\u5236\u4f7f\u7528\u8f6c\u6362\u540e\u7684\u7c7b\u578b\u3002</p>"},{"location":"chisel_explanation/reset/#_7","title":"\u6700\u540e\u8fde\u63a5\u8bed\u4e49","text":"<p>\u4f7f\u7528\u6700\u540e\u8fde\u63a5\u8bed\u4e49\u6765\u8986\u76d6\u590d\u4f4d\u7c7b\u578b\u662f \u4e0d\u5408\u6cd5\u7684\uff0c\u9664\u975e\u4f60\u662f\u5728\u8986\u76d6\u4e00\u4e2a <code>DontCare</code>\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nclass MyModule extends Module {\n  val resetBool = Wire(Reset())\n  resetBool := DontCare\n  resetBool := false.B // \u8fd9\u662f\u53ef\u4ee5\u7684\n  withReset(resetBool) {\n    val mySubmodule = Module(new Submodule())\n  }\n  resetBool := true.B // \u8fd9\u662f\u53ef\u4ee5\u7684\n  resetBool := false.B.asAsyncReset // \u8fd9\u4f1a\u5728 FIRRTL \u4e2d\u62a5\u9519\n}\n</code></pre>"},{"location":"chisel_explanation/sequential-circuits/","title":"\u65f6\u5e8f\u7535\u8def","text":"<pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\nimport chisel3._\nval in = Bool()\n</code></pre> <p>Chisel \u652f\u6301\u7684\u6700\u7b80\u5355\u7684\u72b6\u6001\u5143\u7d20\u662f\u4e00\u4e2a\u6b63\u8fb9\u6cbf\u89e6\u53d1\u7684\u5bc4\u5b58\u5668\uff0c\u53ef\u4ee5\u8fd9\u6837\u5b9e\u4f8b\u5316\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:compile-only\nval reg = RegNext(in)\n</code></pre> <p>\u8fd9\u4e2a\u7535\u8def\u7684\u8f93\u51fa\u662f\u8f93\u5165\u4fe1\u53f7 <code>in</code> \u5ef6\u8fdf\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u7684\u526f\u672c\u3002\u6ce8\u610f\uff0c\u6211\u4eec\u4e0d\u5fc5\u6307\u5b9a Reg \u7684\u7c7b\u578b\uff0c\u56e0\u4e3a\u5b83\u4f1a\u5728\u5b9e\u4f8b\u5316\u65f6\u81ea\u52a8\u4ece\u5176\u8f93\u5165\u63a8\u65ad\u51fa\u6765\u3002\u5728\u5f53\u524d\u7248\u672c\u7684 Chisel \u4e2d\uff0c\u65f6\u949f\u548c\u590d\u4f4d\u662f\u5168\u5c40\u4fe1\u53f7\uff0c\u5728\u9700\u8981\u7684\u5730\u65b9\u4f1a\u9690\u5f0f\u5305\u542b\u3002</p> <p>\u6ce8\u610f\uff0c\u672a\u6307\u5b9a\u521d\u59cb\u503c\u7684\u5bc4\u5b58\u5668\u5728\u590d\u4f4d\u4fe1\u53f7\u89e6\u53d1\u65f6\u4e0d\u4f1a\u6539\u53d8\u503c\u3002</p> <p>\u4f7f\u7528\u5bc4\u5b58\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u5feb\u901f\u5b9a\u4e49\u8bb8\u591a\u6709\u7528\u7684\u7535\u8def\u7ed3\u6784\u3002\u4f8b\u5982\uff0c\u4e0a\u5347\u6cbf\u68c0\u6d4b\u5668\u63a5\u6536\u4e00\u4e2a\u5e03\u5c14\u4fe1\u53f7\u5e76\u5728\u5f53\u524d\u503c\u4e3a\u771f\u800c\u524d\u4e00\u4e2a\u503c\u4e3a\u5047\u65f6\u8f93\u51fa\u771f\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\ndef risingedge(x: Bool) = x &amp;&amp; !RegNext(x)\n</code></pre> <p>\u8ba1\u6570\u5668\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u65f6\u5e8f\u7535\u8def\u3002\u8981\u6784\u9020\u4e00\u4e2a\u5411\u4e0a\u8ba1\u6570\u5230\u6700\u5927\u503c max \u7136\u540e\u7ed5\u56de\u5230\u96f6\uff08\u5373\u6a21 max+1\uff09\u7684\u4e0a\u8ba1\u6570\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\ndef counter(max: UInt) = {\n  val x = RegInit(0.asUInt(max.getWidth.W))\n  x := Mux(x === max, 0.U, x + 1.U)\n  x\n}\n</code></pre> <p>\u8ba1\u6570\u5668\u5bc4\u5b58\u5668\u5728\u8ba1\u6570\u5668\u51fd\u6570\u4e2d\u521b\u5efa\u65f6\u521d\u59cb\u503c\u4e3a 0\uff08\u4f4d\u5bbd\u8db3\u591f\u5927\u4ee5\u5bb9\u7eb3 max\uff09\uff0c\u5f53\u7535\u8def\u7684\u5168\u5c40\u590d\u4f4d\u88ab\u65ad\u8a00\u65f6\u5bc4\u5b58\u5668\u5c06\u88ab\u521d\u59cb\u5316\u4e3a\u8fd9\u4e2a\u503c\u3002\u5728\u8ba1\u6570\u5668\u4e2d\u5bf9 x \u7684 := \u8d4b\u503c\u8fde\u63a5\u4e86\u4e00\u4e2a\u66f4\u65b0\u7ec4\u5408\u7535\u8def\uff0c\u8be5\u7535\u8def\u9012\u589e\u8ba1\u6570\u5668\u503c\uff0c\u9664\u975e\u5b83\u8fbe\u5230\u6700\u5927\u503c\uff0c\u6b64\u65f6\u5b83\u56de\u7ed5\u5230\u96f6\u3002\u6ce8\u610f\uff0c\u5f53 x \u51fa\u73b0\u5728\u8d4b\u503c\u7684\u53f3\u4fa7\u65f6\uff0c\u5f15\u7528\u7684\u662f\u5b83\u7684\u8f93\u51fa\uff0c\u800c\u5f53\u5728\u5de6\u4fa7\u65f6\uff0c\u5f15\u7528\u7684\u662f\u5b83\u7684\u8f93\u5165\u3002</p> <p>\u8ba1\u6570\u5668\u53ef\u4ee5\u7528\u6765\u6784\u5efa\u8bb8\u591a\u6709\u7528\u7684\u65f6\u5e8f\u7535\u8def\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728\u8ba1\u6570\u5668\u8fbe\u5230\u96f6\u65f6\u8f93\u51fa\u771f\u503c\u6765\u6784\u5efa\u4e00\u4e2a\u8109\u51b2\u751f\u6210\u5668\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\n// \u6bcf n \u4e2a\u5468\u671f\u4ea7\u751f\u4e00\u4e2a\u8109\u51b2\ndef pulse(n: UInt) = counter(n - 1.U) === 0.U\n</code></pre> <p>\u7136\u540e\u53ef\u4ee5\u7528\u8109\u51b2\u5e8f\u5217\u6765\u89e6\u53d1\u4e00\u4e2a\u65b9\u6ce2\u751f\u6210\u5668\uff0c\u5728\u6bcf\u4e2a\u8109\u51b2\u4e4b\u95f4\u5728\u771f\u548c\u5047\u4e4b\u95f4\u5207\u6362\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\n// \u5f53\u8f93\u5165\u4e3a\u771f\u65f6\u7ffb\u8f6c\u5185\u90e8\u72b6\u6001\ndef toggle(p: Bool) = {\n  val x = RegInit(false.B)\n  x := Mux(p, !x, x)\n  x\n}\n// \u751f\u6210\u7ed9\u5b9a\u5468\u671f\u7684\u65b9\u6ce2\ndef squareWave(period: UInt) = toggle(pulse(period &gt;&gt; 1))\n</code></pre>"},{"location":"chisel_explanation/source-locators/","title":"\u6e90\u4ee3\u7801\u5b9a\u4f4d\u5668","text":"<p>\u5728\u751f\u6210 Chisel \u8bbe\u8ba1\u5e76\u751f\u6210 FIRRTL \u6587\u4ef6\u6216 Verilog \u6587\u4ef6\u65f6\uff0cChisel \u4f1a\u81ea\u52a8\u6dfb\u52a0\u6e90\u4ee3\u7801\u5b9a\u4f4d\u5668\uff0c\u8fd9\u4e9b\u5b9a\u4f4d\u5668\u6307\u5411\u5305\u542b\u76f8\u5e94 Chisel \u4ee3\u7801\u7684 Scala \u6587\u4ef6\u3002</p> <p>\u5728 FIRRTL \u6587\u4ef6\u4e2d\uff0c\u5b83\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a</p> <pre><code>wire w : UInt&lt;3&gt; @[src/main/scala/MyProject/MyFile.scala 1210:21]\n</code></pre> <p>\u5728 Verilog \u6587\u4ef6\u4e2d\uff0c\u5b83\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a</p> <pre><code>wire [2:0] w; // @[src/main/scala/MyProject/MyFile.scala 1210:21]\n</code></pre> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5305\u542b\u4e86\u6587\u4ef6\u76f8\u5bf9\u4e8e JVM \u8c03\u7528\u4f4d\u7f6e\u7684\u76f8\u5bf9\u8def\u5f84\u3002 \u8981\u6539\u53d8\u76f8\u5bf9\u8def\u5f84\u7684\u8ba1\u7b97\u4f4d\u7f6e\uff0c\u8bf7\u8bbe\u7f6e Java \u7cfb\u7edf\u5c5e\u6027 <code>-Dchisel.project.root=/absolute/path/to/root</code>\u3002 \u8fd9\u4e2a\u9009\u9879\u53ef\u4ee5\u76f4\u63a5\u4f20\u9012\u7ed9 sbt\uff08<code>sbt -Dchisel.project.root=/absolute/path/to/root</code>\uff09\u3002 \u5728 <code>build.sbt</code> \u6587\u4ef6\u4e2d\u8bbe\u7f6e\u8fd9\u4e2a\u503c\u662f\u4e0d\u8d77\u4f5c\u7528\u7684\uff0c\u56e0\u4e3a\u5b83\u9700\u8981\u4f20\u9012\u7ed9\u8c03\u7528 sbt \u7684 JVM\uff08\u800c\u4e0d\u662f\u76f8\u53cd\uff09\u3002 \u6211\u4eec\u8ba4\u4e3a\u8fd9\u53ea\u4e0e\u53ef\u80fd\u9700\u8981\u66f4\u591a\u81ea\u5b9a\u4e49\u7684\u53d1\u5e03\u7248\u672c\u76f8\u5173\u3002</p>"},{"location":"chisel_explanation/supported-hardware/","title":"\u652f\u6301\u7684\u786c\u4ef6","text":"<p>\u867d\u7136 Chisel \u4e3b\u8981\u5173\u6ce8\u4e8c\u8fdb\u5236\u903b\u8f91\uff0c\u4f46\u5b83\u4e5f\u53ef\u4ee5\u901a\u8fc7 <code>Analog</code> \u7c7b\u578b\u652f\u6301\u6a21\u62df\u548c\u4e09\u6001\u7ebf - \u53c2\u89c1Chisel \u4e2d\u7684\u6570\u636e\u7c7b\u578b\u3002</p> <p>\u6211\u4eec\u4e13\u6ce8\u4e8e\u4e8c\u8fdb\u5236\u903b\u8f91\u8bbe\u8ba1\uff0c\u56e0\u4e3a\u5b83\u4eec\u5728\u5b9e\u8df5\u4e2d\u6784\u6210\u4e86\u7edd\u5927\u591a\u6570\u7684\u8bbe\u8ba1\u3002\u4e09\u6001\u903b\u8f91\u5728\u6807\u51c6\u5de5\u4e1a\u6d41\u7a0b\u4e2d\u652f\u6301\u4e0d\u591f\u5b8c\u5584\uff0c\u9700\u8981\u7279\u6b8a/\u53d7\u63a7\u7684\u786c\u5b8f\u624d\u80fd\u5b9e\u73b0\u3002</p>"},{"location":"chisel_explanation/testing/","title":"\u6d4b\u8bd5","text":"<p>Chisel \u63d0\u4f9b\u4e86\u51e0\u4e2a\u5305\uff0c\u7528\u4e8e\u4f7f\u7528\u4e0d\u540c\u7684\u7b56\u7565\u6d4b\u8bd5\u751f\u6210\u5668\u3002</p> <p>\u4e3b\u8981\u7684\u6d4b\u8bd5\u7b56\u7565\u662f\u4eff\u771f\u3002\u8fd9\u662f\u901a\u8fc7 ChiselSim \u5b8c\u6210\u7684\uff0c\u5b83\u662f\u4e00\u4e2a\u5e93\uff0c\u7528\u4e8e\u5728\u4e0d\u540c\u7684\u4eff\u771f\u5668\u4e0a\u4eff\u771f Chisel \u751f\u6210\u7684 SystemVerilog\u3002</p> <p>\u53e6\u4e00\u79cd\u4e92\u8865\u7684\u6d4b\u8bd5\u7b56\u7565\u662f\u76f4\u63a5\u68c0\u67e5 Chisel \u751f\u6210\u5668\u4ea7\u751f\u7684 SystemVerilog \u6216 FIRRTL \u6587\u672c\u3002\u8fd9\u662f\u4f7f\u7528 FileCheck \u5b8c\u6210\u7684\u3002</p> <p>:::tip</p> <p>\u9002\u5f53\u7684\u6d4b\u8bd5\u7b56\u7565\u5c06\u53d6\u51b3\u4e8e\u4f60\u8981\u6d4b\u8bd5\u4ec0\u4e48\u3002\u4f60\u53ef\u80fd\u9700\u8981\u6df7\u5408\u4f7f\u7528\u4e0d\u540c\u7684\u7b56\u7565\u3002</p> <p>:::</p> <p>ChiselSim \u548c FileCheck \u90fd\u4f5c\u4e3a Chisel \u5185\u90e8\u7684\u5305\u63d0\u4f9b\u3002 \u4e0b\u9762\u7684\u5c0f\u8282\u63cf\u8ff0\u4e86\u8fd9\u4e9b\u5305\u53ca\u5176\u7528\u6cd5\u3002</p>"},{"location":"chisel_explanation/testing/#chiselsim","title":"ChiselSim","text":"<p>ChiselSim \u63d0\u4f9b\u4e86\u591a\u79cd\u65b9\u6cd5\uff0c\u4f60\u53ef\u4ee5\u7528\u5b83\u4eec\u6765\u8fd0\u884c\u4eff\u771f\u5e76\u4e3a\u88ab\u6d4b\u8bd5\u7684 Chisel \u6a21\u5757\u63d0\u4f9b\u6fc0\u52b1\u3002</p> <p>:::info</p> <p>ChiselSim \u9700\u8981\u5b89\u88c5\u517c\u5bb9\u7684\u4eff\u771f\u5668\u5de5\u5177\uff0c\u5982 Verilator \u6216 VCS\u3002</p> <p>:::</p> <p>\u8981\u4f7f\u7528 ChiselSim\uff0c\u5c06\u4ee5\u4e0b\u4e24\u4e2a\u7279\u8d28\u4e4b\u4e00\u6df7\u5165\u5230\u7c7b\u4e2d\uff1a</p> <ul> <li><code>chisel3.simulator.ChiselSim</code></li> <li><code>chisel3.simulator.scalatest.ChiselSim</code></li> </ul> <p>\u4e24\u4e2a\u7279\u8d28\u63d0\u4f9b\u76f8\u540c\u7684\u65b9\u6cd5\u3002\u540e\u4e00\u4e2a\u7279\u8d28\u63d0\u4f9b\u4e86\u4e0e ScalaTest \u7684\u66f4\u7d27\u5bc6\u96c6\u6210\uff0c\u5b83\u4f1a\u5c06\u6d4b\u8bd5\u7ed3\u679c\u653e\u5728\u7531 ScalaTest \u6d4b\u8bd5\u540d\u79f0\u6d3e\u751f\u7684\u76ee\u5f55\u7ed3\u6784\u4e2d\uff0c\u4fbf\u4e8e\u7528\u6237\u68c0\u67e5\u3002</p>"},{"location":"chisel_explanation/testing/#api","title":"\u4eff\u771f API","text":"<p>ChiselSim \u63d0\u4f9b\u4e86\u4e24\u4e2a\u4eff\u771f API \u7528\u4e8e\u8fd0\u884c\u4eff\u771f\u3002\u5b83\u4eec\u662f\uff1a</p> <ul> <li><code>simulate</code></li> <li><code>simulateRaw</code></li> </ul> <p>\u524d\u8005\u53ea\u80fd\u7528\u4e8e <code>Module</code> \u6216\u5176\u5b50\u7c7b\u578b\u3002\u540e\u8005\u53ea\u80fd\u7528\u4e8e <code>RawModule</code> \u6216\u5176\u5b50\u7c7b\u578b\u3002</p> <p>\u5b83\u4eec\u4e4b\u95f4\u7684\u533a\u522b\u662f <code>simulate</code> \u4f1a\u5728\u5e94\u7528\u7528\u6237\u6fc0\u52b1\u4e4b\u524d\u5bf9\u6a21\u5757\u8fdb\u884c\u521d\u59cb\u5316\u8fc7\u7a0b\u3002</p> <p>\u76f8\u53cd\uff0c<code>simulateRaw</code> \u4e0d\u4f1a\u5e94\u7528\u4efb\u4f55\u521d\u59cb\u5316\u8fc7\u7a0b\uff0c\u7531\u7528\u6237\u8d1f\u8d23\u63d0\u4f9b\u9002\u5f53\u7684\u590d\u4f4d\u6fc0\u52b1\u3002</p> <p>:::info</p> <p><code>simulate</code> \u4e4b\u6240\u4ee5\u53ef\u4ee5\u5b9a\u4e49\u590d\u4f4d\u8fc7\u7a0b\u662f\u56e0\u4e3a <code>Module</code> \u6709\u5df2\u5b9a\u4e49\u7684\u65f6\u949f\u548c\u590d\u4f4d\u7aef\u53e3\u3002\u6b63\u56e0\u4e3a\u5982\u6b64\uff0c\u5728\u4f7f\u7528 ChiselSim \u65f6\uff0c\u4e00\u4e2a\u5e38\u89c1\u7684\u6a21\u5f0f\u662f\u5c06\u4f60\u7684\u88ab\u6d4b\u8bbe\u8ba1\u5305\u88c5\u5728\u4e00\u4e2a\u6d4b\u8bd5\u7ebf\u675f\u4e2d\uff0c\u8fd9\u4e2a\u7ebf\u675f\u662f\u4e00\u4e2a <code>Module</code>\u3002\u6d4b\u8bd5\u7ebf\u675f\u5c06\u63a5\u6536\u521d\u59cb\u5316\u6fc0\u52b1\uff0c\u4efb\u4f55\u66f4\u590d\u6742\u7684\u6fc0\u52b1\uff08\u4f8b\u5982\u591a\u4e2a\u65f6\u949f\uff09\u90fd\u53ef\u4ee5\u5728\u6d4b\u8bd5\u7ebf\u675f\u5185\u90e8\u6d3e\u751f\u3002</p> <p>:::</p> <p>\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 Chisel API \u6587\u6863\u4e2d\u7684 <code>chisel3.simulator.SimulatorAPI</code>\u3002</p>"},{"location":"chisel_explanation/testing/#_2","title":"\u6fc0\u52b1","text":"<p>\u4eff\u771f API \u63a5\u6536\u7528\u6237\u63d0\u4f9b\u7684\u6fc0\u52b1\u5e76\u5c06\u5176\u5e94\u7528\u4e8e\u88ab\u6d4b\u8bbe\u8ba1\uff08DUT\uff09\u3002\u63d0\u4f9b\u4e86\u4e24\u79cd\u5e94\u7528\u6fc0\u52b1\u7684\u673a\u5236\uff1a(1) Peek/Poke API \u548c (2) \u53ef\u91cd\u7528\u6fc0\u52b1\u6a21\u5f0f\u3002\u524d\u8005\u63d0\u4f9b\u7b80\u5355\u3001\u81ea\u7531\u683c\u5f0f\u7684\u65b9\u5f0f\u6765\u5e94\u7528\u7b80\u5355\u7684\u5b9a\u5411\u6fc0\u52b1\u3002\u540e\u8005\u63d0\u4f9b\u9002\u7528\u4e8e\u5e7f\u6cdb\u6a21\u5757\u7684\u5e38\u89c1\u6fc0\u52b1\u3002</p>"},{"location":"chisel_explanation/testing/#peekpoke-api","title":"Peek/Poke API","text":"<p>ChiselSim \u63d0\u4f9b\u4e86\u57fa\u672c\u7684\"peek\"\u3001\"poke\"\u548c\"expect\" API\uff0c\u7528\u4e8e\u5411 Chisel \u6a21\u5757\u63d0\u4f9b\u7b80\u5355\u6fc0\u52b1\u3002\u8fd9\u4e2a API \u662f\u4f5c\u4e3a Chisel \u7c7b\u578b\uff08\u5982 <code>Data</code>\uff09\u7684\u6269\u5c55\u65b9\u6cd5\u5b9e\u73b0\u7684\u3002\u8fd9\u610f\u5473\u7740\u4f60\u7684\u88ab\u6d4b\u8bbe\u8ba1\u7684\u7aef\u53e3\u6709_\u65b0\u7684_\u65b9\u6cd5\u88ab\u5b9a\u4e49\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u7528\u6765\u9a71\u52a8\u6fc0\u52b1\u3002</p> <p>\u8fd9\u4e9b API \u603b\u7ed3\u5982\u4e0b\uff1a</p> <ul> <li><code>poke</code> \u5728\u7aef\u53e3\u4e0a\u8bbe\u7f6e\u4e00\u4e2a\u503c</li> <li><code>peek</code> \u8bfb\u53d6\u7aef\u53e3\u4e0a\u7684\u503c</li> <li><code>expect</code> \u8bfb\u53d6\u7aef\u53e3\u4e0a\u7684\u503c\u5e76\u65ad\u8a00\u5b83\u7b49\u4e8e\u53e6\u4e00\u4e2a\u503c</li> <li><code>step</code> \u5728\u591a\u4e2a\u5468\u671f\u5185\u5207\u6362\u65f6\u949f</li> <li><code>stepUntil</code> \u5207\u6362\u65f6\u949f\u76f4\u5230\u53e6\u4e00\u4e2a\u7aef\u53e3\u4e0a\u51fa\u73b0\u67d0\u4e2a\u6761\u4ef6</li> </ul> <p>\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 Chisel API \u6587\u6863\u4e2d\u7684 <code>chisel3.simulator.PeekPokeAPI</code>\u3002</p>"},{"location":"chisel_explanation/testing/#_3","title":"\u53ef\u91cd\u7528\u6fc0\u52b1\u6a21\u5f0f","text":"<p>\u867d\u7136 Peek/Poke API \u5bf9\u4e8e\u81ea\u7531\u683c\u5f0f\u7684\u6d4b\u8bd5\u5f88\u6709\u7528\uff0c\u4f46\u5728\u6d4b\u8bd5\u8fc7\u7a0b\u4e2d\u7ecf\u5e38\u5e94\u7528\u4e00\u4e9b\u5e38\u89c1\u7684\u6fc0\u52b1\u6a21\u5f0f\u3002\u4f8b\u5982\uff0c\u4f7f\u6a21\u5757\u9000\u51fa\u590d\u4f4d\u72b6\u6001\u6216\u8fd0\u884c\u4eff\u771f\u76f4\u5230\u5b8c\u6210\u3002\u8fd9\u4e9b\u6a21\u5f0f\u5728 <code>chisel3.simulator.stimulus</code> \u5305\u4e2d\u63d0\u4f9b\u3002\u76ee\u524d\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u6fc0\u52b1\uff1a</p> <ul> <li><code>ResetProcedure</code> \u5c06\u4ee5\u53ef\u9884\u6d4b\u7684\u65b9\u5f0f\u590d\u4f4d\u6a21\u5757\u3002\u8fd9\u63d0\u4f9b\u4e86\u8db3\u591f\u7684\u95f4\u9694\uff0c\u4f7f\u521d\u59cb\u5757\u5728\u65f6\u95f4\u96f6\u70b9\u6267\u884c\uff0c\u5bc4\u5b58\u5668/\u5185\u5b58\u7684\u6570\u91cf\u590d\u4f4d\u5468\u671f\u3002\uff08\u8fd9\u4e0e <code>simulate</code> API \u4f7f\u7528\u7684\u6fc0\u52b1\u76f8\u540c\u3002\uff09</li> <li><code>RunUntilFinished</code> \u8fd0\u884c\u6a21\u5757\u6307\u5b9a\u7684\u5468\u671f\u6570\uff0c\u671f\u671b\u4eff\u771f\u4f1a\u5e72\u51c0\u5730\u7ed3\u675f\uff08\u901a\u8fc7 <code>chisel3.stop</code>\uff09\u6216\u5982\u679c\u6ca1\u6709\u65ad\u8a00\u6216\u7ed3\u675f\uff0c\u5c06\u629b\u51fa\u4eff\u771f\u65ad\u8a00\u3002</li> <li><code>RunUntilSuccess</code> \u8fd0\u884c\u6a21\u5757\u6307\u5b9a\u7684\u5468\u671f\u6570\uff0c\u671f\u671b\u6a21\u5757\u5c06\u65ad\u8a00\u6210\u529f\u7aef\u53e3\uff08\u8868\u793a\u6210\u529f\uff09\u6216\u523a\u6fc0\u4f5c\u4e3a\u53c2\u6570\u3002</li> </ul> <p>\u8fd9\u4e9b\u6fc0\u52b1\u65e8\u5728\u901a\u8fc7\u5b83\u4eec\u7684\u5de5\u5382\u65b9\u6cd5\u4f7f\u7528\u3002\u5927\u591a\u6570\u6fc0\u52b1\u4e3a\u4e0d\u540c\u7684\u6a21\u5757\u7c7b\u578b\u63d0\u4f9b\u4e0d\u540c\u7684\u5de5\u5382\u3002\u4f8b\u5982\uff0c<code>ResetProcedure</code> \u5de5\u5382\u6709\u4e24\u4e2a\u65b9\u6cd5\uff1a<code>any</code> \u53ef\u4ee5\u4e3a_\u4efb\u4f55_ Chisel \u6a21\u5757\u751f\u6210\u6fc0\u52b1\uff0c\u800c <code>module</code> \u53ea\u80fd\u4e3a <code>Module</code> \u7684\u5b50\u7c7b\u578b\u751f\u6210\u6fc0\u52b1\u3002\u4e4b\u6240\u4ee5\u6709\u8fd9\u79cd\u5206\u79bb\uff0c\u662f\u56e0\u4e3a\u8fd9\u4e2a\u7279\u5b9a\u7684\u6fc0\u52b1\u9700\u8981\u77e5\u9053\u65f6\u949f\u548c\u590d\u4f4d\u7aef\u53e3\u662f\u4ec0\u4e48\uff0c\u4ee5\u4fbf\u5411\u5b83\u4eec\u5e94\u7528\u590d\u4f4d\u6fc0\u52b1\u3002Chisel <code>Module</code> \u6709\u5df2\u77e5\u7684\u65f6\u949f\u548c\u590d\u4f4d\u7aef\u53e3\uff0c\u8fd9\u5141\u8bb8 <code>module</code> \u6fc0\u52b1\u53ea\u6709\u4e00\u4e2a\u53c2\u6570 \u2014\u2014 \u5e94\u7528\u590d\u4f4d\u7684\u5468\u671f\u6570\u3002\u7136\u800c\uff0cChisel <code>RawModule</code> \u6ca1\u6709\u5df2\u77e5\u7684\u65f6\u949f\u548c\u590d\u4f4d\u7aef\u53e3\uff0c\u7528\u6237\u9700\u8981\u5411\u5de5\u5382\u63d0\u4f9b\u66f4\u591a\u53c2\u6570 \u2014\u2014 \u590d\u4f4d\u5468\u671f\u6570_\u548c_\u83b7\u53d6\u65f6\u949f\u548c\u590d\u4f4d\u7aef\u53e3\u7684\u51fd\u6570\u3002</p> <p>\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 Chisel API \u6587\u6863\u4e2d\u7684 <code>chisel3.simulator.stimulus</code>\u3002</p>"},{"location":"chisel_explanation/testing/#_4","title":"\u793a\u4f8b","text":"<p>\u4e0b\u9762\u7684\u793a\u4f8b\u5c55\u793a\u4e86\u5982\u4f55\u5728 ScalaTest \u4e2d\u57fa\u672c\u4f7f\u7528 ChiselSim\u3002\u8fd9\u663e\u793a\u4e86\u4e00\u4e2a\u5355\u72ec\u7684\u6d4b\u8bd5\u5957\u4ef6 <code>ChiselSimExample</code>\u3002\u4e3a\u4e86\u83b7\u5f97 ChiselSim \u65b9\u6cd5\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u6df7\u5165\u4e86 <code>ChiselSim</code> \u7279\u8d28\u3002\u8fd8\u9009\u62e9\u4e86\u4e00\u4e2a\u6d4b\u8bd5\u98ce\u683c <code>AnyFunSpec</code>\u3002</p> <p>\u5728\u6d4b\u8bd5\u4e2d\uff0c\u6a21\u5757 <code>Foo</code> \u4f7f\u7528\u81ea\u5b9a\u4e49\u6fc0\u52b1\u8fdb\u884c\u6d4b\u8bd5\u3002\u6a21\u5757 <code>Bar</code> \u4f7f\u7528\u53ef\u91cd\u7528\u7684 <code>RunUntilFinished</code> \u6fc0\u52b1\u8fdb\u884c\u6d4b\u8bd5\u3002\u6a21\u5757 <code>Baz</code> \u4f7f\u7528\u53ef\u91cd\u7528\u7684 <code>RunUntilSuccess</code> \u6fc0\u52b1\u8fdb\u884c\u6d4b\u8bd5\u3002\u6240\u6709\u6d4b\u8bd5\u5728\u5f53\u524d\u5f62\u5f0f\u4e0b\u5747\u4f1a\u901a\u8fc7\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\nimport chisel3.simulator.scalatest.ChiselSim\nimport chisel3.simulator.stimulus.{RunUntilFinished, RunUntilSuccess}\nimport chisel3.util.Counter\nimport org.scalatest.funspec.AnyFunSpec\n\nclass ChiselSimExample extends AnyFunSpec with ChiselSim {\n\n  class Foo extends Module {\n    val a, b = IO(Input(UInt(8.W)))\n    val c = IO(Output(chiselTypeOf(a)))\n\n    private val r = Reg(chiselTypeOf(a))\n\n    r :&lt;= a +% b\n    c :&lt;= r\n  }\n\n  describe(\"Baz\") {\n\n    it(\"adds two numbers\") {\n\n      simulate(new Foo) { foo =&gt;\n        // Poke different values on the two input ports.\n        foo.a.poke(1)\n        foo.b.poke(2)\n\n        // Step the clock by one cycle.\n        foo.clock.step(1)\n\n        // Expect that the sum of the two inputs is on the output port.\n        foo.c.expect(3)\n      }\n\n    }\n\n  }\n\n  class Bar extends Module {\n\n    val (_, done) = Counter(true.B, 10)\n\n    when (done) {\n      stop()\n    }\n\n  }\n\n  describe(\"Bar\") {\n\n    it(\"terminates cleanly before 11 cycles have elapsed\") {\n\n      simulate(new Bar)(RunUntilFinished(11))\n\n    }\n\n  }\n\n  class Baz extends Module {\n\n    val success = IO(Output(Bool()))\n\n    val (_, done) = Counter(true.B, 20)\n\n    success :&lt;= done\n\n  }\n\n  describe(\"Baz\") {\n\n    it(\"asserts success before 21 cycles have elapsed\") {\n\n      simulate(new Baz)(RunUntilSuccess(21, _.success))\n\n    }\n\n  }\n\n}\n</code></pre>"},{"location":"chisel_explanation/testing/#scalatest","title":"Scalatest \u652f\u6301","text":"<p>ChiselSim \u63d0\u4f9b\u4e86\u8bb8\u591a\u4e0e Scalatest \u534f\u540c\u5de5\u4f5c\u7684\u7279\u6027\uff0c\u4ee5\u6539\u5584\u6d4b\u8bd5\u4f53\u9a8c\u3002</p>"},{"location":"chisel_explanation/testing/#_5","title":"\u76ee\u5f55\u547d\u540d","text":"<p>\u5728 Scalatest \u73af\u5883\u4e2d\u4f7f\u7528 ChiselSim \u65f6\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5c06\u521b\u5efa\u4e00\u4e2a\u4e0e Scalatest \u6d4b\u8bd5\"\u8303\u56f4\"\u5339\u914d\u7684\u6d4b\u8bd5\u76ee\u5f55\u7ed3\u6784\u3002\u5b9e\u9645\u4e0a\uff0c\u8fd9\u5bfc\u81f4\u4f60\u7684\u6d4b\u8bd5\u6839\u636e\u4f60\u5728 Scalatest \u4e2d\u7684\u7ec4\u7ec7\u65b9\u5f0f\u8fdb\u884c\u7ec4\u7ec7\u3002</p> <p>\u6d4b\u8bd5\u76ee\u5f55\u7684\u6839\u76ee\u5f55\u9ed8\u8ba4\u662f <code>build/chiselsim/</code>\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199 <code>buildDir</code> \u65b9\u6cd5\u6765\u66f4\u6539\u6b64\u8bbe\u7f6e\u3002</p> <p>\u5728\u6d4b\u8bd5\u76ee\u5f55\u4e0b\uff0c\u4f60\u5c06\u83b7\u5f97\u4e00\u4e2a\u9488\u5bf9\u6bcf\u4e2a\u6d4b\u8bd5\u5957\u4ef6\u7684\u76ee\u5f55\u3002\u5728\u5176\u4e0b\uff0c\u4f60\u5c06\u83b7\u5f97\u4e00\u4e2a\u9488\u5bf9\u6bcf\u4e2a\u6d4b\u8bd5\"\u8303\u56f4\"\u7684\u76ee\u5f55\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u4e0a\u9762\u793a\u4f8b\u4e2d\u663e\u793a\u7684\u6d4b\u8bd5\uff0c\u8fd9\u5c06\u4ea7\u751f\u4ee5\u4e0b\u76ee\u5f55\u7ed3\u6784\uff1a</p> <pre><code>build/chiselsim\n\u2514\u2500\u2500 ChiselSimExample\n    \u251c\u2500\u2500 Foo\n    \u2502   \u2514\u2500\u2500 adds-two-numbers\n    \u251c\u2500\u2500 Bar\n    \u2502   \u2514\u2500\u2500 terminates-cleanly-before-11-cycles-have-elapsed\n    \u2514\u2500\u2500 Baz\n        \u2514\u2500\u2500 asserts-success-before-21-cycles-have-elapsed\n</code></pre>"},{"location":"chisel_explanation/testing/#_6","title":"\u547d\u4ee4\u884c\u53c2\u6570","text":"<p>Scalatest \u652f\u6301\u901a\u8fc7\u5176 <code>ConfigMap</code> \u7279\u6027\u5411 Scalatest \u4f20\u9012\u547d\u4ee4\u884c\u53c2\u6570\u3002ChiselSim \u7528\u6539\u8fdb\u7684 API \u5c01\u88c5\u4e86\u6b64\u529f\u80fd\uff0c\u4ee5\u4fbf\u5411\u6d4b\u8bd5\u6dfb\u52a0\u547d\u4ee4\u884c\u53c2\u6570\u3001\u663e\u793a\u5e2e\u52a9\u6587\u672c\u4ee5\u53ca\u68c0\u67e5\u4ec5\u4f20\u9012\u5408\u6cd5\u53c2\u6570\u3002</p> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cChiselSim \u6d4b\u8bd5\u5df2\u7ecf\u4e3a Scalatest \u63d0\u4f9b\u4e86\u51e0\u4e2a\u547d\u4ee4\u884c\u9009\u9879\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u5411 Scalatest \u4f20\u9012 <code>-Dhelp=1</code> \u53c2\u6570\u6765\u67e5\u770b\u8fd9\u4e9b\u9009\u9879\u3002\u4f8b\u5982\uff0c\u8fd9\u662f\u4e0a\u9762\u793a\u4f8b\u4e2d\u6d4b\u8bd5\u7684\u5e2e\u52a9\u6587\u672c\uff1a</p> <pre><code>Usage: &lt;ScalaTest&gt; [-D&lt;name&gt;=&lt;value&gt;...]\n\nThis ChiselSim ScalaTest test supports passing command line arguments via\nScalaTest's \"config map\" feature.  To access this, append `-D&lt;name&gt;=&lt;value&gt;` for\na legal option listed below.\n\nOptions:\n\n  chiselOpts\n      additional options to pass to the Chisel elaboration\n  emitVcd\n      compile with VCD waveform support and start dumping waves at time zero\n  firtoolOpts\n      additional options to pass to the firtool compiler\n  help\n      display this help text\n</code></pre> <p>\u8fd9\u4e9b\u9009\u9879\u4e2d\u6700\u5e38\u7528\u7684\u662f <code>-DemitVcd=1</code>\u3002\u8fd9\u5c06\u5bfc\u81f4\u4f60\u7684\u6d4b\u8bd5\u5728\u6267\u884c\u65f6\u8f6c\u50a8\u503c\u53d8\u5316\u8f6c\u50a8\uff08VCD\uff09\u6ce2\u5f62\u3002\u5982\u679c\u6d4b\u8bd5\u5931\u8d25\uff0c\u8fd9\u5bf9\u4e8e\u8c03\u8bd5\u4e3a\u4ec0\u4e48\u5931\u8d25\u975e\u5e38\u6709\u7528\u3002</p> <p>\u4f60\u8fd8\u53ef\u4ee5\u9009\u62e9\u6027\u5730\u5c06\u5176\u4ed6\u547d\u4ee4\u884c\u9009\u9879\u6df7\u5165\u5230 ChiselSim Scalatest \u6d4b\u8bd5\u5957\u4ef6\u4e2d\uff0c\u8fd9\u4e9b\u9009\u9879\u5728 ChiselSim \u4e2d\u662f_\u4e0d\u53ef\u7528_\u7684\u3002\u5b83\u4eec\u5728 <code>chisel3.simulator.scalatest.Cli</code> \u5bf9\u8c61\u4e2d\u53ef\u7528\uff1a</p> <ul> <li><code>EmitFsdb</code> \u6dfb\u52a0\u4e00\u4e2a <code>-DemitFsdb=1</code> \u9009\u9879\uff0c\u5982\u679c\u4eff\u771f\u5668\u652f\u6301\uff0c\u5c06\u5bfc\u81f4\u751f\u6210 FSDB \u6ce2\u5f62\u3002</li> <li><code>EmitVpd</code> \u6dfb\u52a0\u4e00\u4e2a <code>-DemitFsdb=1</code> \u9009\u9879\uff0c\u5982\u679c\u4eff\u771f\u5668\u652f\u6301\uff0c\u5c06\u5bfc\u81f4\u751f\u6210 FSDB \u6ce2\u5f62\u3002</li> <li><code>Scale</code> \u6dfb\u52a0\u4e00\u4e2a <code>-Dscale=&lt;float&gt;</code> \u9009\u9879\u3002\u8fd9\u4e3a\u7528\u6237\u63d0\u4f9b\u4e86\u4e00\u79cd\u5728\u6d4b\u8bd5\u65f6\u653e\u5927\u6216\u7f29\u5c0f\u6d4b\u8bd5\u7684\u65b9\u5f0f\uff0c\u4f8b\u5982\uff0c\u5ef6\u957f\u6d4b\u8bd5\u8fd0\u884c\u65f6\u95f4\u3002\u6b64\u7279\u6027\u901a\u8fc7\u8be5\u7279\u8d28\u63d0\u4f9b\u7684 <code>scaled</code> \u65b9\u6cd5\u8bbf\u95ee\u3002</li> <li><code>Simulator</code> \u6dfb\u52a0\u4e00\u4e2a <code>-Dsimulator=&lt;simulator-name&gt;</code> \u53c2\u6570\u3002\u8fd9\u5141\u8bb8\u5728\u6d4b\u8bd5\u65f6\u9009\u62e9 VCS \u6216 verilator \u4f5c\u4e3a\u4eff\u771f\u540e\u7aef\u3002</li> </ul> <p>\u5982\u679c\u4f60\u60f3\u6dfb\u52a0\u7684\u547d\u4ee4\u884c\u9009\u9879\u5c1a\u4e0d\u53ef\u7528\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 <code>chisel3.simulator.scalatest.HasCliOptions</code> \u4e2d\u63d0\u4f9b\u7684\u51e0\u79cd\u65b9\u6cd5\u4e4b\u4e00\u5411\u6d4b\u8bd5\u6dfb\u52a0\u81ea\u5b9a\u4e49\u9009\u9879\u3002\u6700\u7075\u6d3b\u7684\u65b9\u6cd5\u662f <code>addOption</code>\u3002\u8fd9\u5141\u8bb8\u4f60\u6dfb\u52a0\u4e00\u4e2a\u9009\u9879\uff0c\u8be5\u9009\u9879\u53ef\u4ee5\u5728\u4eff\u771f\u4e2d\u66f4\u6539\u4efb\u4f55\u5185\u5bb9\uff0c\u5305\u62ec Chisel \u9610\u660e\u3001FIRRTL \u7f16\u8bd1\u6216\u901a\u7528\u6216\u540e\u7aef\u7279\u5b9a\u8bbe\u7f6e\u3002</p> <p>\u66f4\u5e38\u89c1\u7684\u662f\uff0c\u4f60\u53ea\u60f3\u5411\u6d4b\u8bd5\u6dfb\u52a0\u4e00\u4e2a\u6574\u6570\u3001\u53cc\u7cbe\u5ea6\u3001\u5b57\u7b26\u4e32\u6216\u7c7b\u4f3c\u6807\u5fd7\u7684\u9009\u9879\u3002\u4e3a\u6b64\uff0c\u63d0\u4f9b\u4e86\u66f4\u7b80\u5355\u7684\u9009\u9879_\u5de5\u5382_(<code>chisel3.simulator.scalatest.CliOption.{simple, double, int, string, flag}</code>)\u3002\u9009\u9879\u58f0\u660e\u540e\uff0c\u53ef\u4ee5\u5728\u6d4b\u8bd5_\u5185\u90e8_\u4f7f\u7528 <code>getOption</code> \u65b9\u6cd5\u8bbf\u95ee\u3002</p> <p>:::warning</p> <p><code>getOption</code> \u65b9\u6cd5\u53ea\u80fd\u5728_\u6d4b\u8bd5\u5185\u90e8_\u4f7f\u7528\u3002\u5982\u679c\u5728\u6d4b\u8bd5\u5916\u90e8\u4f7f\u7528\uff0c\u5c06\u5bfc\u81f4\u8fd0\u884c\u65f6\u5f02\u5e38\u3002</p> <p>:::</p> <p>\u4e0b\u9762\u7684\u793a\u4f8b\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 <code>int</code> \u9009\u9879\u8bbe\u7f6e\u6d4b\u8bd5\u65f6\u53ef\u914d\u7f6e\u7684\u79cd\u5b50\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:reset:silent\nimport chisel3._\nimport chisel3.simulator.scalatest.ChiselSim\nimport chisel3.simulator.scalatest.HasCliOptions.CliOption\nimport chisel3.util.random.LFSR\nimport circt.stage.ChiselStage\nimport org.scalatest.funspec.AnyFunSpec\n\nclass ChiselSimExample extends AnyFunSpec with ChiselSim {\n\n  CliOption.int(\"seed\", \"the seed to use for the test\")\n\n  class Foo(seed: Int) extends Module {\n    private val lfsr = LFSR(64, seed = Some(seed))\n  }\n\n  describe(\"Foo\") {\n    it(\"generates FIRRTL for a module with a test-time configurable seed\") {\n      ChiselStage.emitCHIRRTL(new Foo(getOption[Int](\"seed\").getOrElse(42)))\n    }\n  }\n\n}\n</code></pre> <p>:::warning</p> <p>\u5bf9\u6d4b\u8bd5\u9009\u9879\u8981\u8282\u4fed\u3002\u867d\u7136\u5b83\u4eec\u53ef\u80fd\u5f88\u6709\u7528\uff0c\u4f46\u5b83\u4eec\u53ef\u80fd\u8868\u660e\u6d4b\u8bd5\u4e2d\u7684\u4e00\u79cd\u53cd\u6a21\u5f0f\u3002\u5982\u679c\u4f60\u7684\u6d4b\u8bd5\u662f\u6d4b\u8bd5\u65f6\u53c2\u6570\u5316\u7684\uff0c\u4f60\u5c31\u4e0d\u518d\u603b\u662f\u6d4b\u8bd5\u76f8\u540c\u7684\u5185\u5bb9\u3002\u8fd9\u53ef\u80fd\u5728\u6d4b\u8bd5\u4f60\u7684 Chisel \u751f\u6210\u5668\u65f6\u4ea7\u751f\u6f0f\u6d1e\uff0c\u5982\u679c\u6ca1\u6709\u6d4b\u8bd5\u6b63\u786e\u7684\u53c2\u6570\u3002</p> <p>\u8003\u8651\u5728_\u6d4b\u8bd5\u5185\u90e8_\u6216\u901a\u8fc7\u7f16\u5199\u591a\u4e2a Scalatest \u6d4b\u8bd5\u6765\u904d\u5386\u6d4b\u8bd5\u53c2\u6570\u3002</p> <p>:::</p>"},{"location":"chisel_explanation/testing/#filecheck","title":"FileCheck","text":"<p>\u6709\u65f6\uff0c\u76f4\u63a5\u68c0\u67e5\u751f\u6210\u5668\u7684\u7ed3\u679c\u662f\u8db3\u591f\u7684\u3002\u8fd9\u79cd\u6d4b\u8bd5\u7b56\u7565\u5728\u4f60\u8bd5\u56fe\u521b\u5efa\u975e\u5e38\u7279\u5b9a\u7684 FIRRTL \u6216 SystemVerilog \u7ed3\u6784\u6216\u4fdd\u8bc1\u7279\u5b9a\u6784\u9020\u7684\u786e\u5207\u547d\u540d\u65f6\u7279\u522b\u76f8\u5173\u3002</p> <p>\u867d\u7136\u7b80\u5355\u7684\u6d4b\u8bd5\u53ef\u4ee5\u901a\u8fc7\u5b57\u7b26\u4e32\u6bd4\u8f83\u6765\u5b8c\u6210\uff0c\u4f46\u8fd9\u901a\u5e38\u662f\u4e0d\u591f\u7684\uff0c\u56e0\u4e3a\u9700\u8981\u5bf9\u7279\u5b9a\u884c\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u6355\u83b7\u548c\u6392\u5e8f\u6df7\u5408\u4f7f\u7528\u3002\u4e3a\u6b64\uff0cChisel \u63d0\u4f9b\u4e86\u4e00\u79cd\u539f\u751f\u65b9\u5f0f\u6765\u7f16\u5199 FileCheck \u6d4b\u8bd5\u3002</p> <p>:::info</p> <p>\u4f7f\u7528 FileCheck \u6d4b\u8bd5\u9700\u8981\u5b89\u88c5 FileCheck \u4e8c\u8fdb\u5236\u6587\u4ef6\u3002FileCheck \u901a\u5e38\u4f5c\u4e3a LLVM \u7684\u4e00\u90e8\u5206\u6253\u5305\u3002</p> <p>:::</p> <p>\u50cf ChiselSim \u4e00\u6837\uff0c\u63d0\u4f9b\u4e86\u4e24\u79cd\u4e0d\u540c\u7684\u7279\u8d28\u7528\u4e8e\u7f16\u5199 FileCheck \u6d4b\u8bd5\uff1a</p> <ul> <li><code>chisel3.testing.FileCheck</code></li> <li><code>chisel3.testing.scalatest.FileCheck</code></li> </ul> <p>\u4e24\u8005\u63d0\u4f9b\u76f8\u540c\u7684 API\uff0c\u4f46\u540e\u8005\u4f1a\u5c06\u4e2d\u95f4\u6587\u4ef6\u5199\u5165\u6d3e\u751f\u81ea ScalaTest \u5957\u4ef6\u548c\u8303\u56f4\u540d\u79f0\u7684\u76ee\u5f55\u4e2d\u3002</p> <p>\u76ee\u524d\uff0c\u4ec5\u63d0\u4f9b\u4e00\u4e2a FileCheck API\uff1a<code>fileCheck</code>\u3002\u8be5 API \u5b9e\u73b0\u4e3a <code>String</code> \u7684\u6269\u5c55\u65b9\u6cd5\uff0c\u5e76\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff1a(1) FileCheck \u7684\u53c2\u6570\u5217\u8868\u548c (2) \u5305\u542b\u5185\u8054 FileCheck \u6d4b\u8bd5\u7684\u5b57\u7b26\u4e32\u3002\u8f93\u5165\u5b57\u7b26\u4e32\u548c\u68c0\u67e5\u5b57\u7b26\u4e32\u90fd\u5c06\u88ab\u5199\u5165\u78c1\u76d8\uff0c\u5e76\u5728\u5931\u8d25\u65f6\u4fdd\u7559\uff0c\u4ee5\u4fbf\u5728\u9700\u8981\u65f6\u53ef\u4ee5\u624b\u52a8\u91cd\u65b0\u8fd0\u884c\u3002</p> <p>\u5982\u679c <code>fileCheck</code> \u65b9\u6cd5\u6210\u529f\uff0c\u5219\u4e0d\u8fd4\u56de\u4efb\u4f55\u5185\u5bb9\u3002\u5982\u679c\u5931\u8d25\uff0c\u5c06\u629b\u51fa\u5f02\u5e38\uff0c\u6307\u793a\u5931\u8d25\u539f\u56e0\u548c\u671f\u671b\u5b57\u7b26\u4e32\u672a\u5339\u914d\u7684\u8be6\u7ec6\u4fe1\u606f\u3002</p> <p>\u6709\u5173 API \u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 Chisel API \u6587\u6863\u4e2d\u7684 <code>chisel3.testing.FileCheck</code>\u3002\u6709\u5173 FileCheck \u53ca\u5176\u7528\u6cd5\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 FileCheck \u6587\u6863\u3002</p> <p>:::note</p> <p>FileCheck \u662f LLVM \u751f\u6001\u7cfb\u7edf\u4e2d\u5e7f\u6cdb\u7528\u4e8e\u7f16\u8bd1\u5668\u6d4b\u8bd5\u7684\u5de5\u5177\u3002CIRCT\uff0c\u5c06 Chisel \u751f\u6210\u7684 FIRRTL \u8f6c\u6362\u4e3a SystemVerilog \u7684\u7f16\u8bd1\u5668\uff0c\u91cd\u5ea6\u4f7f\u7528 FileCheck \u8fdb\u884c\u81ea\u8eab\u6d4b\u8bd5\u3002</p> <p>:::</p> <p>\u5728\u7f16\u5199 FileCheck \u6d4b\u8bd5\u65f6\uff0c\u4f60\u901a\u5e38\u4f1a\u4f7f\u7528 Chisel API \u5c06 Chisel \u7535\u8def\u8f6c\u6362\u4e3a FIRRTL \u6216 SystemVerilog\u3002\u8fd9\u5728 <code>circt.stage.ChiselStage</code> \u5bf9\u8c61\u4e2d\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4f9b\u9009\u62e9\uff1a</p> <ul> <li><code>emitCHIRRTL</code> \u751f\u6210\u5e26\u6709\u5c11\u91cf Chisel \u6269\u5c55\u7684 FIRRTL</li> <li><code>emitSystemVerilog</code> \u751f\u6210 SystemVerilog</li> </ul> <p>\u8fd9\u4e24\u79cd\u65b9\u6cd5\u90fd\u63a5\u53d7\u4e00\u4e2a\u53ef\u9009\u7684 <code>args</code> \u53c2\u6570\uff0c\u7528\u4e8e\u8bbe\u7f6e Chisel \u9610\u660e\u9009\u9879\u3002\u540e\u4e00\u79cd\u65b9\u6cd5\u8fd8\u6709\u4e00\u4e2a\u989d\u5916\u7684\u53ef\u9009 <code>firtoolOpts</code> \u53c2\u6570\uff0c\u7528\u4e8e\u63a7\u5236 <code>firtool</code>\uff08FIRRTL \u7f16\u8bd1\u5668\uff09\u9009\u9879\u3002</p> <p>\u5728\u672a\u5411 <code>emitSystemVerilog</code> \u63d0\u4f9b\u4efb\u4f55 <code>firtoolOpts</code> \u7684\u60c5\u51b5\u4e0b\uff0c\u751f\u6210\u7684 SystemVerilog \u53ef\u80fd\u7531\u4e8e <code>firtool</code> \u7684\u9ed8\u8ba4 SystemVerilog \u964d\u7ea7\u3001\u53d1\u5c04\u548c\u7f8e\u5316\u800c\u96be\u4ee5\u4e0e FileCheck \u4e00\u8d77\u4f7f\u7528\u3002\u4e3a\u4e86\u66f4\u5bb9\u6613\u5730\u7f16\u5199\u6d4b\u8bd5\uff0c\u6211\u4eec\u5efa\u8bae\u4f7f\u7528\u4ee5\u4e0b\u9009\u9879\uff1a</p> <ul> <li> <p><code>-loweringOptions=emittedLineLength=160</code> \u589e\u52a0\u5141\u8bb8\u7684\u884c\u957f\u5ea6\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c<code>firtool</code> \u4f1a\u6362\u884c\u8d85\u8fc7 80 \u4e2a\u5b57\u7b26\u7684\u884c\u3002\u4f60\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u4e00\u4e2a_\u975e\u5e38\u957f_\u7684\u884c\u957f\u5ea6\uff08\u4f8b\u5982\uff0c8192\uff09\u6765\u5b8c\u5168\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\u3002</p> </li> <li> <p><code>-loweringOptions=disallowLocalVariables</code> \u7981\u7528\u5728 always \u5757\u4e2d\u751f\u6210 <code>automatic logic</code> \u4e34\u65f6\u53d8\u91cf\u3002\u8fd9\u53ef\u80fd\u5bfc\u81f4\u4e34\u65f6\u53d8\u91cf\u5728 always \u5757\u4e2d\u6ea2\u51fa\uff0c\u8fd9\u53ef\u80fd\u4f1a\u7a0d\u5fae\u51fa\u4e4e\u610f\u6599\u3002</p> </li> </ul> <p>\u6709\u5173 <code>firtool</code> \u53ca\u5176\u964d\u7ea7\u9009\u9879\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 CIRCT \u7684 Verilog \u751f\u6210\u6587\u6863\u6216\u8c03\u7528 <code>firtool -help</code> \u83b7\u53d6\u6240\u6709\u652f\u6301\u9009\u9879\u7684\u5b8c\u6574\u5217\u8868\u3002</p>"},{"location":"chisel_explanation/testing/#_7","title":"\u793a\u4f8b","text":"<p>\u4e0b\u9762\u7684\u793a\u4f8b\u5c55\u793a\u4e86\u4e00\u4e2a FileCheck \u6d4b\u8bd5\uff0c\u68c0\u67e5\u4e00\u4e2a\u6a21\u5757\u5177\u6709\u7279\u5b9a\u540d\u79f0\uff0c\u5e76\u4e14\u5728\u5176\u5185\u90e8\u5177\u6709\u4e00\u4e9b\u9884\u671f\u7684\u5185\u5bb9\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u6b64\u6d4b\u8bd5\u68c0\u67e5\u5e38\u91cf\u4f20\u64ad\u662f\u5426\u6309\u9884\u671f\u53d1\u751f\u3002\u6309\u5f53\u524d\u65b9\u5f0f\u7f16\u5199\u7684\u6d4b\u8bd5\u5c06\u4f1a\u901a\u8fc7\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent:reset\nimport chisel3._\nimport chisel3.testing.scalatest.FileCheck\nimport circt.stage.ChiselStage\nimport org.scalatest.funspec.AnyFunSpec\n\nclass FileCheckExample extends AnyFunSpec with FileCheck {\n\n  class Baz extends RawModule {\n\n    val out = IO(Output(UInt(32.W)))\n\n    out :&lt;= 1.U(32.W) + 3.U(32.W)\n\n  }\n\n  describe(\"Foo\") {\n\n    it(\"should simplify the constant computation in its body\") {\n\n      ChiselStage.emitSystemVerilog(new Baz).fileCheck()(\n        \"\"\"|CHECK:      module Baz(\n           |CHECK-NEXT:   output [31:0] out\n           |CHECK:        assign out = 32'h4;\n           |CHECK:      endmodule\n           |\"\"\".stripMargin\n        )\n\n    }\n\n  }\n\n}\n</code></pre> <p>:::note</p> <p>FileCheck \u6709_\u5f88\u591a_\u6709\u7528\u7684\u7279\u6027\u5728\u6b64\u793a\u4f8b\u4e2d\u672a\u663e\u793a\u3002</p> <p><code>CHECK-SAME</code> \u5141\u8bb8\u68c0\u67e5\u540c\u4e00\u884c\u4e0a\u7684\u5339\u914d\u3002<code>CHECK-NOT</code> \u786e\u4fdd\u4e0d\u53d1\u751f\u5339\u914d\u3002<code>CHECK-COUNT-&lt;n&gt;</code> \u5c06\u68c0\u67e5 <code>n</code> \u6b21\u5339\u914d\u3002<code>CHECK-DAG</code> \u5c06\u5141\u8bb8\u4e00\u7cfb\u5217\u5339\u914d\u4ee5\u4efb\u4f55\u987a\u5e8f\u53d1\u751f\u3002</p> <p>\u6700\u5f3a\u5927\u7684\uff0cFileCheck \u5141\u8bb8\u5185\u8054\u6b63\u5219\u8868\u8fbe\u5f0f\u5e76\u5c06\u7ed3\u679c\u4fdd\u5b58\u5728\u5b57\u7b26\u4e32\u66ff\u6362\u5757\u4e2d\uff0c\u7a0d\u540e\u53ef\u4ee5\u4f7f\u7528\u3002\u8fd9\u5728\u4f60\u5173\u5fc3\u6355\u83b7\u4e00\u4e2a\u540d\u79f0\u4f46\u4e0d\u5173\u5fc3\u5b9e\u9645\u540d\u79f0\u65f6\u5f88\u6709\u7528\u3002</p> <p>\u6709\u5173\u66f4\u8be6\u7ec6\u7684\u6587\u6863\uff0c\u8bf7\u53c2\u89c1 FileCheck \u6587\u6863\u3002</p> <p>:::</p>"},{"location":"chisel_explanation/unconnected-wires/","title":"\u672a\u8fde\u63a5\u7684\u7ebf","text":"<p>\u65e0\u6548\u5316 API (#645) \u4e3a Chisel \u6dfb\u52a0\u4e86\u5c06\u672a\u8fde\u63a5\u7684\u7ebf\u4f5c\u4e3a\u9519\u8bef\u62a5\u544a\u7684\u652f\u6301\u3002</p> <p>\u5728\u8fd9\u4e2a pull request \u4e4b\u524d\uff0cChisel \u4f1a\u81ea\u52a8\u4e3a <code>Module IO()</code> \u548c\u6bcf\u4e2a <code>Wire()</code> \u5b9a\u4e49\u751f\u6210\u4e00\u4e2a firrtl <code>is invalid</code>\u3002 \u8fd9\u4f7f\u5f97\u68c0\u6d4b\u8f93\u51fa\u4fe1\u53f7\u4ece\u672a\u88ab\u9a71\u52a8\u7684\u60c5\u51b5\u53d8\u5f97\u56f0\u96be\u3002 Chisel \u73b0\u5728\u652f\u6301\u4e00\u4e2a <code>DontCare</code> \u5143\u7d20\uff0c\u5b83\u53ef\u4ee5\u8fde\u63a5\u5230\u8f93\u51fa\u4fe1\u53f7\uff0c\u8868\u660e\u8be5\u4fe1\u53f7\u662f\u6545\u610f\u4e0d\u88ab\u9a71\u52a8\u7684\u3002 \u9664\u975e\u4fe1\u53f7\u7531\u786c\u4ef6\u9a71\u52a8\u6216\u8fde\u63a5\u5230 <code>DontCare</code>\uff0c\u5426\u5219 Firrtl \u5c06\u4f1a\u62a5\u9519\"not fully initialized\"\uff08\u672a\u5b8c\u5168\u521d\u59cb\u5316\uff09\u3002</p>"},{"location":"chisel_explanation/unconnected-wires/#api","title":"API","text":"<p>\u8f93\u51fa\u4fe1\u53f7\u53ef\u4ee5\u8fde\u63a5\u5230 DontCare\uff0c\u5728\u751f\u6210\u76f8\u5e94\u7684 firrtl \u65f6\u5c06\u751f\u6210 <code>is invalid</code>\u3002</p> <p><pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\nimport chisel3._\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\n\nclass Out extends Bundle { \n  val debug = Bool()\n  val debugOption = Bool()\n}\nval io = new Bundle { val out = new Out }\n</code></pre></p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:compile-only\nio.out.debug := true.B\nio.out.debugOption := DontCare\n</code></pre> <p>\u8fd9\u8868\u660e\u4fe1\u53f7 <code>io.out.debugOption</code> \u662f\u6545\u610f\u4e0d\u88ab\u9a71\u52a8\u7684\uff0cfirrtl \u4e0d\u5e94\u8be5\u4e3a\u8fd9\u4e2a\u4fe1\u53f7\u53d1\u51fa\"not fully initialized\"\u9519\u8bef\u3002</p> <p>\u8fd9\u4e5f\u53ef\u4ee5\u5e94\u7528\u4e8e\u805a\u5408\u7c7b\u578b\u548c\u5355\u4e2a\u4fe1\u53f7\uff1a</p> <p><pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible\nimport chisel3._\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:silent\nimport chisel3._\nclass ModWithVec extends Module {\n  // ...\n  val nElements = 5\n  val io = IO(new Bundle {\n    val outs = Output(Vec(nElements, Bool()))\n  })\n  io.outs &lt;&gt; DontCare\n  // ...\n}\n\nclass TrivialInterface extends Bundle {\n  val in  = Input(Bool())\n  val out = Output(Bool())\n}\n\nclass ModWithTrivalInterface extends Module {\n  // ...\n  val io = IO(new TrivialInterface)\n  io &lt;&gt; DontCare\n  // ...\n}\n</code></pre></p>"},{"location":"chisel_explanation/unconnected-wires/#_2","title":"\u786e\u5b9a\u672a\u8fde\u63a5\u7684\u5143\u7d20","text":"<p>\u6211\u6709\u4e00\u4e2a\u5305\u542b 42 \u4e2a\u7ebf\u7684\u63a5\u53e3\u3002 \u5b83\u4eec\u4e2d\u54ea\u4e00\u4e2a\u672a\u8fde\u63a5\uff1f</p> <p>firrtl \u9519\u8bef\u6d88\u606f\u5e94\u8be5\u5305\u542b\u7c7b\u4f3c\u8fd9\u6837\u7684\u5185\u5bb9\uff1a <pre><code>firrtl.passes.CheckInitialization$RefNotInitializedException:  @[:@6.4] : [module Router]  Reference io is not fully initialized.\n   @[Decoupled.scala 38:19:@48.12] : node _GEN_23 = mux(and(UInt&lt;1&gt;(\"h1\"), eq(UInt&lt;2&gt;(\"h3\"), _T_84)), _GEN_2, VOID) @[Decoupled.scala 38:19:@48.12]\n   @[Router.scala 78:30:@44.10] : node _GEN_36 = mux(_GEN_0.ready, _GEN_23, VOID) @[Router.scala 78:30:@44.10]\n   @[Router.scala 75:26:@39.8] : node _GEN_54 = mux(io.in.valid, _GEN_36, VOID) @[Router.scala 75:26:@39.8]\n   @[Router.scala 70:50:@27.6] : node _GEN_76 = mux(io.load_routing_table_request.valid, VOID, _GEN_54) @[Router.scala 70:50:@27.6]\n   @[Router.scala 65:85:@19.4] : node _GEN_102 = mux(_T_62, VOID, _GEN_76) @[Router.scala 65:85:@19.4]\n   : io.outs[3].bits.body &lt;= _GEN_102\n</code></pre> \u7b2c\u4e00\u884c\u662f\u521d\u59cb\u9519\u8bef\u62a5\u544a\u3002 \u540e\u7eed\u7f29\u8fdb\u5e76\u4ee5\u6e90\u4ee3\u7801\u884c\u4fe1\u606f\u5f00\u5934\u7684\u884c\u8868\u793a\u6d89\u53ca\u6709\u95ee\u9898\u4fe1\u53f7\u7684\u8fde\u63a5\u3002 \u4e0d\u5e78\u7684\u662f\uff0c\u5982\u679c\u8fd9\u4e9b\u662f\u6d89\u53ca\u590d\u7528\u5668\u7684 <code>when</code> \u6761\u4ef6\uff0c\u53ef\u80fd\u5f88\u96be\u89e3\u8bfb\u3002 \u7ec4\u4e2d\u7684\u6700\u540e\u4e00\u884c\uff0c\u7f29\u8fdb\u5e76\u4ee5 <code>:</code> \u5f00\u5934\u7684\u884c\u5e94\u8be5\u6307\u793a\u672a\u521d\u59cb\u5316\u7684\u4fe1\u53f7\u7ec4\u4ef6\u3002 \u8fd9\u4e2a\u793a\u4f8b\uff08\u6765\u81ea Router \u6559\u7a0b\uff09 \u662f\u5728\u8f93\u51fa\u961f\u5217\u4f4d\u672a\u88ab\u521d\u59cb\u5316\u65f6\u4ea7\u751f\u7684\u3002 \u65e7\u4ee3\u7801\u662f\uff1a <pre><code>  io.outs.foreach { out =&gt; out.noenq() }\n</code></pre> \u5b83\u521d\u59cb\u5316\u4e86\u961f\u5217\u7684 <code>valid</code> \u4f4d\uff0c\u4f46\u6ca1\u6709\u521d\u59cb\u5316\u5b9e\u9645\u7684\u8f93\u51fa\u503c\u3002 \u4fee\u590d\u662f\uff1a <pre><code>  io.outs.foreach { out =&gt;\n    out.bits := 0.U.asTypeOf(out.bits)\n    out.noenq()\n  }\n</code></pre></p>"},{"location":"chisel_explanation/warnings/","title":"\u8b66\u544a","text":"<p>Chisel \u4e2d\u7684\u8b66\u544a\u7528\u4e8e\u6807\u8bb0\u65e7 API \u6216\u8bed\u4e49\u7684\u5f03\u7528\uff0c\u4ee5\u4fbf\u540e\u7eed\u79fb\u9664\u3002 \u4f5c\u4e3a\u826f\u597d\u7684\u8f6f\u4ef6\u5b9e\u8df5\uff0c\u5efa\u8bae Chisel \u7528\u6237\u4f7f\u7528 <code>--warnings-as-errors</code> \u5c06\u8b66\u544a\u89c6\u4e3a\u9519\u8bef\uff1b \u4f46\u662f\uff0c\u5f53\u5347\u7ea7 Chisel \u7248\u672c\u65f6\uff0c\u8fd9\u4e2a\u7c97\u7c92\u5ea6\u7684\u9009\u9879\u53ef\u80fd\u4f1a\u5f15\u5165\u5927\u91cf\u8b66\u544a\uff0c\u4ece\u800c\u4ea7\u751f\u95ee\u9898\u3002 \u8bf7\u53c2\u9605\u4e0b\u9762\u7684\u8b66\u544a\u914d\u7f6e\u4e86\u89e3\u5904\u7406\u5927\u91cf\u8b66\u544a\u7684\u6280\u5de7\u3002</p>"},{"location":"chisel_explanation/warnings/#_2","title":"\u8b66\u544a\u914d\u7f6e","text":"<p>\u53d7 Scala \u4e2d <code>-Wconf</code> \u7684\u542f\u53d1\uff0c Chisel \u901a\u8fc7\u547d\u4ee4\u884c\u9009\u9879 <code>--warn-conf</code> \u548c <code>--warn-conf-file</code> \u652f\u6301\u5bf9\u8b66\u544a\u884c\u4e3a\u8fdb\u884c\u7ec6\u7c92\u5ea6\u63a7\u5236\u3002</p>"},{"location":"chisel_explanation/warnings/#_3","title":"\u57fa\u672c\u64cd\u4f5c","text":"<p><code>--warn-conf</code> \u63a5\u53d7\u4e00\u4e2a\u7531\u9017\u53f7\u5206\u9694\u7684 <code>&lt;\u8fc7\u6ee4\u5668&gt;:&lt;\u52a8\u4f5c&gt;</code> \u5bf9\u5e8f\u5217\u3002 \u5f53 Chisel \u9047\u5230\u8b66\u544a\u65f6\uff0c\u4f1a\u4ece\u5de6\u5230\u53f3\u68c0\u67e5\u8fd9\u4e2a\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e2a\u5bf9\uff0c\u770b\u770b <code>\u8fc7\u6ee4\u5668</code> \u662f\u5426\u5339\u914d\u8be5\u8b66\u544a\u3002 \u7b2c\u4e00\u4e2a\u5339\u914d\u7684 <code>\u8fc7\u6ee4\u5668</code> \u5bf9\u5e94\u7684 <code>\u52a8\u4f5c</code> \u5c06\u7528\u4e8e\u8be5\u7279\u5b9a\u8b66\u544a\u3002 \u5982\u679c\u6ca1\u6709 <code>\u8fc7\u6ee4\u5668</code> \u5339\u914d\uff0c\u5219\u4f7f\u7528\u9ed8\u8ba4\u884c\u4e3a\u53d1\u51fa\u8b66\u544a\u3002</p> <p><code>--warn-conf</code> \u53ef\u4ee5\u6307\u5b9a\u4efb\u610f\u6b21\u6570\u3002 \u8f83\u65e9\u4f7f\u7528\u7684 <code>--warn-conf</code> \u4f18\u5148\u7ea7\u9ad8\u4e8e\u8f83\u665a\u4f7f\u7528\u7684\uff0c\u8fd9\u4e0e\u5728\u5355\u4e2a <code>--warn-conf</code> \u4e2d\u68c0\u67e5 <code>\u8fc7\u6ee4\u5668</code> \u65f6\u4ece\u5de6\u5230\u53f3\u9012\u51cf\u7684\u4f18\u5148\u7ea7\u76f8\u540c\u3002 \u4f5c\u4e3a\u4e00\u4e2a\u601d\u7ef4\u6a21\u578b\uff0c\u7528\u6237\u53ef\u4ee5\u5047\u88c5\u6240\u6709\u7684 <code>--warn-conf</code> \u53c2\u6570\u90fd\u8fde\u63a5\u5728\u4e00\u8d77\uff08\u7528\u9017\u53f7\u5206\u9694\uff09\u5f62\u6210\u4e00\u4e2a\u5355\u72ec\u7684\u53c2\u6570\u3002</p>"},{"location":"chisel_explanation/warnings/#_4","title":"\u8b66\u544a\u914d\u7f6e\u6587\u4ef6","text":"<p><code>--warn-conf-file</code> \u63a5\u53d7\u4e00\u4e2a\u5305\u542b\u76f8\u540c\u683c\u5f0f\u7684 <code>&lt;\u8fc7\u6ee4\u5668&gt;:&lt;\u52a8\u4f5c&gt;</code> \u5bf9\u7684\u6587\u4ef6\uff0c\u8fd9\u4e9b\u5bf9\u7528\u6362\u884c\u7b26\u5206\u9694\u3002 \u4ee5 <code>#</code> \u5f00\u5934\u7684\u884c\u5c06\u88ab\u89c6\u4e3a\u6ce8\u91ca\u5e76\u5ffd\u7565\u3002 <code>\u8fc7\u6ee4\u5668</code> \u7684\u68c0\u67e5\u4f18\u5148\u7ea7\u4ece\u6587\u4ef6\u7684\u4e0a\u5230\u4e0b\u9012\u51cf\u3002</p> <p>\u4e00\u4e2a\u547d\u4ee4\u884c\u53ef\u4ee5\u5305\u542b\u4efb\u610f\u6570\u91cf\u7684 <code>--warn-conf-file</code> \u548c\u4efb\u610f\u6570\u91cf\u7684 <code>--warn-conf</code> \u53c2\u6570\u3002 \u6240\u6709 <code>--warn-conf*</code> \u53c2\u6570\u4e2d\u7684\u8fc7\u6ee4\u5668\u5c06\u6309\u7167\u76f8\u540c\u7684\u4ece\u5de6\u5230\u53f3\u9012\u51cf\u4f18\u5148\u7ea7\u987a\u5e8f\u5e94\u7528\u3002</p>"},{"location":"chisel_explanation/warnings/#_5","title":"\u8fc7\u6ee4\u5668","text":"<p>\u652f\u6301\u7684\u8fc7\u6ee4\u5668\u6709\uff1a</p> <ul> <li><code>any</code> - \u5339\u914d\u6240\u6709\u8b66\u544a</li> <li><code>id=&lt;\u6574\u6570&gt;</code> - \u5339\u914d\u5177\u6709\u8be5\u6574\u6570 id \u7684\u8b66\u544a</li> <li><code>src=&lt;\u901a\u914d\u7b26&gt;</code> - \u5f53 <code>&lt;\u901a\u914d\u7b26&gt;</code> \u5339\u914d\u8b66\u544a\u53d1\u751f\u4f4d\u7f6e\u7684\u6e90\u5b9a\u4f4d\u5668\u6587\u4ef6\u540d\u65f6\u5339\u914d\u8b66\u544a</li> </ul> <p><code>id</code> \u548c <code>src</code> \u8fc7\u6ee4\u5668\u53ef\u4ee5\u7528 <code>&amp;</code> \u7ec4\u5408\u3002 \u4efb\u4f55\u8fc7\u6ee4\u5668\u6700\u591a\u53ef\u4ee5\u5305\u542b\u4e00\u4e2a <code>id</code> \u548c\u4e00\u4e2a <code>src</code>\u3002 <code>any</code> \u4e0d\u80fd\u4e0e\u4efb\u4f55\u5176\u4ed6\u8fc7\u6ee4\u5668\u7ec4\u5408\u3002</p>"},{"location":"chisel_explanation/warnings/#_6","title":"\u52a8\u4f5c","text":"<p>\u652f\u6301\u7684\u52a8\u4f5c\u6709\uff1a</p> <ul> <li><code>:s</code> - \u6291\u5236\u5339\u914d\u7684\u8b66\u544a</li> <li><code>:w</code> - \u5c06\u5339\u914d\u7684\u8b66\u544a\u4f5c\u4e3a\u8b66\u544a\u62a5\u544a\uff08\u9ed8\u8ba4\u884c\u4e3a\uff09</li> <li><code>:e</code> - \u5c06\u5339\u914d\u7684\u8b66\u544a\u4f5c\u4e3a\u9519\u8bef\u62a5\u544a</li> </ul>"},{"location":"chisel_explanation/warnings/#_7","title":"\u793a\u4f8b","text":"<p>\u4ee5\u4e0b\u793a\u4f8b\u5728\u6b63\u5e38\u7f16\u8bd1\u65f6\u4f1a\u53d1\u51fa\u8b66\u544a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:invisible:reset\n// \u5e2e\u52a9\u51fd\u6570\uff0c\u629b\u5f03\u8fd4\u56de\u503c\u4f7f\u5176\u4e0d\u5728 mdoc \u4e2d\u663e\u793a\ndef compile(gen: =&gt; chisel3.RawModule, args: Array[String] = Array()): Unit = {\n  circt.stage.ChiselStage.emitCHIRRTL(gen, args = args)\n}\n</code></pre> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\nimport chisel3._\nclass TooWideIndexModule extends RawModule {\n  val in = IO(Input(Vec(4, UInt(8.W))))\n  val idx = IO(Input(UInt(3.W)))\n  val out = IO(Output(UInt(8.W)))\n  out := in(idx)\n}\ncompile(new TooWideIndexModule)\n</code></pre> <p>\u5982\u8b66\u544a\u6240\u793a\uff0c\u8fd9\u662f\u8b66\u544a <code>W004</code>\uff08\u53ef\u4ee5\u6309\u7167\u4e0b\u6587\u6240\u8ff0\u4fee\u590d\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>id</code> \u8fc7\u6ee4\u5668\u6765\u6291\u5236\u5b83\uff0c\u8fd9\u5c06\u6291\u5236\u6b64\u7f16\u8bd1\u8fd0\u884c\u4e2d\u8be5\u8b66\u544a\u7684\u6240\u6709\u5b9e\u4f8b\u3002</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\ncompile(new TooWideIndexModule, args = Array(\"--warn-conf\", \"id=4:s\"))\n</code></pre> <p>\u901a\u5e38\u5efa\u8bae\u4f7f\u8b66\u544a\u6291\u5236\u5c3d\u53ef\u80fd\u7cbe\u786e\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2a <code>id</code> \u8fc7\u6ee4\u5668\u4e0e\u4e00\u4e2a <code>src</code> \u901a\u914d\u7b26\u8fc7\u6ee4\u5668\u7ec4\u5408\uff0c\u53ea\u9488\u5bf9\u8fd9\u4e2a\u6587\u4ef6\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\ncompile(new TooWideIndexModule, args = Array(\"--warn-conf\", \"id=4&amp;src=**warnings.md:s\"))\n</code></pre> <p>\u6700\u540e\uff0c\u6211\u4eec\u9f13\u52b1\u7528\u6237\u5c3d\u53ef\u80fd\u5c06\u8b66\u544a\u89c6\u4e3a\u9519\u8bef\uff0c \u6240\u4ee5\u4ed6\u4eec\u5e94\u8be5\u59cb\u7ec8\u5728\u4efb\u4f55\u8b66\u544a\u914d\u7f6e\u7684\u672b\u5c3e\u6dfb\u52a0 <code>any:e</code> \u4ee5\u5c06\u6240\u6709\u672a\u5339\u914d\u7684\u8b66\u544a\u63d0\u5347\u4e3a\u9519\u8bef\uff1a</p> <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc\ncompile(new TooWideIndexModule, args = Array(\"--warn-conf\", \"id=4&amp;src=**warnings.md:s,any:e\"))\n// \u6216\ncompile(new TooWideIndexModule, args = Array(\"--warn-conf\", \"id=4&amp;src=**warnings.md:s\", \"--warn-conf\", \"any:e\"))\n// \u6216\ncompile(new TooWideIndexModule, args = Array(\"--warn-conf\", \"id=4&amp;src=**warnings.md:s\", \"--warnings-as-errors\"))\n</code></pre>"},{"location":"chisel_explanation/warnings/#_8","title":"\u8b66\u544a\u8bcd\u6c47\u8868","text":"<p>Chisel \u8b66\u544a\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u6807\u8bc6\u7b26\u53f7\uff0c\u8fd9\u4f7f\u5b83\u4eec\u66f4\u5bb9\u6613\u67e5\u627e\uff0c\u800c\u4e14\u53ef\u4ee5\u6309\u4e0a\u8ff0\u65b9\u5f0f\u914d\u7f6e\u3002</p>"},{"location":"chisel_explanation/warnings/#w001-uint-chiselenum","title":"[W001] \u4e0d\u5b89\u5168\u7684 UInt \u5230 ChiselEnum \u7684\u8f6c\u6362","text":"<p>\u5f53\u5c06 <code>UInt</code> \u8f6c\u6362\u4e3a <code>ChiselEnum</code> \u65f6\uff0c\u5982\u679c <code>UInt</code> \u53ef\u80fd\u53d6\u5230\u7684\u67d0\u4e9b\u503c\u4e0d\u662f\u679a\u4e3e\u4e2d\u7684\u5408\u6cd5\u72b6\u6001\uff0c\u5c31\u4f1a\u53d1\u751f\u6b64\u8b66\u544a\u3002 \u53c2\u89c1 ChiselEnum \u8bf4\u660e\u83b7\u53d6\u66f4\u591a\u4fe1\u606f\u548c\u5982\u4f55\u4fee\u590d\u6b64\u8b66\u544a\u3002</p> <p>\u6ce8\u610f\uff1a\u8fd9\u662f\u76ee\u524d\u552f\u4e00\u4e00\u4e2a\u6ca1\u6709\u8ba1\u5212\u53d8\u6210\u9519\u8bef\u7684\u8b66\u544a\u3002</p>"},{"location":"chisel_explanation/warnings/#w002","title":"[W002] \u52a8\u6001\u4f4d\u9009\u62e9\u592a\u5bbd","text":"<p>\u5f53\u4f7f\u7528\u6bd4\u5bfb\u5740\u7d22\u5f15\u5bf9\u8c61\u7684\u6240\u6709\u4f4d\u6240\u9700\u5bbd\u5ea6\u66f4\u5bbd\u7684\u7d22\u5f15\u52a8\u6001\u7d22\u5f15 <code>UInt</code> \u6216 <code>SInt</code> \u65f6\uff0c\u4f1a\u53d1\u751f\u6b64\u8b66\u544a\u3002 \u5b83\u8868\u660e\u7d22\u5f15\u7684\u9ad8\u4f4d\u88ab\u7d22\u5f15\u64cd\u4f5c\u5ffd\u7565\u4e86\u3002 \u53ef\u4ee5\u6309\u7167 Cookbook \u4e2d\u7684\u63cf\u8ff0\u4fee\u590d\u3002</p>"},{"location":"chisel_explanation/warnings/#w003","title":"[W003] \u52a8\u6001\u4f4d\u9009\u62e9\u592a\u7a84","text":"<p>\u5f53\u4f7f\u7528\u592a\u7a84\u800c\u65e0\u6cd5\u5bfb\u5740\u7d22\u5f15\u5bf9\u8c61\u7684\u6240\u6709\u4f4d\u7684\u7d22\u5f15\u52a8\u6001\u7d22\u5f15 <code>UInt</code> \u6216 <code>SInt</code> \u65f6\uff0c\u4f1a\u53d1\u751f\u6b64\u8b66\u544a\u3002 \u5b83\u8868\u660e\u7d22\u5f15\u5bf9\u8c61\u7684\u67d0\u4e9b\u4f4d\u65e0\u6cd5\u901a\u8fc7\u7d22\u5f15\u64cd\u4f5c\u8bbf\u95ee\u3002 \u53ef\u4ee5\u6309\u7167 Cookbook \u4e2d\u7684\u63cf\u8ff0\u4fee\u590d\u3002</p>"},{"location":"chisel_explanation/warnings/#w004","title":"[W004] \u52a8\u6001\u7d22\u5f15\u592a\u5bbd","text":"<p>\u5f53\u4f7f\u7528\u6bd4\u5bfb\u5740 <code>Vec</code> \u7684\u6240\u6709\u5143\u7d20\u6240\u9700\u5bbd\u5ea6\u66f4\u5bbd\u7684\u7d22\u5f15\u52a8\u6001\u7d22\u5f15 <code>Vec</code> \u65f6\uff0c\u4f1a\u53d1\u751f\u6b64\u8b66\u544a\u3002 \u5b83\u8868\u660e\u7d22\u5f15\u7684\u9ad8\u4f4d\u88ab\u7d22\u5f15\u64cd\u4f5c\u5ffd\u7565\u4e86\u3002 \u53ef\u4ee5\u6309\u7167 Cookbook \u4e2d\u7684\u63cf\u8ff0\u4fee\u590d\u3002</p>"},{"location":"chisel_explanation/warnings/#w005","title":"[W005] \u52a8\u6001\u7d22\u5f15\u592a\u7a84","text":"<p>\u5f53\u4f7f\u7528\u592a\u5c0f\u800c\u65e0\u6cd5\u5bfb\u5740 <code>Vec</code> \u4e2d\u6240\u6709\u5143\u7d20\u7684\u7d22\u5f15\u52a8\u6001\u7d22\u5f15 <code>Vec</code> \u65f6\uff0c\u4f1a\u53d1\u751f\u6b64\u8b66\u544a\u3002 \u5b83\u8868\u660e <code>Vec</code> \u7684\u67d0\u4e9b\u5143\u7d20\u65e0\u6cd5\u901a\u8fc7\u7d22\u5f15\u64cd\u4f5c\u8bbf\u95ee\u3002 \u53ef\u4ee5\u6309\u7167 Cookbook \u4e2d\u7684\u63cf\u8ff0\u4fee\u590d\u3002</p>"},{"location":"chisel_explanation/warnings/#w006-0-vec","title":"[W006] \u4ece\u5927\u5c0f\u4e3a 0 \u7684 Vec \u4e2d\u63d0\u53d6","text":"<p>\u5f53\u7d22\u5f15\u4e00\u4e2a\u6ca1\u6709\u5143\u7d20\u7684 <code>Vec</code> \u65f6\uff0c\u4f1a\u53d1\u751f\u6b64\u8b66\u544a\u3002 \u901a\u8fc7\u5220\u9664\u5bf9\u5927\u5c0f\u4e3a\u96f6\u7684 <code>Vec</code> \u7684\u7d22\u5f15\u64cd\u4f5c\uff08\u53ef\u80fd\u901a\u8fc7\u4f7f\u7528 <code>if-else</code> \u6216 <code>Option.when</code> \u8fdb\u884c\u4fdd\u62a4\uff09\u6765\u4fee\u590d\u3002</p>"},{"location":"chisel_explanation/warnings/#w007-bundle","title":"[W007] Bundle \u5b57\u9762\u91cf\u503c\u592a\u5bbd","text":"<p>\u5f53\u521b\u5efa\u4e00\u4e2a Bundle Literal \u65f6\uff0c\u5982\u679c\u67d0\u4e2a\u5b57\u6bb5\u7684\u5b57\u9762\u91cf\u503c\u5bbd\u5ea6\u8d85\u8fc7\u4e86 Bundle \u5b57\u6bb5\u7684\u5bbd\u5ea6\uff0c\u5c31\u4f1a\u53d1\u751f\u6b64\u8b66\u544a\u3002 \u901a\u8fc7\u51cf\u5c0f\u5b57\u9762\u91cf\u7684\u5bbd\u5ea6\u6765\u4fee\u590d\uff08\u5982\u679c\u65e0\u6cd5\u5728\u5b57\u6bb5\u5bbd\u5ea6\u5185\u7f16\u7801\u8be5\u503c\uff0c\u5219\u53ef\u4ee5\u9009\u62e9\u5176\u4ed6\u503c\uff09\u3002</p>"},{"location":"chisel_explanation/warnings/#w008-astypeof","title":"[W008] asTypeOf \u7684\u8fd4\u56de\u503c\u5c06\u5728\u4e0d\u4e45\u7684\u5c06\u6765\u53d8\u4e3a\u53ea\u8bfb","text":"<p>:::warning</p> <p>\u4ece Chisel 7.0.0 \u5f00\u59cb\uff0c\u8fd9\u73b0\u5728\u662f\u4e00\u4e2a\u9519\u8bef</p> <p>:::</p> <p>\u6b64\u8b66\u544a\u8868\u793a\u5bf9 <code>.asTypeOf(_)</code> \u7684\u8c03\u7528\u7ed3\u679c\u88ab\u7528\u4f5c\u8fde\u63a5\u7684\u76ee\u6807\u3002 \u901a\u8fc7\u5b9e\u4f8b\u5316\u4e00\u4e2a\u7ebf\u7f51\u6765\u4fee\u590d\u3002</p> <p>\u4f8b\u5982\uff0c\u7ed9\u5b9a\u4ee5\u4e0b\u4ee3\u7801\uff1a <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:compile-only\nclass MyBundle extends Bundle {\n  val foo = UInt(8.W)\n  val bar = UInt(8.W)\n}\nval x = 0.U.asTypeOf(new MyBundle)\nx.bar := 123.U\n</code></pre></p> <p>\u53ef\u4ee5\u901a\u8fc7\u63d2\u5165\u4e00\u4e2a\u7ebf\u7f51\u6765\u4fee\u590d\u8b66\u544a\uff1a <pre><code>// \u539f\u59cb\u4ee3\u7801\u5757\u4e2d\u7684\u6807\u8bb0: mdoc:compile-only\nclass MyBundle extends Bundle {\n  val foo = UInt(8.W)\n  val bar = UInt(8.W)\n}\nval x = WireInit(0.U.asTypeOf(new MyBundle))\nx.bar := 123.U\n</code></pre></p>"},{"location":"chisel_explanation/width-inference/","title":"\u4f4d\u5bbd\u63a8\u65ad","text":"<p>Chisel \u63d0\u4f9b\u4f4d\u5bbd\u63a8\u65ad\u6765\u51cf\u5c11\u8bbe\u8ba1\u5de5\u4f5c\u91cf\u3002\u6211\u4eec\u9f13\u52b1\u7528\u6237\u624b\u52a8\u6307\u5b9a\u7aef\u53e3\u548c\u5bc4\u5b58\u5668\u7684\u4f4d\u5bbd\u4ee5\u9632\u6b62\u51fa\u73b0\u4efb\u4f55\u610f\u5916\uff0c\u4f46\u672a\u6307\u5b9a\u7684\u4f4d\u5bbd\u5c06\u7531 FIRRTL \u7f16\u8bd1\u5668\u63a8\u65ad\u3002</p> <p>\u5bf9\u4e8e\u6240\u6709\u672a\u6307\u5b9a\u4f4d\u5bbd\u7684\u7535\u8def\u7ec4\u4ef6\uff0cFIRRTL \u7f16\u8bd1\u5668\u5c06\u63a8\u65ad\u4fdd\u6301\u5176\u6240\u6709\u8f93\u5165\u8fde\u63a5\u5408\u6cd5\u6027\u6240\u9700\u7684\u6700\u5c0f\u53ef\u80fd\u4f4d\u5bbd\u3002\u8fd9\u91cc\u9690\u542b\u7684\u662f\u63a8\u65ad\u662f\u4ee5 Chisel \u4e2d\u8d4b\u503c\u8bed\u53e5\u4ece\u53f3\u5230\u5de6\u7684\u65b9\u5f0f\u8fdb\u884c\u7684\uff0c\u5373\u4ece\u53f3\u4fa7\u5230\u5de6\u4fa7\u3002\u5982\u679c\u4e00\u4e2a\u7ec4\u4ef6\u6ca1\u6709\u8f93\u5165\u8fde\u63a5\uff0c\u4e14\u4f4d\u5bbd\u672a\u6307\u5b9a\uff0c\u5219\u4f1a\u629b\u51fa\u9519\u8bef\u8868\u660e\u65e0\u6cd5\u63a8\u65ad\u4f4d\u5bbd\u3002</p> <p>\u5bf9\u4e8e\u672a\u6307\u5b9a\u4f4d\u5bbd\u7684\u6a21\u5757\u8f93\u5165\u7aef\u53e3\uff0c\u63a8\u65ad\u7684\u4f4d\u5bbd\u662f\u4fdd\u6301\u8be5\u6a21\u5757\u6240\u6709\u5b9e\u4f8b\u7684\u6240\u6709\u8f93\u5165\u8fde\u63a5\u5408\u6cd5\u6027\u6240\u9700\u7684\u6700\u5c0f\u53ef\u80fd\u4f4d\u5bbd\u3002 \u57fa\u672c\u7c7b\u578b\u7684\u591a\u8def\u590d\u7528\u5668\u8868\u8fbe\u5f0f\u7684\u4f4d\u5bbd\u662f\u5176\u4e24\u4e2a\u5bf9\u5e94\u8f93\u5165\u4f4d\u5bbd\u7684\u6700\u5927\u503c\u3002\u5bf9\u4e8e\u591a\u8def\u590d\u7528\u805a\u5408\u7c7b\u578b\u7684\u8868\u8fbe\u5f0f\uff0c\u6bcf\u4e2a\u53f6\u5b50\u5b50\u5143\u7d20\u7684\u751f\u6210\u4f4d\u5bbd\u662f\u5176\u5bf9\u5e94\u7684\u4e24\u4e2a\u8f93\u5165\u53f6\u5b50\u5b50\u5143\u7d20\u4f4d\u5bbd\u7684\u6700\u5927\u503c\u3002 \u6761\u4ef6\u6709\u6548\u8868\u8fbe\u5f0f\u7684\u4f4d\u5bbd\u662f\u5176\u8f93\u5165\u8868\u8fbe\u5f0f\u7684\u4f4d\u5bbd\u3002\u5b8c\u6574\u7684\u5f62\u5f0f\u5316\u63cf\u8ff0\u8bf7\u53c2\u89c1 Firrtl \u89c4\u8303\u3002</p> <p>\u786c\u4ef6\u8fd0\u7b97\u7b26\u7684\u8f93\u51fa\u4f4d\u5bbd\u7531\u4ee5\u4e0b\u89c4\u5219\u96c6\u5b9a\u4e49\uff1a</p> \u64cd\u4f5c \u4f4d\u5bbd <code>z = x + y</code> \u6216 <code>z = x +% y</code> <code>w(z) = max(w(x), w(y))</code> <code>z = x +&amp; y</code> <code>w(z) = max(w(x), w(y)) + 1</code> <code>z = x - y</code> \u6216 <code>z = x -% y</code> <code>w(z) = max(w(x), w(y))</code> <code>z = x -&amp; y</code> <code>w(z) = max(w(x), w(y)) + 1</code> <code>z = x &amp; y</code> <code>w(z) = max(w(x), w(y))</code> <code>z = Mux(c, x, y)</code> <code>w(z) = max(w(x), w(y))</code> <code>z = w * y</code> <code>w(z) = w(x) + w(y)</code> <code>z = x &lt;&lt; n</code> <code>w(z) = w(x) + maxNum(n)</code> <code>z = x &gt;&gt; n</code> <code>w(z) = w(x) - minNum(n)</code> <code>z = Cat(x, y)</code> <code>w(z) = w(x) + w(y)</code> <code>z = Fill(n, x)</code> <code>w(z) = w(x) * maxNum(n)</code> <p>\u5176\u4e2d\u4f8b\u5982 <code>w(z)</code> \u662f\u7ebf <code>z</code> \u7684\u4f4d\u5bbd\uff0c\u800c <code>&amp;</code> \u89c4\u5219\u9002\u7528\u4e8e\u6240\u6709\u6309\u4f4d\u903b\u8f91\u8fd0\u7b97\u3002</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u4ece\u672a\u6307\u5b9a\u4f4d\u5bbd\u5143\u7d20\uff08\u901a\u5e38\u662f\u9876\u5c42\u8f93\u5165\uff09\u5f00\u59cb\u7684\u8fde\u63a5\u8def\u5f84\uff0c\u7f16\u8bd1\u5668\u5c06\u629b\u51fa\u5f02\u5e38\uff0c\u6307\u793a\u67d0\u4e2a\u4f4d\u5bbd\u65e0\u6cd5\u63a8\u65ad\u3002</p> <p>\u4e00\u4e2a\u5e38\u89c1\u7684\"\u9677\u9631\"\u6765\u81ea\u4e8e\u4f7f\u7528\u622a\u65ad\u52a0\u6cd5\u548c\u51cf\u6cd5\u64cd\u4f5c\u7b26 <code>+</code> \u548c <code>-</code>\u3002\u5e0c\u671b\u7ed3\u679c\u4fdd\u6301\u52a0\u6cd5\u6216\u51cf\u6cd5\u5b8c\u6574\u3001\u6269\u5c55\u7cbe\u5ea6\u7684\u7528\u6237\u5e94\u8be5\u4f7f\u7528\u6269\u5c55\u64cd\u4f5c\u7b26 <code>+&amp;</code> \u548c <code>-&amp;</code>\u3002</p> <p>\u9ed8\u8ba4\u7684\u622a\u65ad\u64cd\u4f5c\u6765\u81ea Chisel \u4f5c\u4e3a\u5fae\u5904\u7406\u5668\u8bbe\u8ba1\u8bed\u8a00\u7684\u5386\u53f2\u3002</p>"}]}